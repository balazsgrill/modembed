transformation deviceTransformation(in dev:mcdevice, out pic:picdevice);

modeltype mcdevice uses "http://microchip.com";
modeltype picdevice uses "http://cubussapiens.hu/modembed/pic";
modeltype scheme uses "http://cubussapiens.hu/modembed/config";
	
	
	
main() {
	dev.rootObjects()[mcdevice::Device] -> map toPicDevice();
}

mapping mcdevice::Device::toPicDevice() : pic::PicCPUType{
	name := 'device';
	_configuration := object ConfigurationBits{
		_scheme := object Scheme{
			subsets := self.cfgbits -> map configBitsToParamSet();
		};
		words := self.cfgbits -> map configBitsToWord();
		wordsize := self.calcWordSize();
	}
}



/* 
 * Mappings to create configuration scheme 
 */
mapping mcdevice::device::config::CfgBits::configBitsToParamSet() : scheme::ParameterSet{
	name := self.key;
	parameters := self.fields -> map fieldToParameter();
} 

mapping mcdevice::device::config::Field::fieldToParameter() : scheme::EnumParam{
	name := self.desc;
	literals := self.settings -> map settingToLiteral();
}

mapping mcdevice::device::config::Setting::settingToLiteral() :scheme::EnumParamLiteral{
	name := self.desc;
	value := self.calcValue();
}

/*
 * Mappings to create configuration words
 */
mapping mcdevice::device::config::CfgBits::configBitsToWord() : pic::ConfigurationWord{
	address := self.addr;
	fields := self.fields -> map configField();
}

mapping mcdevice::device::config::Field::configField() : pic::ConfigurationField{
	startBit := self.calcStartBit();
	length := self.calcLength(startBit);
	parameter := self.resolveone(scheme::EnumParam);
}

helper mcdevice::Device::calcWordSize() : Integer{
	var maxbit : Integer = 0;
	self.cfgbits->forEach(w){
		w.fields->forEach(fi){
			var f : ConfigurationField = fi.resolveone(ConfigurationField);
			maxbit := maxbit.max(f.startBit+f.length);
		}
	};
	return ((maxbit/8).ceil())*8;
}


helper Real::ceil() : Integer{
	var i : Integer = self.floor();
	if (self > i) then{
		return i+1;
	}endif;
	return i;
}

helper mcdevice::device::config::Field::calcLength(startbit : Integer) : Integer {
	var i : Integer := startbit;
	var v : Integer := self.mask;
	while(i>0){
		i := i-1;
		v := (v/2).floor();
	};
	var l : Integer := 0;
	while(v.mod(2) <> 0){
		l := l+1;
		v := (v/2).floor();
	};
	return l;
}

helper mcdevice::device::config::Field::calcStartBit() : Integer {
	var i : Integer := 2;
	var j : Integer := 0;
	var r : Integer = self.mask;
	while(r.mod(i).=(0)){
		j := j+1;
		i := i*2;
	};
	return j;
}

helper mcdevice::device::config::Setting::calcValue() : Integer {
	var i : Integer := 2;
	var v : Integer := self.value;
	var r : Integer := self.container()[mcdevice::device::config::Field].mask ->sum();
	while(r.mod(i).=(0)){
		v := (v/2).floor();
		i := i*2;
	};
	return v;
}