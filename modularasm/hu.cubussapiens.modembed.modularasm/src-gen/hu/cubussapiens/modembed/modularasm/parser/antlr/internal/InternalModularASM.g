/*
* generated by Xtext
*/
grammar InternalModularASM;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.cubussapiens.modembed.modularasm.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.cubussapiens.modembed.modularasm.parser.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parsetree.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.xtext.conversion.ValueConverterException;
import hu.cubussapiens.modembed.modularasm.services.ModularASMGrammarAccess;

}

@parser::members {

 	private ModularASMGrammarAccess grammarAccess;
 	
    public InternalModularASMParser(TokenStream input, IAstFactory factory, ModularASMGrammarAccess grammarAccess) {
        this(input);
        this.factory = factory;
        registerRules(grammarAccess.getGrammar());
        this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected InputStream getTokenFile() {
    	ClassLoader classLoader = getClass().getClassLoader();
    	return classLoader.getResourceAsStream("hu/cubussapiens/modembed/modularasm/parser/antlr/internal/InternalModularASM.tokens");
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Module";	
   	}
   	
   	@Override
   	protected ModularASMGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
	}
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleRule(), currentNode); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Module
ruleModule returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'module' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getModuleKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModuleAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'target' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getTargetKeyword_2(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getTargetQualifiedIDParserRuleCall_3_0(), currentNode); 
	    }
		lv_target_3_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"target",
	        		lv_target_3_0, 
	        		"QualifiedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getLeftCurlyBracketKeyword_4(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getItemsModuleItemParserRuleCall_5_0(), currentNode); 
	    }
		lv_items_5_0=ruleModuleItem		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"items",
	        		lv_items_5_0, 
	        		"ModuleItem", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(	'(' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getLeftParenthesisKeyword_6_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleAccess().getParamsModuleParamParserRuleCall_6_1_0(), currentNode); 
	    }
		lv_params_7_0=ruleModuleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_7_0, 
	        		"ModuleParam", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getRightParenthesisKeyword_6_2(), null); 
    }
)?	'}' 
    {
        createLeafNode(grammarAccess.getModuleAccess().getRightCurlyBracketKeyword_7(), null); 
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleModuleParam
entryRuleModuleParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleParamRule(), currentNode); }
	 iv_ruleModuleParam=ruleModuleParam 
	 { $current=$iv_ruleModuleParam.current; } 
	 EOF 
;

// Rule ModuleParam
ruleModuleParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getModuleParamAccess().getTypeModuleParamTypeParserRuleCall_0_0(), currentNode); 
	    }
		lv_type_0_0=ruleModuleParamType		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_0_0, 
	        		"ModuleParamType", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getModuleParamAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getModuleParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleModuleParamType
entryRuleModuleParamType returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleParamTypeRule(), currentNode); } 
	 iv_ruleModuleParamType=ruleModuleParamType 
	 { $current=$iv_ruleModuleParamType.current.getText(); }  
	 EOF 
;

// Rule ModuleParamType
ruleModuleParamType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:
(
	kw='literal' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getModuleParamTypeAccess().getLiteralKeyword_0(), null); 
    }

    |
	kw='callback' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getModuleParamTypeAccess().getCallbackKeyword_1(), null); 
    }

    |
	kw='address' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getModuleParamTypeAccess().getAddressKeyword_2(), null); 
    }
)
    ;





// Entry rule entryRuleQualifiedID
entryRuleQualifiedID returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getQualifiedIDRule(), currentNode); }
	 iv_ruleQualifiedID=ruleQualifiedID 
	 { $current=$iv_ruleQualifiedID.current; } 
	 EOF 
;

// Rule QualifiedID
ruleQualifiedID returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_segments_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getQualifiedIDAccess().getSegmentsIDTerminalRuleCall_0_0(), "segments"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedIDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"segments",
	        		lv_segments_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'.' 
    {
        createLeafNode(grammarAccess.getQualifiedIDAccess().getFullStopKeyword_1_0(), null); 
    }
(
(
		lv_segments_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getQualifiedIDAccess().getSegmentsIDTerminalRuleCall_1_1_0(), "segments"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getQualifiedIDRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"segments",
	        		lv_segments_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))?)
;





// Entry rule entryRuleModuleItem
entryRuleModuleItem returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModuleItemRule(), currentNode); }
	 iv_ruleModuleItem=ruleModuleItem 
	 { $current=$iv_ruleModuleItem.current; } 
	 EOF 
;

// Rule ModuleItem
ruleModuleItem returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleItemAccess().getVariableDeclParserRuleCall_0_0(), currentNode); 
    }
    this_VariableDecl_0=ruleVariableDecl
    { 
        $current = $this_VariableDecl_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleItemAccess().getInstanceParserRuleCall_0_1(), currentNode); 
    }
    this_Instance_1=ruleInstance
    { 
        $current = $this_Instance_1.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getModuleItemAccess().getFunctionParserRuleCall_0_2(), currentNode); 
    }
    this_Function_2=ruleFunction
    { 
        $current = $this_Function_2.current; 
        currentNode = currentNode.getParent();
    }
)	';' 
    {
        createLeafNode(grammarAccess.getModuleItemAccess().getSemicolonKeyword_1(), null); 
    }
)
;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getModifierRule(), currentNode); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
	    lastConsumedNode = currentNode;
    }:

	kw='public' 
    {
        $current.merge(kw);
        createLeafNode(grammarAccess.getModifierAccess().getPublicKeyword(), null); 
    }

    ;





// Entry rule entryRuleVariableDecl
entryRuleVariableDecl returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableDeclRule(), currentNode); }
	 iv_ruleVariableDecl=ruleVariableDecl 
	 { $current=$iv_ruleVariableDecl.current; } 
	 EOF 
;

// Rule VariableDecl
ruleVariableDecl returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getModifierModifierParserRuleCall_0_0(), currentNode); 
	    }
		lv_modifier_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"modifier",
	        		lv_modifier_0_0, 
	        		"Modifier", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getVariableDeclAccess().getVariableVariableParserRuleCall_1_0(), currentNode); 
	    }
		lv_variable_1_0=ruleVariable		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableDeclRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"variable",
	        		lv_variable_1_0, 
	        		"Variable", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
))
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getVariableRule(), currentNode); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'var' 
    {
        createLeafNode(grammarAccess.getVariableAccess().getVarKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getVariableRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleInstance
entryRuleInstance returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstanceRule(), currentNode); }
	 iv_ruleInstance=ruleInstance 
	 { $current=$iv_ruleInstance.current; } 
	 EOF 
;

// Rule Instance
ruleInstance returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'instance' 
    {
        createLeafNode(grammarAccess.getInstanceAccess().getInstanceKeyword_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceAccess().getTypeQualifiedIDParserRuleCall_1_0(), currentNode); 
	    }
		lv_type_1_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"type",
	        		lv_type_1_0, 
	        		"QualifiedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInstanceAccess().getNameIDTerminalRuleCall_2_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_2_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(	'(' 
    {
        createLeafNode(grammarAccess.getInstanceAccess().getLeftParenthesisKeyword_3_0(), null); 
    }
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstanceAccess().getParamsModuleParamParserRuleCall_3_1_0(), currentNode); 
	    }
		lv_params_4_0=ruleModuleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstanceRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_4_0, 
	        		"ModuleParam", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*	')' 
    {
        createLeafNode(grammarAccess.getInstanceAccess().getRightParenthesisKeyword_3_2(), null); 
    }
)?)
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getFunctionRule(), currentNode); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'func' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getFuncKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)	'{' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getLeftCurlyBracketKeyword_2(), null); 
    }
((
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getFunctionAccess().getStepStepParserRuleCall_3_0_0(), currentNode); 
	    }
		lv_step_3_0=ruleStep		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getFunctionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"step",
	        		lv_step_3_0, 
	        		"Step", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)	';' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getSemicolonKeyword_3_1(), null); 
    }
)*	'}' 
    {
        createLeafNode(grammarAccess.getFunctionAccess().getRightCurlyBracketKeyword_4(), null); 
    }
)
;





// Entry rule entryRuleStep
entryRuleStep returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getStepRule(), currentNode); }
	 iv_ruleStep=ruleStep 
	 { $current=$iv_ruleStep.current; } 
	 EOF 
;

// Rule Step
ruleStep returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getStepAccess().getInstructionParserRuleCall_0(), currentNode); 
    }
    this_Instruction_0=ruleInstruction
    { 
        $current = $this_Instruction_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getStepAccess().getLabelParserRuleCall_1(), currentNode); 
    }
    this_Label_1=ruleLabel
    { 
        $current = $this_Label_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLabelRule(), currentNode); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(	'label' 
    {
        createLeafNode(grammarAccess.getLabelAccess().getLabelKeyword_0(), null); 
    }
(
(
		lv_name_1_0=RULE_ID
		{
			createLeafNode(grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_1_0(), "name"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLabelRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"name",
	        		lv_name_1_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleInstruction
entryRuleInstruction returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getInstructionRule(), currentNode); }
	 iv_ruleInstruction=ruleInstruction 
	 { $current=$iv_ruleInstruction.current; } 
	 EOF 
;

// Rule Instruction
ruleInstruction returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_ins_0_0=RULE_ID
		{
			createLeafNode(grammarAccess.getInstructionAccess().getInsIDTerminalRuleCall_0_0(), "ins"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ins",
	        		lv_ins_0_0, 
	        		"ID", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getInstructionAccess().getParamsParamParserRuleCall_1_0(), currentNode); 
	    }
		lv_params_1_0=ruleParam		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getInstructionRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		add(
	       			$current, 
	       			"params",
	        		lv_params_1_0, 
	        		"Param", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)*)
;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getParamRule(), currentNode); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
    { 
        currentNode=createCompositeNode(grammarAccess.getParamAccess().getLiteralParamParserRuleCall_0(), currentNode); 
    }
    this_LiteralParam_0=ruleLiteralParam
    { 
        $current = $this_LiteralParam_0.current; 
        currentNode = currentNode.getParent();
    }

    |
    { 
        currentNode=createCompositeNode(grammarAccess.getParamAccess().getRefParamParserRuleCall_1(), currentNode); 
    }
    this_RefParam_1=ruleRefParam
    { 
        $current = $this_RefParam_1.current; 
        currentNode = currentNode.getParent();
    }
)
;





// Entry rule entryRuleLiteralParam
entryRuleLiteralParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getLiteralParamRule(), currentNode); }
	 iv_ruleLiteralParam=ruleLiteralParam 
	 { $current=$iv_ruleLiteralParam.current; } 
	 EOF 
;

// Rule LiteralParam
ruleLiteralParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
((
(
		lv_value_0_0=RULE_INT
		{
			createLeafNode(grammarAccess.getLiteralParamAccess().getValueINTTerminalRuleCall_0_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_0_0, 
	        		"INT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
)
    |(
(
		lv_value_1_0=RULE_HEXINT
		{
			createLeafNode(grammarAccess.getLiteralParamAccess().getValueHEXINTTerminalRuleCall_1_0(), "value"); 
		}
		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getLiteralParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode, $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"value",
	        		lv_value_1_0, 
	        		"HEXINT", 
	        		lastConsumedNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	    }

)
))
;





// Entry rule entryRuleRefParam
entryRuleRefParam returns [EObject current=null] 
	:
	{ currentNode = createCompositeNode(grammarAccess.getRefParamRule(), currentNode); }
	 iv_ruleRefParam=ruleRefParam 
	 { $current=$iv_ruleRefParam.current; } 
	 EOF 
;

// Rule RefParam
ruleRefParam returns [EObject current=null] 
    @init { EObject temp=null; setCurrentLookahead(); resetLookahead(); 
    }
    @after { resetLookahead(); 
    	lastConsumedNode = currentNode;
    }:
(
(
		{ 
	        currentNode=createCompositeNode(grammarAccess.getRefParamAccess().getRefQualifiedIDParserRuleCall_0(), currentNode); 
	    }
		lv_ref_0_0=ruleQualifiedID		{
	        if ($current==null) {
	            $current = factory.create(grammarAccess.getRefParamRule().getType().getClassifier());
	            associateNodeWithAstElement(currentNode.getParent(), $current);
	        }
	        try {
	       		set(
	       			$current, 
	       			"ref",
	        		lv_ref_0_0, 
	        		"QualifiedID", 
	        		currentNode);
	        } catch (ValueConverterException vce) {
				handleValueConverterException(vce);
	        }
	        currentNode = currentNode.getParent();
	    }

)
)
;





RULE_HEXINT : '0x' ('0'..'9'|'A'..'F'|'a'..'f')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


