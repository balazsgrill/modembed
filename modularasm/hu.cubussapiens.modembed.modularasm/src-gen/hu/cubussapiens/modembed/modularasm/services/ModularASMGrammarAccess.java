/*
* generated by Xtext
*/

package hu.cubussapiens.modembed.modularasm.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ModularASMGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTargetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetQualifiedIDParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cItemsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cItemsModuleItemParserRuleCall_5_0 = (RuleCall)cItemsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cParamsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cParamsModuleParamParserRuleCall_6_1_0 = (RuleCall)cParamsAssignment_6_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Module hidden(WS, ML_COMMENT, SL_COMMENT):
		//	"module" name=ID "target" target=QualifiedID "{" items+=ModuleItem* ("(" params+=ModuleParam* ")")? "}";
		public ParserRule getRule() { return rule; }

		//"module" name=ID "target" target=QualifiedID "{" items+=ModuleItem* ("(" params+=ModuleParam* ")")? "}"
		public Group getGroup() { return cGroup; }

		//"module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"target"
		public Keyword getTargetKeyword_2() { return cTargetKeyword_2; }

		//target=QualifiedID
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }

		//QualifiedID
		public RuleCall getTargetQualifiedIDParserRuleCall_3_0() { return cTargetQualifiedIDParserRuleCall_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//items+=ModuleItem*
		public Assignment getItemsAssignment_5() { return cItemsAssignment_5; }

		//ModuleItem
		public RuleCall getItemsModuleItemParserRuleCall_5_0() { return cItemsModuleItemParserRuleCall_5_0; }

		//("(" params+=ModuleParam* ")")?
		public Group getGroup_6() { return cGroup_6; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }

		//params+=ModuleParam*
		public Assignment getParamsAssignment_6_1() { return cParamsAssignment_6_1; }

		//ModuleParam
		public RuleCall getParamsModuleParamParserRuleCall_6_1_0() { return cParamsModuleParamParserRuleCall_6_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_2() { return cRightParenthesisKeyword_6_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class ModuleParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleParam");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeQualifiedIDParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ModuleParam:
		//	type=QualifiedID name=ID;
		public ParserRule getRule() { return rule; }

		//type=QualifiedID name=ID
		public Group getGroup() { return cGroup; }

		//type=QualifiedID
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//QualifiedID
		public RuleCall getTypeQualifiedIDParserRuleCall_0_0() { return cTypeQualifiedIDParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class QualifiedIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSegmentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSegmentsIDTerminalRuleCall_0_0 = (RuleCall)cSegmentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSegmentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSegmentsIDTerminalRuleCall_1_1_0 = (RuleCall)cSegmentsAssignment_1_1.eContents().get(0);
		
		//QualifiedID:
		//	segments+=ID ("." segments+=ID)*;
		public ParserRule getRule() { return rule; }

		//segments+=ID ("." segments+=ID)*
		public Group getGroup() { return cGroup; }

		//segments+=ID
		public Assignment getSegmentsAssignment_0() { return cSegmentsAssignment_0; }

		//ID
		public RuleCall getSegmentsIDTerminalRuleCall_0_0() { return cSegmentsIDTerminalRuleCall_0_0; }

		//("." segments+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//segments+=ID
		public Assignment getSegmentsAssignment_1_1() { return cSegmentsAssignment_1_1; }

		//ID
		public RuleCall getSegmentsIDTerminalRuleCall_1_1_0() { return cSegmentsIDTerminalRuleCall_1_1_0; }
	}

	public class ModuleItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleItem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cInstanceParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cFunctionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cSymbolParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cConfigurationWordParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ModuleItem:
		//	(Variable | Instance | Function | Symbol | ConfigurationWord) ";";
		public ParserRule getRule() { return rule; }

		//(Variable | Instance | Function | Symbol | ConfigurationWord) ";"
		public Group getGroup() { return cGroup; }

		//Variable | Instance | Function | Symbol | ConfigurationWord
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_0_0() { return cVariableParserRuleCall_0_0; }

		//Instance
		public RuleCall getInstanceParserRuleCall_0_1() { return cInstanceParserRuleCall_0_1; }

		//Function
		public RuleCall getFunctionParserRuleCall_0_2() { return cFunctionParserRuleCall_0_2; }

		//Symbol
		public RuleCall getSymbolParserRuleCall_0_3() { return cSymbolParserRuleCall_0_3; }

		//ConfigurationWord
		public RuleCall getConfigurationWordParserRuleCall_0_4() { return cConfigurationWordParserRuleCall_0_4; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ConfigurationWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationWord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConfigKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDefaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefaultLiteralParamParserRuleCall_2_0 = (RuleCall)cDefaultAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cFieldsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cFieldsConfigurationFieldPlaceParserRuleCall_4_0_0 = (RuleCall)cFieldsAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//ConfigurationWord:
		//	"config" name=ID default=LiteralParam? "{" (fields+=ConfigurationFieldPlace ";")* "}";
		public ParserRule getRule() { return rule; }

		//"config" name=ID default=LiteralParam? "{" (fields+=ConfigurationFieldPlace ";")* "}"
		public Group getGroup() { return cGroup; }

		//"config"
		public Keyword getConfigKeyword_0() { return cConfigKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//default=LiteralParam?
		public Assignment getDefaultAssignment_2() { return cDefaultAssignment_2; }

		//LiteralParam
		public RuleCall getDefaultLiteralParamParserRuleCall_2_0() { return cDefaultLiteralParamParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//(fields+=ConfigurationFieldPlace ";")*
		public Group getGroup_4() { return cGroup_4; }

		//fields+=ConfigurationFieldPlace
		public Assignment getFieldsAssignment_4_0() { return cFieldsAssignment_4_0; }

		//ConfigurationFieldPlace
		public RuleCall getFieldsConfigurationFieldPlaceParserRuleCall_4_0_0() { return cFieldsConfigurationFieldPlaceParserRuleCall_4_0_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class ConfigurationFieldPlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationFieldPlace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBitNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBitNumLiteralParamParserRuleCall_0_0 = (RuleCall)cBitNumAssignment_0.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartBitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartBitLiteralParamParserRuleCall_2_0 = (RuleCall)cStartBitAssignment_2.eContents().get(0);
		private final Assignment cFieldAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFieldConfigurationFieldParserRuleCall_3_0 = (RuleCall)cFieldAssignment_3.eContents().get(0);
		
		//ConfigurationFieldPlace:
		//	bitNum=LiteralParam "at" startBit=LiteralParam field=ConfigurationField;
		public ParserRule getRule() { return rule; }

		//bitNum=LiteralParam "at" startBit=LiteralParam field=ConfigurationField
		public Group getGroup() { return cGroup; }

		//bitNum=LiteralParam
		public Assignment getBitNumAssignment_0() { return cBitNumAssignment_0; }

		//LiteralParam
		public RuleCall getBitNumLiteralParamParserRuleCall_0_0() { return cBitNumLiteralParamParserRuleCall_0_0; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//startBit=LiteralParam
		public Assignment getStartBitAssignment_2() { return cStartBitAssignment_2; }

		//LiteralParam
		public RuleCall getStartBitLiteralParamParserRuleCall_2_0() { return cStartBitLiteralParamParserRuleCall_2_0; }

		//field=ConfigurationField
		public Assignment getFieldAssignment_3() { return cFieldAssignment_3; }

		//ConfigurationField
		public RuleCall getFieldConfigurationFieldParserRuleCall_3_0() { return cFieldConfigurationFieldParserRuleCall_3_0; }
	}

	public class ConfigurationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConfigurationField");
		private final RuleCall cEnumConfigurationFieldParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ConfigurationField:
		//	EnumConfigurationField;
		public ParserRule getRule() { return rule; }

		//EnumConfigurationField
		public RuleCall getEnumConfigurationFieldParserRuleCall() { return cEnumConfigurationFieldParserRuleCall; }
	}

	public class EnumConfigurationFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConfigurationField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cLiteralsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cLiteralsEnumConfigurationFieldLiteralParserRuleCall_3_0_0 = (RuleCall)cLiteralsAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumConfigurationField:
		//	"enum" name=ID "{" (literals+=EnumConfigurationFieldLiteral ";")* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" (literals+=EnumConfigurationFieldLiteral ";")* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(literals+=EnumConfigurationFieldLiteral ";")*
		public Group getGroup_3() { return cGroup_3; }

		//literals+=EnumConfigurationFieldLiteral
		public Assignment getLiteralsAssignment_3_0() { return cLiteralsAssignment_3_0; }

		//EnumConfigurationFieldLiteral
		public RuleCall getLiteralsEnumConfigurationFieldLiteralParserRuleCall_3_0_0() { return cLiteralsEnumConfigurationFieldLiteralParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumConfigurationFieldLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumConfigurationFieldLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLiteralParamParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//EnumConfigurationFieldLiteral:
		//	name=ID "=" value=LiteralParam;
		public ParserRule getRule() { return rule; }

		//name=ID "=" value=LiteralParam
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=LiteralParam
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//LiteralParam
		public RuleCall getValueLiteralParamParserRuleCall_2_0() { return cValueLiteralParamParserRuleCall_2_0; }
	}

	public class SymbolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Symbol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSymbolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueHEXINTTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Symbol:
		//	"symbol" name=ID (value=INT | value=HEXINT);
		public ParserRule getRule() { return rule; }

		//"symbol" name=ID (value=INT | value=HEXINT)
		public Group getGroup() { return cGroup; }

		//"symbol"
		public Keyword getSymbolKeyword_0() { return cSymbolKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=INT | value=HEXINT
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=INT
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0_0() { return cValueINTTerminalRuleCall_2_0_0; }

		//value=HEXINT
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//HEXINT
		public RuleCall getValueHEXINTTerminalRuleCall_2_1_0() { return cValueHEXINTTerminalRuleCall_2_1_0; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	"var" name=ID;
		public ParserRule getRule() { return rule; }

		//"var" name=ID
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInstanceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeQualifiedIDParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParamsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParamsModuleParamParserRuleCall_3_1_0 = (RuleCall)cParamsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Instance:
		//	"instance" type=QualifiedID name=ID ("(" params+=ModuleParam* ")")?;
		public ParserRule getRule() { return rule; }

		//"instance" type=QualifiedID name=ID ("(" params+=ModuleParam* ")")?
		public Group getGroup() { return cGroup; }

		//"instance"
		public Keyword getInstanceKeyword_0() { return cInstanceKeyword_0; }

		//type=QualifiedID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//QualifiedID
		public RuleCall getTypeQualifiedIDParserRuleCall_1_0() { return cTypeQualifiedIDParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("(" params+=ModuleParam* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//params+=ModuleParam*
		public Assignment getParamsAssignment_3_1() { return cParamsAssignment_3_1; }

		//ModuleParam
		public RuleCall getParamsModuleParamParserRuleCall_3_1_0() { return cParamsModuleParamParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStepAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStepStepParserRuleCall_3_0_0 = (RuleCall)cStepAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Function:
		//	"func" name=ID "{" (step+=Step ";")* "}";
		public ParserRule getRule() { return rule; }

		//"func" name=ID "{" (step+=Step ";")* "}"
		public Group getGroup() { return cGroup; }

		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(step+=Step ";")*
		public Group getGroup_3() { return cGroup_3; }

		//step+=Step
		public Assignment getStepAssignment_3_0() { return cStepAssignment_3_0; }

		//Step
		public RuleCall getStepStepParserRuleCall_3_0_0() { return cStepStepParserRuleCall_3_0_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Step");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Step:
		//	Instruction | Label;
		public ParserRule getRule() { return rule; }

		//Instruction | Label
		public Alternatives getAlternatives() { return cAlternatives; }

		//Instruction
		public RuleCall getInstructionParserRuleCall_0() { return cInstructionParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Label:
		//	"label" name=ID;
		public ParserRule getRule() { return rule; }

		//"label" name=ID
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Instruction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInsIDTerminalRuleCall_0_0 = (RuleCall)cInsAssignment_0.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//Instruction:
		//	ins=ID params+=Param*;
		public ParserRule getRule() { return rule; }

		//ins=ID params+=Param*
		public Group getGroup() { return cGroup; }

		//ins=ID
		public Assignment getInsAssignment_0() { return cInsAssignment_0; }

		//ID
		public RuleCall getInsIDTerminalRuleCall_0_0() { return cInsIDTerminalRuleCall_0_0; }

		//params+=Param*
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_1_0() { return cParamsParamParserRuleCall_1_0; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParamParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRefParamParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Param:
		//	LiteralParam | RefParam;
		public ParserRule getRule() { return rule; }

		//LiteralParam | RefParam
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralParam
		public RuleCall getLiteralParamParserRuleCall_0() { return cLiteralParamParserRuleCall_0; }

		//RefParam
		public RuleCall getRefParamParserRuleCall_1() { return cRefParamParserRuleCall_1; }
	}

	public class LiteralParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueHEXINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LiteralParam:
		//	value=INT | value=HEXINT;
		public ParserRule getRule() { return rule; }

		//value=INT | value=HEXINT
		public Alternatives getAlternatives() { return cAlternatives; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//value=HEXINT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//HEXINT
		public RuleCall getValueHEXINTTerminalRuleCall_1_0() { return cValueHEXINTTerminalRuleCall_1_0; }
	}

	public class RefParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefParam");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRefQualifiedIDParserRuleCall_0 = (RuleCall)cRefAssignment.eContents().get(0);
		
		//RefParam:
		//	ref=QualifiedID;
		public ParserRule getRule() { return rule; }

		//ref=QualifiedID
		public Assignment getRefAssignment() { return cRefAssignment; }

		//QualifiedID
		public RuleCall getRefQualifiedIDParserRuleCall_0() { return cRefQualifiedIDParserRuleCall_0; }
	}
	
	
	private ModuleElements pModule;
	private ModuleParamElements pModuleParam;
	private QualifiedIDElements pQualifiedID;
	private ModuleItemElements pModuleItem;
	private ConfigurationWordElements pConfigurationWord;
	private ConfigurationFieldPlaceElements pConfigurationFieldPlace;
	private ConfigurationFieldElements pConfigurationField;
	private EnumConfigurationFieldElements pEnumConfigurationField;
	private EnumConfigurationFieldLiteralElements pEnumConfigurationFieldLiteral;
	private SymbolElements pSymbol;
	private VariableElements pVariable;
	private InstanceElements pInstance;
	private FunctionElements pFunction;
	private StepElements pStep;
	private LabelElements pLabel;
	private InstructionElements pInstruction;
	private ParamElements pParam;
	private TerminalRule tHEXINT;
	private LiteralParamElements pLiteralParam;
	private RefParamElements pRefParam;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ModularASMGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Module hidden(WS, ML_COMMENT, SL_COMMENT):
	//	"module" name=ID "target" target=QualifiedID "{" items+=ModuleItem* ("(" params+=ModuleParam* ")")? "}";
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//ModuleParam:
	//	type=QualifiedID name=ID;
	public ModuleParamElements getModuleParamAccess() {
		return (pModuleParam != null) ? pModuleParam : (pModuleParam = new ModuleParamElements());
	}
	
	public ParserRule getModuleParamRule() {
		return getModuleParamAccess().getRule();
	}

	//QualifiedID:
	//	segments+=ID ("." segments+=ID)*;
	public QualifiedIDElements getQualifiedIDAccess() {
		return (pQualifiedID != null) ? pQualifiedID : (pQualifiedID = new QualifiedIDElements());
	}
	
	public ParserRule getQualifiedIDRule() {
		return getQualifiedIDAccess().getRule();
	}

	//ModuleItem:
	//	(Variable | Instance | Function | Symbol | ConfigurationWord) ";";
	public ModuleItemElements getModuleItemAccess() {
		return (pModuleItem != null) ? pModuleItem : (pModuleItem = new ModuleItemElements());
	}
	
	public ParserRule getModuleItemRule() {
		return getModuleItemAccess().getRule();
	}

	//ConfigurationWord:
	//	"config" name=ID default=LiteralParam? "{" (fields+=ConfigurationFieldPlace ";")* "}";
	public ConfigurationWordElements getConfigurationWordAccess() {
		return (pConfigurationWord != null) ? pConfigurationWord : (pConfigurationWord = new ConfigurationWordElements());
	}
	
	public ParserRule getConfigurationWordRule() {
		return getConfigurationWordAccess().getRule();
	}

	//ConfigurationFieldPlace:
	//	bitNum=LiteralParam "at" startBit=LiteralParam field=ConfigurationField;
	public ConfigurationFieldPlaceElements getConfigurationFieldPlaceAccess() {
		return (pConfigurationFieldPlace != null) ? pConfigurationFieldPlace : (pConfigurationFieldPlace = new ConfigurationFieldPlaceElements());
	}
	
	public ParserRule getConfigurationFieldPlaceRule() {
		return getConfigurationFieldPlaceAccess().getRule();
	}

	//ConfigurationField:
	//	EnumConfigurationField;
	public ConfigurationFieldElements getConfigurationFieldAccess() {
		return (pConfigurationField != null) ? pConfigurationField : (pConfigurationField = new ConfigurationFieldElements());
	}
	
	public ParserRule getConfigurationFieldRule() {
		return getConfigurationFieldAccess().getRule();
	}

	//EnumConfigurationField:
	//	"enum" name=ID "{" (literals+=EnumConfigurationFieldLiteral ";")* "}";
	public EnumConfigurationFieldElements getEnumConfigurationFieldAccess() {
		return (pEnumConfigurationField != null) ? pEnumConfigurationField : (pEnumConfigurationField = new EnumConfigurationFieldElements());
	}
	
	public ParserRule getEnumConfigurationFieldRule() {
		return getEnumConfigurationFieldAccess().getRule();
	}

	//EnumConfigurationFieldLiteral:
	//	name=ID "=" value=LiteralParam;
	public EnumConfigurationFieldLiteralElements getEnumConfigurationFieldLiteralAccess() {
		return (pEnumConfigurationFieldLiteral != null) ? pEnumConfigurationFieldLiteral : (pEnumConfigurationFieldLiteral = new EnumConfigurationFieldLiteralElements());
	}
	
	public ParserRule getEnumConfigurationFieldLiteralRule() {
		return getEnumConfigurationFieldLiteralAccess().getRule();
	}

	//Symbol:
	//	"symbol" name=ID (value=INT | value=HEXINT);
	public SymbolElements getSymbolAccess() {
		return (pSymbol != null) ? pSymbol : (pSymbol = new SymbolElements());
	}
	
	public ParserRule getSymbolRule() {
		return getSymbolAccess().getRule();
	}

	//Variable:
	//	"var" name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Instance:
	//	"instance" type=QualifiedID name=ID ("(" params+=ModuleParam* ")")?;
	public InstanceElements getInstanceAccess() {
		return (pInstance != null) ? pInstance : (pInstance = new InstanceElements());
	}
	
	public ParserRule getInstanceRule() {
		return getInstanceAccess().getRule();
	}

	//Function:
	//	"func" name=ID "{" (step+=Step ";")* "}";
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Step:
	//	Instruction | Label;
	public StepElements getStepAccess() {
		return (pStep != null) ? pStep : (pStep = new StepElements());
	}
	
	public ParserRule getStepRule() {
		return getStepAccess().getRule();
	}

	//Label:
	//	"label" name=ID;
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Instruction:
	//	ins=ID params+=Param*;
	public InstructionElements getInstructionAccess() {
		return (pInstruction != null) ? pInstruction : (pInstruction = new InstructionElements());
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}

	//Param:
	//	LiteralParam | RefParam;
	public ParamElements getParamAccess() {
		return (pParam != null) ? pParam : (pParam = new ParamElements());
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//terminal HEXINT returns ecore::EInt:
	//	"0x" ("0".."9" | "A".."F" | "a".."f")+;
	public TerminalRule getHEXINTRule() {
		return (tHEXINT != null) ? tHEXINT : (tHEXINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXINT"));
	} 

	//LiteralParam:
	//	value=INT | value=HEXINT;
	public LiteralParamElements getLiteralParamAccess() {
		return (pLiteralParam != null) ? pLiteralParam : (pLiteralParam = new LiteralParamElements());
	}
	
	public ParserRule getLiteralParamRule() {
		return getLiteralParamAccess().getRule();
	}

	//RefParam:
	//	ref=QualifiedID;
	public RefParamElements getRefParamAccess() {
		return (pRefParam != null) ? pRefParam : (pRefParam = new RefParamElements());
	}
	
	public ParserRule getRefParamRule() {
		return getRefParamAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
