grammar hu.cubussapiens.modembed.modularasm.ModularASM with org.eclipse.xtext.common.Terminals

generate modularASM "http://www.cubussapiens.hu/modembed/modularasm/ModularASM"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Module hidden(WS, ML_COMMENT, SL_COMMENT):
	'module' name=ID 'target' target=QualifiedID '{'
	items+=ModuleItem*
	( '(' params+=ModuleParam* ')')?
	'}';
	
ModuleParam:
	type=QualifiedID name=ID;	
	
QualifiedID:
	segments+=ID ('.' segments+=ID)*;	
	
ModuleItem:
	(Variable | Instance | Function | Symbol | ConfigurationWord | Method) ';';
	
ConfigurationWord:
	'config' name=ID (default=LiteralParam)? '{' (fields+=ConfigurationFieldPlace ';')* '}';	

ConfigurationFieldPlace:
	bitNum=LiteralParam 'at' startBit=LiteralParam field=ConfigurationField;	
	
ConfigurationField:
	 EnumConfigurationField;
	
EnumConfigurationField:
	'enum' name=ID '{' (literals+=EnumConfigurationFieldLiteral ';')* '}' 
	;		
	
EnumConfigurationFieldLiteral:
	name=ID '=' value=LiteralParam
	;	
	
Symbol:
	'symbol' name=ID (value=INT | value=HEXINT)
	;	
	
Variable:
	'var' name=ID
	;

Instance:
	'instance' type=QualifiedID name=ID
	( '(' params+=QualifiedID* ')')?
	;
	
Function:
	'func' name=ID '{' (step+=Step ';')* '}'
	;
	
Method:
	'method' name=ID '(' (params+=MethodParam)* ')' '{' (step+=Step ';')* '}'
	;	
	
MethodParam:
	type=QualifiedID name=ID
	;	
	
Step:
	Instruction | Label | MethodCall;	

Label:
	'label' name=ID;
	
Instruction:
	ins=ID params+=InsParam*;
	
MethodCall:
	method=QualifiedID '(' (params+=MethodCallParam)* ')';

MethodCallParam:
	ref=QualifiedID;
	
InsParam:
	LiteralParam | RefParam;
	
terminal HEXINT returns ecore::EInt: '0x'('0'..'9'|'A'..'F'|'a'..'f')+;	
	
LiteralParam:
	value=INT | value=HEXINT;	
	
RefParam:
	ref=QualifiedID;	