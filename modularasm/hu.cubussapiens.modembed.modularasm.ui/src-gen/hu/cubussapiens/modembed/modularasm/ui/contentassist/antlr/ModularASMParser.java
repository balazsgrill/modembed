/*
* generated by Xtext
*/
package hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.cubussapiens.modembed.modularasm.services.ModularASMGrammarAccess;

public class ModularASMParser extends AbstractContentAssistParser {
	
	@Inject
	private ModularASMGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr.internal.InternalModularASMParser createParser() {
		hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr.internal.InternalModularASMParser result = new hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr.internal.InternalModularASMParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModuleItemAccess().getAlternatives_0(), "rule__ModuleItem__Alternatives_0");
					put(grammarAccess.getSymbolAccess().getAlternatives_2(), "rule__Symbol__Alternatives_2");
					put(grammarAccess.getStepAccess().getAlternatives(), "rule__Step__Alternatives");
					put(grammarAccess.getInsParamAccess().getAlternatives(), "rule__InsParam__Alternatives");
					put(grammarAccess.getLiteralParamAccess().getAlternatives(), "rule__LiteralParam__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getModuleAccess().getGroup_6(), "rule__Module__Group_6__0");
					put(grammarAccess.getModuleParamAccess().getGroup(), "rule__ModuleParam__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup(), "rule__QualifiedID__Group__0");
					put(grammarAccess.getQualifiedIDAccess().getGroup_1(), "rule__QualifiedID__Group_1__0");
					put(grammarAccess.getModuleItemAccess().getGroup(), "rule__ModuleItem__Group__0");
					put(grammarAccess.getConfigurationWordAccess().getGroup(), "rule__ConfigurationWord__Group__0");
					put(grammarAccess.getConfigurationWordAccess().getGroup_4(), "rule__ConfigurationWord__Group_4__0");
					put(grammarAccess.getConfigurationFieldPlaceAccess().getGroup(), "rule__ConfigurationFieldPlace__Group__0");
					put(grammarAccess.getEnumConfigurationFieldAccess().getGroup(), "rule__EnumConfigurationField__Group__0");
					put(grammarAccess.getEnumConfigurationFieldAccess().getGroup_3(), "rule__EnumConfigurationField__Group_3__0");
					put(grammarAccess.getEnumConfigurationFieldLiteralAccess().getGroup(), "rule__EnumConfigurationFieldLiteral__Group__0");
					put(grammarAccess.getSymbolAccess().getGroup(), "rule__Symbol__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup(), "rule__Instance__Group__0");
					put(grammarAccess.getInstanceAccess().getGroup_3(), "rule__Instance__Group_3__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_3(), "rule__Function__Group_3__0");
					put(grammarAccess.getMethodAccess().getGroup(), "rule__Method__Group__0");
					put(grammarAccess.getMethodAccess().getGroup_6(), "rule__Method__Group_6__0");
					put(grammarAccess.getMethodParamAccess().getGroup(), "rule__MethodParam__Group__0");
					put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
					put(grammarAccess.getInstructionAccess().getGroup(), "rule__Instruction__Group__0");
					put(grammarAccess.getMethodCallAccess().getGroup(), "rule__MethodCall__Group__0");
					put(grammarAccess.getModuleAccess().getNameAssignment_1(), "rule__Module__NameAssignment_1");
					put(grammarAccess.getModuleAccess().getTargetAssignment_3(), "rule__Module__TargetAssignment_3");
					put(grammarAccess.getModuleAccess().getItemsAssignment_5(), "rule__Module__ItemsAssignment_5");
					put(grammarAccess.getModuleAccess().getParamsAssignment_6_1(), "rule__Module__ParamsAssignment_6_1");
					put(grammarAccess.getModuleParamAccess().getTypeAssignment_0(), "rule__ModuleParam__TypeAssignment_0");
					put(grammarAccess.getModuleParamAccess().getNameAssignment_1(), "rule__ModuleParam__NameAssignment_1");
					put(grammarAccess.getQualifiedIDAccess().getSegmentsAssignment_0(), "rule__QualifiedID__SegmentsAssignment_0");
					put(grammarAccess.getQualifiedIDAccess().getSegmentsAssignment_1_1(), "rule__QualifiedID__SegmentsAssignment_1_1");
					put(grammarAccess.getConfigurationWordAccess().getNameAssignment_1(), "rule__ConfigurationWord__NameAssignment_1");
					put(grammarAccess.getConfigurationWordAccess().getDefaultAssignment_2(), "rule__ConfigurationWord__DefaultAssignment_2");
					put(grammarAccess.getConfigurationWordAccess().getFieldsAssignment_4_0(), "rule__ConfigurationWord__FieldsAssignment_4_0");
					put(grammarAccess.getConfigurationFieldPlaceAccess().getBitNumAssignment_0(), "rule__ConfigurationFieldPlace__BitNumAssignment_0");
					put(grammarAccess.getConfigurationFieldPlaceAccess().getStartBitAssignment_2(), "rule__ConfigurationFieldPlace__StartBitAssignment_2");
					put(grammarAccess.getConfigurationFieldPlaceAccess().getFieldAssignment_3(), "rule__ConfigurationFieldPlace__FieldAssignment_3");
					put(grammarAccess.getEnumConfigurationFieldAccess().getNameAssignment_1(), "rule__EnumConfigurationField__NameAssignment_1");
					put(grammarAccess.getEnumConfigurationFieldAccess().getLiteralsAssignment_3_0(), "rule__EnumConfigurationField__LiteralsAssignment_3_0");
					put(grammarAccess.getEnumConfigurationFieldLiteralAccess().getNameAssignment_0(), "rule__EnumConfigurationFieldLiteral__NameAssignment_0");
					put(grammarAccess.getEnumConfigurationFieldLiteralAccess().getValueAssignment_2(), "rule__EnumConfigurationFieldLiteral__ValueAssignment_2");
					put(grammarAccess.getSymbolAccess().getNameAssignment_1(), "rule__Symbol__NameAssignment_1");
					put(grammarAccess.getSymbolAccess().getValueAssignment_2_0(), "rule__Symbol__ValueAssignment_2_0");
					put(grammarAccess.getSymbolAccess().getValueAssignment_2_1(), "rule__Symbol__ValueAssignment_2_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getInstanceAccess().getTypeAssignment_1(), "rule__Instance__TypeAssignment_1");
					put(grammarAccess.getInstanceAccess().getNameAssignment_2(), "rule__Instance__NameAssignment_2");
					put(grammarAccess.getInstanceAccess().getParamsAssignment_3_1(), "rule__Instance__ParamsAssignment_3_1");
					put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
					put(grammarAccess.getFunctionAccess().getStepAssignment_3_0(), "rule__Function__StepAssignment_3_0");
					put(grammarAccess.getMethodAccess().getNameAssignment_1(), "rule__Method__NameAssignment_1");
					put(grammarAccess.getMethodAccess().getParamsAssignment_3(), "rule__Method__ParamsAssignment_3");
					put(grammarAccess.getMethodAccess().getStepAssignment_6_0(), "rule__Method__StepAssignment_6_0");
					put(grammarAccess.getMethodParamAccess().getTypeAssignment_0(), "rule__MethodParam__TypeAssignment_0");
					put(grammarAccess.getMethodParamAccess().getNameAssignment_1(), "rule__MethodParam__NameAssignment_1");
					put(grammarAccess.getLabelAccess().getNameAssignment_1(), "rule__Label__NameAssignment_1");
					put(grammarAccess.getInstructionAccess().getInsAssignment_0(), "rule__Instruction__InsAssignment_0");
					put(grammarAccess.getInstructionAccess().getParamsAssignment_1(), "rule__Instruction__ParamsAssignment_1");
					put(grammarAccess.getMethodCallAccess().getMethodAssignment_0(), "rule__MethodCall__MethodAssignment_0");
					put(grammarAccess.getMethodCallAccess().getParamsAssignment_2(), "rule__MethodCall__ParamsAssignment_2");
					put(grammarAccess.getMethodCallParamAccess().getRefAssignment(), "rule__MethodCallParam__RefAssignment");
					put(grammarAccess.getLiteralParamAccess().getValueAssignment_0(), "rule__LiteralParam__ValueAssignment_0");
					put(grammarAccess.getLiteralParamAccess().getValueAssignment_1(), "rule__LiteralParam__ValueAssignment_1");
					put(grammarAccess.getRefParamAccess().getRefAssignment(), "rule__RefParam__RefAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr.internal.InternalModularASMParser typedParser = (hu.cubussapiens.modembed.modularasm.ui.contentassist.antlr.internal.InternalModularASMParser) parser;
			typedParser.entryRuleModule();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ModularASMGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ModularASMGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
