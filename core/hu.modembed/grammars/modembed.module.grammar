grammar modembed.module <Start>;
import basics;
import modembed.type;
import modembed.expressions;

<Start> :- <Module>;
<Module> :- KW_MODULE {"http://modembed.hu/structured#StructuredModule" name=<QUALIFIEDID> OPERATOR_SEMICOLON <ModuleItem>* ;

<ModuleItem> :- variables=<VariableDeclaration> OPERATOR_SEMICOLON;
<ModuleItem> :- functions=<Function>;
<ModuleItem> :- <UsesDeclaration>;

<UsesDeclaration> :- KW_USE uses=<QUALIFIEDID> OPERATOR_SEMICOLON;
<VariableDeclaration> :- {"http://modembed.hu/structured#VariableDeclaration" 
						<VAR_MODIFIER_GLOBAL>? <VAR_MODIFIER_CONST>? type=<TypeDefinition> name=IDENTIFIER <VariableInitValue>? };
<VAR_MODIFIER_GLOBAL> :- KW_GLOBAL global="true";
<VAR_MODIFIER_CONST> :- KW_CONST const="true";
<VariableInitValue> :- OPERATOR_ASSIGN initValue=<Expression> ;

<Function> :- {"http://modembed.hu/structured#StructuredFunction" <VAR_MODIFIER_GLOBAL>? resultType=<TypeDefinition> name=IDENTIFIER 
	BRACKET_OPEN <FunctionParameters>? BRACKET_CLOSE <FunctionImplementation> };						
						
<FunctionParameters> :- <FunctionParameter>;
<FunctionParameters> :- <FunctionParameter> OP_COMMA <FunctionParameters>;
<FunctionParameter> :- parameters=<VariableDeclaration>;

<FunctionImplementation> :- implementation=<Operation>;
<FunctionImplementation> :- OPERATOR_SEMICOLON;

/*
 * OPERATIONS
 */
<Operation> :- KW_RETURN {"http://modembed.hu/structured#ReturnOperation" result=<Expression> } OPERATOR_SEMICOLON; 
<Operation> :- OP_OPEN {"http://modembed.hu/structured#OperationBlock" <OperationBlock_item>* } OP_CLOSE;
<OperationBlock_item> :- steps=<Operation> ;
<OperationBlock_item> :- KW_VAR variables=<VariableDeclaration> OPERATOR_SEMICOLON;
<Operation> :- KW_IF {"http://modembed.hu/structured#ConditionalOperation" condition=<Expression> trueBranch=<Operation> <ElseBranch>? };
<ElseBranch> :- KW_ELSE falseBranch=<Operation> ;

<Operation> :- KW_LOOP {"http://modembed.hu/structured#LoopOperation" <LoopEntry>? body=<Operation> <LoopExit>? };
<LoopEntry> :- KW_WHILE entryCondition=<Expression>;
<LoopExit> :- KW_UNTIL exitCondition=<Expression> OPERATOR_SEMICOLON ;

<Operation> :- {"http://modembed.hu/structured#ExpressionOperation" expression=<Expression> } OPERATOR_SEMICOLON;

/*
 * EXPRESSIONS
 */
<Expression0> :- <VariableReferenceExpression>;
<VariableReferenceExpression> :- {"http://modembed.hu/structured#VariableReferenceExpression" variable=IDENTIFIER };

<Expression0> :- <FunctionCallExpression>;
<FunctionCallExpression> :- {"http://modembed.hu/structured#FunctionCallExpression" function=IDENTIFIER 
					BRACKET_OPEN <FunctionCallExpression_arguments>? BRACKET_CLOSE };
<FunctionCallExpression_arguments> :- arguments=<Expression> ;
<FunctionCallExpression_arguments> :- arguments=<Expression> OP_COMMA <FunctionCallExpression_arguments>;