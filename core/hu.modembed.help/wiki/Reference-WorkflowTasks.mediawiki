= Workflow task reference =

== Generic compiler tasks ==

=== Link modules - modembed.link ===

IN PROGRESS

=== Map heap allocation - modembed.map ===

Maps every variable allocation in the given sequential behavior model to the device memory and generates a memory map model. Mapping is controlled by the given memory mapping rules model. 

Format:

 	<modembed.map 
 		input="${sequence.file}" 
 		rules="${rules.file}"
 		output="${map.file}" />

; Inputs : input = RootSequentialBehavior
: rules = SymbolMappingRules
; Outputs : output = SymbolMap

=== Produce instruction list - modembed.translate ===

Translates the given sequential behavior model to device-specific instruction lists.

Format:
	
 	<modembed.translate 
 		input="${sequence.file}"
 		map="${map.file}"
 		output="${asm.file}" />

; Inputs : input = RootSequentialBehavior
: map = SymbolMap?
; Output : output = AssemblerObject 
 
== HEX file manipulation tasks ==

=== Assemble HEX file - modembed.assemble ===

Convert a list of instruction calls into a HEX file

Format:
	
 	<modembed.assemble
 		input="${asm.file}"
 		output="${hex.file}" />

; Inputs : input = AssemblerObject
; Outputs : output = HexFile

=== Disassemble HEX file - modembed.disassemble ===

Parse a HEX file and produce a list of instruction calls

Format:

 	<modembed.disassemble 
 		input="${hex.file}"
 		instructionSet="${instructionSet.file}"
 		output="${asm.file}" />

; Inputs : input = HexFile
: instructionSet = InstructionSet
; Outputs : output = AssemblerObject

=== Merge HEX files - modembed.hex.merge ===

Merge contents of a list of HEX file to a single HEX file

Format:

 	<modembed.hex.merge output="${out.hex}">
 		<filelist dir="${basedir}">
 			<file name="${input1.hex}"/>
 			<file name="${input2.hex}"/>
 		</filelist>
 	</modembed.hex.merge>

; Inputs : fileset = HexFile*
; Outputs : output = HexFile

=== Extract part of a HEX file - modembed.hex.extract ===

Extracts entries from a HEX file which falls in the given interval

Format:

 	<modembed.hex.extract 
 		input="${input.hex}" output="${output.hex}"
 		start="${start.addr}" end="${end.addr}" />
 		
; Inputs : input = HexFile
: start : integer
: end : integer
; Outputs : output = HexFile