/**
 */
package hu.modembed.model.modembed.abstraction.types.provider;

import hu.modembed.model.modembed.abstraction.types.util.TypesAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TypesItemProviderAdapterFactory extends TypesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TypesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.UnsignedTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnsignedTypeDefinitionItemProvider unsignedTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.UnsignedTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnsignedTypeDefinitionAdapter() {
		if (unsignedTypeDefinitionItemProvider == null) {
			unsignedTypeDefinitionItemProvider = new UnsignedTypeDefinitionItemProvider(this);
		}

		return unsignedTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.ReferenceTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceTypeDefinitionItemProvider referenceTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.ReferenceTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceTypeDefinitionAdapter() {
		if (referenceTypeDefinitionItemProvider == null) {
			referenceTypeDefinitionItemProvider = new ReferenceTypeDefinitionItemProvider(this);
		}

		return referenceTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.ArrayTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayTypeDefinitionItemProvider arrayTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.ArrayTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayTypeDefinitionAdapter() {
		if (arrayTypeDefinitionItemProvider == null) {
			arrayTypeDefinitionItemProvider = new ArrayTypeDefinitionItemProvider(this);
		}

		return arrayTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.ArrayDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayDefinitionItemProvider arrayDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.ArrayDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayDefinitionAdapter() {
		if (arrayDefinitionItemProvider == null) {
			arrayDefinitionItemProvider = new ArrayDefinitionItemProvider(this);
		}

		return arrayDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.StructureTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureTypeDefinitionItemProvider structureTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.StructureTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureTypeDefinitionAdapter() {
		if (structureTypeDefinitionItemProvider == null) {
			structureTypeDefinitionItemProvider = new StructureTypeDefinitionItemProvider(this);
		}

		return structureTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.StructureTypeElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StructureTypeElementItemProvider structureTypeElementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.StructureTypeElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStructureTypeElementAdapter() {
		if (structureTypeElementItemProvider == null) {
			structureTypeElementItemProvider = new StructureTypeElementItemProvider(this);
		}

		return structureTypeElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.CodeLabelTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CodeLabelTypeDefinitionItemProvider codeLabelTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.CodeLabelTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCodeLabelTypeDefinitionAdapter() {
		if (codeLabelTypeDefinitionItemProvider == null) {
			codeLabelTypeDefinitionItemProvider = new CodeLabelTypeDefinitionItemProvider(this);
		}

		return codeLabelTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.PointerTypeDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PointerTypeDefinitionItemProvider pointerTypeDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.PointerTypeDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPointerTypeDefinitionAdapter() {
		if (pointerTypeDefinitionItemProvider == null) {
			pointerTypeDefinitionItemProvider = new PointerTypeDefinitionItemProvider(this);
		}

		return pointerTypeDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.types.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.types.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if (typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (unsignedTypeDefinitionItemProvider != null) unsignedTypeDefinitionItemProvider.dispose();
		if (referenceTypeDefinitionItemProvider != null) referenceTypeDefinitionItemProvider.dispose();
		if (arrayTypeDefinitionItemProvider != null) arrayTypeDefinitionItemProvider.dispose();
		if (arrayDefinitionItemProvider != null) arrayDefinitionItemProvider.dispose();
		if (structureTypeDefinitionItemProvider != null) structureTypeDefinitionItemProvider.dispose();
		if (structureTypeElementItemProvider != null) structureTypeElementItemProvider.dispose();
		if (codeLabelTypeDefinitionItemProvider != null) codeLabelTypeDefinitionItemProvider.dispose();
		if (pointerTypeDefinitionItemProvider != null) pointerTypeDefinitionItemProvider.dispose();
		if (typeItemProvider != null) typeItemProvider.dispose();
	}

}
