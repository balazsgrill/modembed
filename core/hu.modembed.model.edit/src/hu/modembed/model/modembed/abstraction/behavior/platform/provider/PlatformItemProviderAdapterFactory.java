/**
 */
package hu.modembed.model.modembed.abstraction.behavior.platform.provider;

import hu.modembed.model.modembed.abstraction.behavior.platform.util.PlatformAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PlatformItemProviderAdapterFactory extends PlatformAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PlatformItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationDefinitionItemProvider operationDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationDefinitionAdapter() {
		if (operationDefinitionItemProvider == null) {
			operationDefinitionItemProvider = new OperationDefinitionItemProvider(this);
		}

		return operationDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationArgument} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationArgumentItemProvider operationArgumentItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationArgument}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationArgumentAdapter() {
		if (operationArgumentItemProvider == null) {
			operationArgumentItemProvider = new OperationArgumentItemProvider(this);
		}

		return operationArgumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.InstructionCallOperationStep} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionCallOperationStepItemProvider instructionCallOperationStepItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.InstructionCallOperationStep}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionCallOperationStepAdapter() {
		if (instructionCallOperationStepItemProvider == null) {
			instructionCallOperationStepItemProvider = new InstructionCallOperationStepItemProvider(this);
		}

		return instructionCallOperationStepItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationLocalLabel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationLocalLabelItemProvider operationLocalLabelItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.OperationLocalLabel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationLocalLabelAdapter() {
		if (operationLocalLabelItemProvider == null) {
			operationLocalLabelItemProvider = new OperationLocalLabelItemProvider(this);
		}

		return operationLocalLabelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.ConditionalOperation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalOperationItemProvider conditionalOperationItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.ConditionalOperation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalOperationAdapter() {
		if (conditionalOperationItemProvider == null) {
			conditionalOperationItemProvider = new ConditionalOperationItemProvider(this);
		}

		return conditionalOperationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.LabelParameterValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelParameterValueItemProvider labelParameterValueItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.LabelParameterValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelParameterValueAdapter() {
		if (labelParameterValueItemProvider == null) {
			labelParameterValueItemProvider = new LabelParameterValueItemProvider(this);
		}

		return labelParameterValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.modembed.model.modembed.abstraction.behavior.platform.InstructionParameterMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionParameterMappingItemProvider instructionParameterMappingItemProvider;

	/**
	 * This creates an adapter for a {@link hu.modembed.model.modembed.abstraction.behavior.platform.InstructionParameterMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionParameterMappingAdapter() {
		if (instructionParameterMappingItemProvider == null) {
			instructionParameterMappingItemProvider = new InstructionParameterMappingItemProvider(this);
		}

		return instructionParameterMappingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (operationDefinitionItemProvider != null) operationDefinitionItemProvider.dispose();
		if (operationArgumentItemProvider != null) operationArgumentItemProvider.dispose();
		if (instructionCallOperationStepItemProvider != null) instructionCallOperationStepItemProvider.dispose();
		if (operationLocalLabelItemProvider != null) operationLocalLabelItemProvider.dispose();
		if (conditionalOperationItemProvider != null) conditionalOperationItemProvider.dispose();
		if (labelParameterValueItemProvider != null) labelParameterValueItemProvider.dispose();
		if (instructionParameterMappingItemProvider != null) instructionParameterMappingItemProvider.dispose();
	}

}
