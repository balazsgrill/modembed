import "binary.utils.eol";

rule assemble 
	transform assem : asm!AssemblerObject
	to hexfile : hex!HexFile {

	var math = new Native("org.eclipse.epsilon.eol.tools.MathTool");

	hexfile.addressType = hex!AddressType#ExtendedLinear;
	
	var data = new Sequence(Integer);
	
	for (call in assem.instructions) { 
		
		var paramvalues = new Map;//(asm!InstructionParameter, Integer);
		var i = call.instruction;
			
		//The following line fails:
		var i_parameters = i.parameters; 
		//var i_parameters = i.eGet(i.eClass.eStructuralFeatures[0]); 
			
		/* Set default values */		
		for (ip in i_parameters){
			//var ip_defaultValue = ip.eGet(ip.eClass.eStructuralFeatures[1]);
			paramvalues.put(ip, ip.defaultValue);
		}
		for(icp in call.parameters){
			paramvalues.put(icp.definition, icp.value);
		}
		
		var i_words = i.eGet(i.eClass.eStructuralFeatures[1]);
		for(w in i_words){
		
			var wordvalue = 0;
			var length = 0;
			var sections = w.sections;
			var k = sections.size();
			while(k>0){
				k = k-1;
				var s = sections[k];
				var svalue = 0;
				if (s.isTypeOf(asm!ConstantSection)){
					svalue = s.value;
					//svalue = s.eGet(s.eClass.eStructuralFeatures[0]);
				}
				if (s.isTypeOf(asm!ParameterSection)){
					var iparameter = s.parameter;
					//var iparameter = s.eGet(s.eClass.eStructuralFeatures[0]);
					if (paramvalues.containsKey(iparameter)){
						//TODO error
					}else{
						svalue = paramvalues.get(iparameter);
					}
				}
				svalue = svalue.shift(length);
				var sshift = s.shift;
				//var sshift = s.eGet(s.eClass.eSuperTypes[0].eStructuralFeatures[2]);
				svalue = svalue.shift(-sshift);
				var ssize = s.size;
				//var ssize = s.eGet(s.eClass.eSuperTypes[0].eStructuralFeatures[1]);
				var mask = mask(ssize, length);
				length = length + ssize;
				wordvalue = math.bitwiseOr(wordvalue, math.bitwiseAnd(svalue,mask));
			}
				
			var bytenum = ((length-1)/8)+1;
			var j = 0;
			while(j<bytenum){
				data.add(math.bitwiseAnd(wordvalue, 255));
				wordvalue = wordvalue.shift(-8);
				j = j + 1;
			}
			
		}
	}
	
	var entry = new hex!Entry;
	hexfile.entries.add(entry);
	var mtool = new Native("hu.modembed.utils.MODembedTool");
	entry.address = 0;
	var bytedata = mtool.numberListToByteArray(data); 
	entry.data = bytedata;
}