<%@ jet package="hu.modembed.pic.tools.generator.template" imports="org.w3c.dom.* hu.e.compiler.*"
class="PICLibraryTemplate" %>
<% org.w3c.dom.Element pic = (org.w3c.dom.Element)argument; %>
<% String arch = pic.getAttribute("edc:arch");%>
/*
 * Library for <%=pic.getAttribute("edc:name")%>
 * <%=pic.getAttribute("edc:desc")%>
 * Architecture: <%=arch%>
 */
library microchip.<%=pic.getAttribute("edc:name")%>{

	use e.platform;
<%	if(arch.startsWith("16E")){ %>
	use microchip.pic16.enchanced;
<% 	}else%>
<%	if(arch.startsWith("16")){ %>
	use microchip.pic16;
<% 	}else{}%>

/*************************
 * Configuration
 ************************/
 
<% 
	Element program = (Element)pic.getElementsByTagName("edc:ProgramSpace").item(0);
	Element config  = (Element)pic.getElementsByTagName("edc:ConfigFuseSector").item(0);
%>

	const codeaddr configStartAddress = <%=config.getAttribute("edc:beginaddr")%>
<%
	NodeList DCRDefs = config.getElementsByTagName("edc:DCRDef");
	for(int i=0;i<DCRDefs.getLength();i++){
		Element DCRDef = (Element)DCRDefs.item(i);
		String cname = DCRDef.getAttribute("edc:cname");
		int csize = ECompiler.convertLiteral(DCRDef.getAttribute("edc:nzwidth"));
		csize = csize/8;
		String ctype = (csize == 2) ? "uint16" : "uint8";
		NodeList DCRModes = ((Element)DCRDef.getElementsByTagName("edc:DCRModeList").item(0)).getElementsByTagName("edc:DCRMode");
		for(int j=0;j<DCRModes.getLength();j++){
			Element DCRMode = (Element)DCRModes.item(j);
			NodeList DCRFieldDefs = DCRMode.getElementsByTagName("edc:DCRFieldDef");
			int field_offset = 0;
			for(int l=0;l<DCRFieldDefs.getLength();l++){
				Element DCRFieldDef = (Element)DCRFieldDefs.item(l);
				String fieldname = DCRFieldDef.getAttribute("edc:cname");
				String widthText = DCRFieldDef.getAttribute("edc:nzwidth");
				int width = 0;
				if (widthText.startsWith("0x")){
					width = Integer.parseInt(widthText.substring(2).trim(),16);
				}else{
					width = Integer.parseInt(widthText.trim());
				}
%>
	/*
	 * Field: <%=fieldname%>
	 * <%=DCRFieldDef.getAttribute("edc:desc")%>
	 */
<%
				NodeList DCRFieldSemantics = DCRFieldDef.getElementsByTagName("edc:DCRFieldSemantic");
				for(int k=0;k<DCRFieldSemantics.getLength();k++){
					Element DCRFieldSemantic = (Element)DCRFieldSemantics.item(k);
					String value = DCRFieldSemantic.getAttribute("edc:when");
					if (value.contains("== ")){
						int q = value.lastIndexOf(' ');
						value = value.substring(q+1);
					}
					value = value + "*"+(1<<field_offset);
%>
		/* <%=DCRFieldSemantic.getAttribute("edc:desc")%> */
		const <%=ctype%> <%=cname%>_<%=fieldname%>_<%=DCRFieldSemantic.getAttribute("edc:cname")%> = <%=value%>;
<%
				}
				field_offset += width;
			}
		}
	}
%>

/********************
 * Special function registers
 ********************/

<%
	Element dataspace = (Element)pic.getElementsByTagName("edc:DataSpace").item(0);
	Element regardlessOfMode = (Element)dataspace.getElementsByTagName("edc:RegardlessOfMode").item(0);
	
	NodeList SFRDataSectors = regardlessOfMode.getElementsByTagName("edc:SFRDataSector");
	for(int i=0;i<SFRDataSectors.getLength();i++){
		Element SFRDataSector = (Element)SFRDataSectors.item(i);
		String beginAddrText = SFRDataSector.getAttribute("edc:beginaddr");
		int beginAddr = ECompiler.convertLiteral(beginAddrText);
		NodeList elements = SFRDataSector.getChildNodes();
		for (int j=0;j<elements.getLength();j++) if (elements.item(j) instanceof Element){
			Element item = (Element)elements.item(j);
			String name = item.getNodeName();
			if ("edc:SFRDef".equals(name) || "edc:JoinedSFRDef".equals(name)){
				int size = ECompiler.convertLiteral(item.getAttribute("edc:nzwidth"));
				size = size/8;
				String type = (size==2) ? "uint16" :"uint8";
%>

/*
 * <%=item.getAttribute("edc:name")%>
 * <%=item.getAttribute("edc:desc")%>
 */
reg <%=type%> <%=item.getAttribute("edc:cname")%> : 0x<%=Integer.toHexString(beginAddr)%>; 
<%
				beginAddr += size;
			}
			if ("edc:AdjustPoint".equals(name)){
				int size = ECompiler.convertLiteral(item.getAttribute("edc:offset"));
				beginAddr += size;
			}
			if ("edc:Mirror".equals(name)){
				int size = ECompiler.convertLiteral(item.getAttribute("edc:nzsize"));
				beginAddr += size;
			}
		}
	}
%>
}
