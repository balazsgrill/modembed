grammar modembed.instructionSet <Start>;
import basics;

terminal KW_INSTRUCTIONSET:IDENTIFIER "instructionset" 10;
terminal KW_EXTENDS "extends" 10;

terminal BRACKET_OPEN "\(" 10;
terminal BRACKET_CLOSE "\)" 10;
terminal OP_COLON "\:" 10;

terminal OP_CMP_GT ">" 10;
terminal OP_CMP_LT "<" 10;

terminal OPERATOR_ASSIGN "=" 10;

<Start> :- KW_INSTRUCTIONSET {"http://modembed.hu/assembler/instructionset#InstructionSet" name=<QUALIFIEDID> <InstructionSet_Extends>? OPERATOR_SEMICOLON <InstructionSet_Instruction>*; 

<InstructionSet_Extends> :- KW_EXTENDS extends=<QUALIFIEDID>;

<InstructionSet_Instruction> :- instructions={"http://modembed.hu/assembler/instructionset#Instruction" name=IDENTIFIER BRACKET_OPEN <InstructionSet_InstructionParameter>* BRACKET_CLOSE <InstructionSet_Word>* } OPERATOR_SEMICOLON;

<InstructionSet_InstructionParameter> :- parameters={"http://modembed.hu/assembler/instructionset#InstructionParameter" name=IDENTIFIER <InstructionSet_defaultValue>? };

<InstructionSet_defaultValue> :- OPERATOR_ASSIGN defaultValue=DECIMAL_NUMBER ;

<InstructionSet_sectionOptions> :- OP_COLON size=DECIMAL_NUMBER <InstructionSet_sectionShift>?;

<InstructionSet_sectionShift> :- OP_COLON shift=DECIMAL_NUMBER ;
 
<InstructionSet_Word> :- OP_CMP_LT words={"http://modembed.hu/assembler/instructionset#InstructionWord" <InstructionSet_Section>* } OP_CMP_GT ;

<InstructionSet_Section> :- sections={"http://modembed.hu/assembler/instructionset#ConstantSection" value=BINARY_NUMBER <InstructionSet_sectionOptions> } ;

<InstructionSet_Section> :- sections={"http://modembed.hu/assembler/instructionset#ParameterSection" parameter=IDENTIFIER <InstructionSet_sectionOptions> } ;
