/*
* generated by Xtext
*/
grammar InternalESyntax;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.e.parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.e.parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.e.parser.services.ESyntaxGrammarAccess;

}

@parser::members {

 	private ESyntaxGrammarAccess grammarAccess;
 	
    public InternalESyntaxParser(TokenStream input, ESyntaxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";	
   	}
   	
   	@Override
   	protected ESyntaxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getModuleParserRuleCall_0()); 
    }
    this_Module_0=ruleModule
    { 
        $current = $this_Module_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getLibraryParserRuleCall_1()); 
    }
    this_Library_1=ruleLibrary
    { 
        $current = $this_Library_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getLinkedBinaryParserRuleCall_2()); 
    }
    this_LinkedBinary_2=ruleLinkedBinary
    { 
        $current = $this_LinkedBinary_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleReferenceID
entryRuleReferenceID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceIDRule()); } 
	 iv_ruleReferenceID=ruleReferenceID 
	 { $current=$iv_ruleReferenceID.current.getText(); }  
	 EOF 
;

// Rule ReferenceID
ruleReferenceID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getReferenceIDAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getReferenceIDAccess().getFullStopKeyword_0_1()); 
    }
)?    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getReferenceIDAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleLITERAL
entryRuleLITERAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLITERALRule()); } 
	 iv_ruleLITERAL=ruleLITERAL 
	 { $current=$iv_ruleLITERAL.current.getText(); }  
	 EOF 
;

// Rule LITERAL
ruleLITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLITERALAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_HEXINT_1=RULE_HEXINT    {
		$current.merge(this_HEXINT_1);
    }

    { 
    newLeafNode(this_HEXINT_1, grammarAccess.getLITERALAccess().getHEXINTTerminalRuleCall_1()); 
    }

    |    this_BINARY_2=RULE_BINARY    {
		$current.merge(this_BINARY_2);
    }

    { 
    newLeafNode(this_BINARY_2, grammarAccess.getLITERALAccess().getBINARYTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleAnnotationDefinition
entryRuleAnnotationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationDefinitionRule()); }
	 iv_ruleAnnotationDefinition=ruleAnnotationDefinition 
	 { $current=$iv_ruleAnnotationDefinition.current; } 
	 EOF 
;

// Rule AnnotationDefinition
ruleAnnotationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='annotation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationDefinitionAccess().getAnnotationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getNumberSignKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getDefinitionAnnotationDefinitionCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleModule
entryRuleModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleRule()); }
	 iv_ruleModule=ruleModule 
	 { $current=$iv_ruleModule.current; } 
	 EOF 
;

// Rule Module
ruleModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModuleAccess().getModuleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModuleAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getExtendsModuleCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getModuleAccess().getCommaKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getExtendsModuleCrossReference_2_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getModuleAccess().getSemicolonKeyword_3());
    }
(	otherlv_7='use' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModuleAccess().getUseKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getModuleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getUseLibraryCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getModuleAccess().getSemicolonKeyword_4_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getModuleAccess().getItemsModuleItemParserRuleCall_5_0()); 
	    }
		lv_items_10_0=ruleModuleItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModuleRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_10_0, 
        		"ModuleItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleModuleItem
entryRuleModuleItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModuleItemRule()); }
	 iv_ruleModuleItem=ruleModuleItem 
	 { $current=$iv_ruleModuleItem.current; } 
	 EOF 
;

// Rule ModuleItem
ruleModuleItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getModuleItemAccess().getVariableParserRuleCall_0_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getModuleItemAccess().getSemicolonKeyword_0_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getModuleItemAccess().getConfigVariableParserRuleCall_1_0()); 
    }
    this_ConfigVariable_2=ruleConfigVariable
    { 
        $current = $this_ConfigVariable_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getModuleItemAccess().getSemicolonKeyword_1_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getModuleItemAccess().getConstantVariableParserRuleCall_2_0()); 
    }
    this_ConstantVariable_4=ruleConstantVariable
    { 
        $current = $this_ConstantVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getModuleItemAccess().getSemicolonKeyword_2_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getModuleItemAccess().getInstanceReferenceParserRuleCall_3_0()); 
    }
    this_InstanceReference_6=ruleInstanceReference
    { 
        $current = $this_InstanceReference_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getModuleItemAccess().getSemicolonKeyword_3_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getModuleItemAccess().getOperationParserRuleCall_4()); 
    }
    this_Operation_8=ruleOperation
    { 
        $current = $this_Operation_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleInstanceReference
entryRuleInstanceReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceReferenceRule()); }
	 iv_ruleInstanceReference=ruleInstanceReference 
	 { $current=$iv_ruleInstanceReference.current; } 
	 EOF 
;

// Rule InstanceReference
ruleInstanceReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ref' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstanceReferenceAccess().getRefKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getInstanceReferenceAccess().getTypeModuleCrossReference_1_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getInstanceReferenceAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceReferenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConfigVariable
entryRuleConfigVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConfigVariableRule()); }
	 iv_ruleConfigVariable=ruleConfigVariable 
	 { $current=$iv_ruleConfigVariable.current; } 
	 EOF 
;

// Rule ConfigVariable
ruleConfigVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConfigVariableAccess().getConfigVariableAction_0(),
            $current);
    }
)	otherlv_1='config' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConfigVariableAccess().getConfigKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConfigVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConfigVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getConfigVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConfigVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	 iv_ruleLibrary=ruleLibrary 
	 { $current=$iv_ruleLibrary.current; } 
	 EOF 
;

// Rule Library
ruleLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='library' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='overrides' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getOverridesKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLibraryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getOverridesLibraryCrossReference_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLibraryAccess().getCommaKeyword_2_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLibraryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getOverridesLibraryCrossReference_2_2_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLibraryAccess().getSemicolonKeyword_3());
    }
(	otherlv_7='use' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLibraryAccess().getUseKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLibraryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getUseLibraryCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLibraryAccess().getSemicolonKeyword_4_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getItemsLibraryItemParserRuleCall_5_0()); 
	    }
		lv_items_10_0=ruleLibraryItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_10_0, 
        		"LibraryItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLibraryItem
entryRuleLibraryItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryItemRule()); }
	 iv_ruleLibraryItem=ruleLibraryItem 
	 { $current=$iv_ruleLibraryItem.current; } 
	 EOF 
;

// Rule LibraryItem
ruleLibraryItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getOperationParserRuleCall_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getVariableParserRuleCall_2_0()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_2_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getConstantVariableParserRuleCall_3_0()); 
    }
    this_ConstantVariable_4=ruleConstantVariable
    { 
        $current = $this_ConstantVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_3_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getRegisterVariableParserRuleCall_4_0()); 
    }
    this_RegisterVariable_6=ruleRegisterVariable
    { 
        $current = $this_RegisterVariable_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_4_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getOperatorDefinitionParserRuleCall_5()); 
    }
    this_OperatorDefinition_8=ruleOperatorDefinition
    { 
        $current = $this_OperatorDefinition_8.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getAnnotationDefinitionParserRuleCall_6_0()); 
    }
    this_AnnotationDefinition_9=ruleAnnotationDefinition
    { 
        $current = $this_AnnotationDefinition_9.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_6_1());
    }
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getDefTypeDefParserRuleCall_3_0()); 
	    }
		lv_def_3_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_3_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getDataTypeDefParserRuleCall_0()); 
    }
    this_DataTypeDef_0=ruleDataTypeDef
    { 
        $current = $this_DataTypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getStructTypeDefParserRuleCall_1()); 
    }
    this_StructTypeDef_1=ruleStructTypeDef
    { 
        $current = $this_StructTypeDef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getPointerTypeDefParserRuleCall_2()); 
    }
    this_PointerTypeDef_2=rulePointerTypeDef
    { 
        $current = $this_PointerTypeDef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getArrayTypeDefParserRuleCall_3()); 
    }
    this_ArrayTypeDef_3=ruleArrayTypeDef
    { 
        $current = $this_ArrayTypeDef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getRefTypeDefParserRuleCall_4()); 
    }
    this_RefTypeDef_4=ruleRefTypeDef
    { 
        $current = $this_RefTypeDef_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePointerTypeDef
entryRulePointerTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointerTypeDefRule()); }
	 iv_rulePointerTypeDef=rulePointerTypeDef 
	 { $current=$iv_rulePointerTypeDef.current; } 
	 EOF 
;

// Rule PointerTypeDef
rulePointerTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pointer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPointerTypeDefAccess().getPointerKeyword_0());
    }
	otherlv_1='of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointerTypeDefAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointerTypeDefAccess().getDefTypeDefParserRuleCall_2_0()); 
	    }
		lv_def_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointerTypeDefRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleArrayTypeDef
entryRuleArrayTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeDefRule()); }
	 iv_ruleArrayTypeDef=ruleArrayTypeDef 
	 { $current=$iv_ruleArrayTypeDef.current; } 
	 EOF 
;

// Rule ArrayTypeDef
ruleArrayTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayTypeDefAccess().getArrayKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayTypeDefAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefAccess().getSizeXExpressionParserRuleCall_2_0()); 
	    }
		lv_size_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayTypeDefAccess().getRightSquareBracketKeyword_3());
    }
	otherlv_4='of' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayTypeDefAccess().getOfKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefAccess().getDefTypeDefParserRuleCall_5_0()); 
	    }
		lv_def_5_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_5_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRefTypeDef
entryRuleRefTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefTypeDefRule()); }
	 iv_ruleRefTypeDef=ruleRefTypeDef 
	 { $current=$iv_ruleRefTypeDef.current; } 
	 EOF 
;

// Rule RefTypeDef
ruleRefTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRefTypeDefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRefTypeDefAccess().getTypeTypeCrossReference_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDataTypeDef
entryRuleDataTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeDefRule()); }
	 iv_ruleDataTypeDef=ruleDataTypeDef 
	 { $current=$iv_ruleDataTypeDef.current; } 
	 EOF 
;

// Rule DataTypeDef
ruleDataTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataTypeDefAccess().getKindPrimitiveKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=rulePrimitiveKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataTypeDefRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"PrimitiveKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_bits_1_0=RULE_INT
		{
			newLeafNode(lv_bits_1_0, grammarAccess.getDataTypeDefAccess().getBitsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bits",
        		lv_bits_1_0, 
        		"INT");
	    }

)
)	otherlv_2='bits' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataTypeDefAccess().getBitsKeyword_2());
    }
)
;





// Entry rule entryRuleStructTypeDef
entryRuleStructTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeDefRule()); }
	 iv_ruleStructTypeDef=ruleStructTypeDef 
	 { $current=$iv_ruleStructTypeDef.current; } 
	 EOF 
;

// Rule StructTypeDef
ruleStructTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructTypeDefAccess().getStructTypeDefAction_0(),
            $current);
    }
)	otherlv_1='struct' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructTypeDefAccess().getStructKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructTypeDefAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefAccess().getMembersStructTypeDefMemberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=ruleStructTypeDefMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"StructTypeDefMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructTypeDefAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefAccess().getMembersStructTypeDefMemberParserRuleCall_4_1_0()); 
	    }
		lv_members_5_0=ruleStructTypeDefMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_0, 
        		"StructTypeDefMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStructTypeDefAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStructTypeDefMember
entryRuleStructTypeDefMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeDefMemberRule()); }
	 iv_ruleStructTypeDefMember=ruleStructTypeDefMember 
	 { $current=$iv_ruleStructTypeDefMember.current; } 
	 EOF 
;

// Rule StructTypeDefMember
ruleStructTypeDefMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructTypeDefMemberAccess().getStructTypeDefMemberAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefMemberAccess().getTypeTypeDefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStructTypeDefMemberAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructTypeDefMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConstantVariable
entryRuleConstantVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantVariableRule()); }
	 iv_ruleConstantVariable=ruleConstantVariable 
	 { $current=$iv_ruleConstantVariable.current; } 
	 EOF 
;

// Rule ConstantVariable
ruleConstantVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantVariableAccess().getConstantVariableAction_0(),
            $current);
    }
)	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantVariableAccess().getConstKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getConstantVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantVariableAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantVariableAccess().getValueXExpressionParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRegisterVariable
entryRuleRegisterVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegisterVariableRule()); }
	 iv_ruleRegisterVariable=ruleRegisterVariable 
	 { $current=$iv_ruleRegisterVariable.current; } 
	 EOF 
;

// Rule RegisterVariable
ruleRegisterVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegisterVariableAccess().getRegisterVariableAction_0(),
            $current);
    }
)	otherlv_1='reg' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRegisterVariableAccess().getRegKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getRegisterVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisterVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRegisterVariableAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterVariableAccess().getAddrXExpressionParserRuleCall_5_0()); 
	    }
		lv_addr_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterVariableRule());
	        }
       		set(
       			$current, 
       			"addr",
        		lv_addr_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperationStep
entryRuleOperationStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationStepRule()); }
	 iv_ruleOperationStep=ruleOperationStep 
	 { $current=$iv_ruleOperationStep.current; } 
	 EOF 
;

// Rule OperationStep
ruleOperationStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getInstructionWordParserRuleCall_0()); 
    }
    this_InstructionWord_0=ruleInstructionWord
    { 
        $current = $this_InstructionWord_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getLabelParserRuleCall_1()); 
    }
    this_Label_1=ruleLabel
    { 
        $current = $this_Label_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getVariableParserRuleCall_2_0()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationStepAccess().getSemicolonKeyword_2_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getXTopLevelExpressionParserRuleCall_3()); 
    }
    this_XTopLevelExpression_4=ruleXTopLevelExpression
    { 
        $current = $this_XTopLevelExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabel
entryRuleLabel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelRule()); }
	 iv_ruleLabel=ruleLabel 
	 { $current=$iv_ruleLabel.current; } 
	 EOF 
;

// Rule Label
ruleLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLabelAccess().getLabelAction_0(),
            $current);
    }
)	otherlv_1='label' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelAccess().getLabelKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getLabelAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLabelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLabelAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInstructionWord
entryRuleInstructionWord returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionWordRule()); }
	 iv_ruleInstructionWord=ruleInstructionWord 
	 { $current=$iv_ruleInstructionWord.current; } 
	 EOF 
;

// Rule InstructionWord
ruleInstructionWord returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstructionWordAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionWordAccess().getSectionsWordSectionParserRuleCall_1_0()); 
	    }
		lv_sections_1_0=ruleWordSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionWordRule());
	        }
       		add(
       			$current, 
       			"sections",
        		lv_sections_1_0, 
        		"WordSection");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstructionWordAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleWordSection
entryRuleWordSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWordSectionRule()); }
	 iv_ruleWordSection=ruleWordSection 
	 { $current=$iv_ruleWordSection.current; } 
	 EOF 
;

// Rule WordSection
ruleWordSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getWordSectionAccess().getLiteralValueParserRuleCall_0_0()); 
    }
    this_LiteralValue_0=ruleLiteralValue
    { 
        $current = $this_LiteralValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getWordSectionAccess().getVariableReferenceParserRuleCall_0_1()); 
    }
    this_VariableReference_1=ruleVariableReference
    { 
        $current = $this_VariableReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWordSectionAccess().getColonKeyword_1());
    }
(
(
		lv_size_3_0=RULE_INT
		{
			newLeafNode(lv_size_3_0, grammarAccess.getWordSectionAccess().getSizeINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordSectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"size",
        		lv_size_3_0, 
        		"INT");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWordSectionAccess().getColonKeyword_3_0());
    }
(
(
		lv_shift_5_0=RULE_INT
		{
			newLeafNode(lv_shift_5_0, grammarAccess.getWordSectionAccess().getShiftINTTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWordSectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"shift",
        		lv_shift_5_0, 
        		"INT");
	    }

)
))?)
;





// Entry rule entryRuleLiteralValue
entryRuleLiteralValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralValueRule()); }
	 iv_ruleLiteralValue=ruleLiteralValue 
	 { $current=$iv_ruleLiteralValue.current; } 
	 EOF 
;

// Rule LiteralValue
ruleLiteralValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralValueAccess().getValueLITERALParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeDefParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceAccess().getVarVariableCrossReference_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getOperationOperationCrossReference_0_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsOperationCallParameterParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleOperationCallParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"OperationCallParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsOperationCallParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleOperationCallParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"OperationCallParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOperationCallParameter
entryRuleOperationCallParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallParameterRule()); }
	 iv_ruleOperationCallParameter=ruleOperationCallParameter 
	 { $current=$iv_ruleOperationCallParameter.current; } 
	 EOF 
;

// Rule OperationCallParameter
ruleOperationCallParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOperationCallParameterAccess().getXExpressionParserRuleCall()); 
    }
    this_XExpression_0=ruleXExpression
    { 
        $current = $this_XExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationAccess().getOperationAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParamsParameterVariableParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleParameterVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"ParameterVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getParamsParameterVariableParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleParameterVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"ParameterVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getRightParenthesisKeyword_4());
    }
	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getBlockOperationBlockParserRuleCall_6_0()); 
	    }
		lv_block_8_0=ruleOperationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"block",
        		lv_block_8_0, 
        		"OperationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOperationAccess().getRightCurlyBracketKeyword_7());
    }
(	otherlv_10='returns' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOperationAccess().getReturnsKeyword_8_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getReturnXExpressionParserRuleCall_8_1_0_0()); 
	    }
		lv_return_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"return",
        		lv_return_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getReturnvarVariableParserRuleCall_8_1_1_0()); 
	    }
		lv_returnvar_12_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"returnvar",
        		lv_returnvar_12_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getOperationAccess().getSemicolonKeyword_8_2());
    }
)?)
;





// Entry rule entryRuleOperationBlock
entryRuleOperationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationBlockRule()); }
	 iv_ruleOperationBlock=ruleOperationBlock 
	 { $current=$iv_ruleOperationBlock.current; } 
	 EOF 
;

// Rule OperationBlock
ruleOperationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOperationBlockAccess().getOperationBlockAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationBlockAccess().getStepsOperationStepParserRuleCall_1_0()); 
	    }
		lv_steps_1_0=ruleOperationStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationBlockRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_1_0, 
        		"OperationStep");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleParameterVariable
entryRuleParameterVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterVariableRule()); }
	 iv_ruleParameterVariable=ruleParameterVariable 
	 { $current=$iv_ruleParameterVariable.current; } 
	 EOF 
;

// Rule ParameterVariable
ruleParameterVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterVariableAccess().getParameterVariableAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getKindParameterKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleParameterKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"ParameterKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getParameterVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterVariableAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getDefaultLITERALParserRuleCall_4_1_0()); 
	    }
		lv_default_5_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_5_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleOperatorDefinition
entryRuleOperatorDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorDefinitionRule()); }
	 iv_ruleOperatorDefinition=ruleOperatorDefinition 
	 { $current=$iv_ruleOperatorDefinition.current; } 
	 EOF 
;

// Rule OperatorDefinition
ruleOperatorDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='operator' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperatorDefinitionAccess().getOperatorKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperatorDefinitionAccess().getRoleOperationRoleEnumRuleCall_1_0()); 
	    }
		lv_role_1_0=ruleOperationRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperatorDefinitionRule());
	        }
       		set(
       			$current, 
       			"role",
        		lv_role_1_0, 
        		"OperationRole");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOperatorDefinitionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOperatorDefinitionAccess().getCandidateOperationCrossReference_3_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getOperatorDefinitionAccess().getCommaKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorDefinitionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOperatorDefinitionAccess().getCandidateOperationCrossReference_4_1_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOperatorDefinitionAccess().getCommaKeyword_5());
    }
)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOperatorDefinitionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleLinkedBinary
entryRuleLinkedBinary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkedBinaryRule()); }
	 iv_ruleLinkedBinary=ruleLinkedBinary 
	 { $current=$iv_ruleLinkedBinary.current; } 
	 EOF 
;

// Rule LinkedBinary
ruleLinkedBinary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='binary' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinkedBinaryAccess().getBinaryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedBinaryAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedBinaryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedBinaryAccess().getTypeBinaryTypeEnumRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleBinaryType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedBinaryRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"BinaryType");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinkedBinaryAccess().getSemicolonKeyword_3());
    }
(	otherlv_4='use' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinkedBinaryAccess().getUseKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkedBinaryRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkedBinaryAccess().getUseLibraryCrossReference_4_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinkedBinaryAccess().getSemicolonKeyword_4_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedBinaryAccess().getSectionsBinarySectionParserRuleCall_5_0()); 
	    }
		lv_sections_7_0=ruleBinarySection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedBinaryRule());
	        }
       		add(
       			$current, 
       			"sections",
        		lv_sections_7_0, 
        		"BinarySection");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleBinarySection
entryRuleBinarySection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBinarySectionRule()); }
	 iv_ruleBinarySection=ruleBinarySection 
	 { $current=$iv_ruleBinarySection.current; } 
	 EOF 
;

// Rule BinarySection
ruleBinarySection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getBinarySectionAccess().getFunctionBinarySectionParserRuleCall_0_0()); 
    }
    this_FunctionBinarySection_0=ruleFunctionBinarySection
    { 
        $current = $this_FunctionBinarySection_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBinarySectionAccess().getConstantBinarySectionParserRuleCall_0_1()); 
    }
    this_ConstantBinarySection_1=ruleConstantBinarySection
    { 
        $current = $this_ConstantBinarySection_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBinarySectionAccess().getReferenceBinarySectionParserRuleCall_0_2()); 
    }
    this_ReferenceBinarySection_2=ruleReferenceBinarySection
    { 
        $current = $this_ReferenceBinarySection_2.current; 
        afterParserOrEnumRuleCall();
    }
)	otherlv_3='at' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBinarySectionAccess().getAtKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBinarySectionAccess().getStartXExpressionParserRuleCall_2_0()); 
	    }
		lv_start_4_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBinarySectionRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_4_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBinarySectionAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleFunctionBinarySection
entryRuleFunctionBinarySection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBinarySectionRule()); }
	 iv_ruleFunctionBinarySection=ruleFunctionBinarySection 
	 { $current=$iv_ruleFunctionBinarySection.current; } 
	 EOF 
;

// Rule FunctionBinarySection
ruleFunctionBinarySection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='program' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionBinarySectionAccess().getProgramKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionBinarySectionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionBinarySectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionBinarySectionAccess().getLeftParenthesisKeyword_2());
    }
	otherlv_3='startAddr' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionBinarySectionAccess().getStartAddrKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionBinarySectionAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getStartAddrLITERALParserRuleCall_5_0()); 
	    }
		lv_startAddr_5_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		set(
       			$current, 
       			"startAddr",
        		lv_startAddr_5_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionBinarySectionAccess().getSemicolonKeyword_6());
    }
	otherlv_7='memwidth' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionBinarySectionAccess().getMemwidthKeyword_7());
    }
	otherlv_8='=' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionBinarySectionAccess().getEqualsSignKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getMemwidthLITERALParserRuleCall_9_0()); 
	    }
		lv_memwidth_9_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		set(
       			$current, 
       			"memwidth",
        		lv_memwidth_9_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFunctionBinarySectionAccess().getSemicolonKeyword_10());
    }
	otherlv_11='pointersize' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFunctionBinarySectionAccess().getPointersizeKeyword_11());
    }
	otherlv_12='=' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFunctionBinarySectionAccess().getEqualsSignKeyword_12());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getPointersizeLITERALParserRuleCall_13_0()); 
	    }
		lv_pointersize_13_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		set(
       			$current, 
       			"pointersize",
        		lv_pointersize_13_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=';' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFunctionBinarySectionAccess().getSemicolonKeyword_14());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getMemsFunctionMemoryParserRuleCall_15_0_0()); 
	    }
		lv_mems_15_0=ruleFunctionMemory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		add(
       			$current, 
       			"mems",
        		lv_mems_15_0, 
        		"FunctionMemory");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16=';' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFunctionBinarySectionAccess().getSemicolonKeyword_15_1());
    }
)+	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getFunctionBinarySectionAccess().getRightParenthesisKeyword_16());
    }
	otherlv_18='{' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getFunctionBinarySectionAccess().getLeftCurlyBracketKeyword_17());
    }
((	otherlv_19='lib' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getFunctionBinarySectionAccess().getLibKeyword_18_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionBinarySectionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getLibLibraryCrossReference_18_0_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21=';' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getFunctionBinarySectionAccess().getSemicolonKeyword_18_0_2());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getInstancesLinkedInstanceParserRuleCall_18_1_0()); 
	    }
		lv_instances_22_0=ruleLinkedInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_22_0, 
        		"LinkedInstance");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_23='link' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getFunctionBinarySectionAccess().getLinkKeyword_19());
    }
	otherlv_24='{' 
    {
    	newLeafNode(otherlv_24, grammarAccess.getFunctionBinarySectionAccess().getLeftCurlyBracketKeyword_20());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionBinarySectionAccess().getDoOperationBlockParserRuleCall_21_0()); 
	    }
		lv_do_25_0=ruleOperationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionBinarySectionRule());
	        }
       		set(
       			$current, 
       			"do",
        		lv_do_25_0, 
        		"OperationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_26='}' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getFunctionBinarySectionAccess().getRightCurlyBracketKeyword_22());
    }
	otherlv_27='}' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getFunctionBinarySectionAccess().getRightCurlyBracketKeyword_23());
    }
)
;





// Entry rule entryRuleLinkedInstance
entryRuleLinkedInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkedInstanceRule()); }
	 iv_ruleLinkedInstance=ruleLinkedInstance 
	 { $current=$iv_ruleLinkedInstance.current; } 
	 EOF 
;

// Rule LinkedInstance
ruleLinkedInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkedInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLinkedInstanceAccess().getTypeModuleCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getLinkedInstanceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkedInstanceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinkedInstanceAccess().getLeftCurlyBracketKeyword_2());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedInstanceAccess().getLinksReferenceLinkParserRuleCall_3_0_0_0()); 
	    }
		lv_links_3_0=ruleReferenceLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedInstanceRule());
	        }
       		add(
       			$current, 
       			"links",
        		lv_links_3_0, 
        		"ReferenceLink");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkedInstanceAccess().getConfsInstanceConfigParserRuleCall_3_0_1_0()); 
	    }
		lv_confs_4_0=ruleInstanceConfig		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkedInstanceRule());
	        }
       		add(
       			$current, 
       			"confs",
        		lv_confs_4_0, 
        		"InstanceConfig");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLinkedInstanceAccess().getSemicolonKeyword_3_1());
    }
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinkedInstanceAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleReferenceLink
entryRuleReferenceLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceLinkRule()); }
	 iv_ruleReferenceLink=ruleReferenceLink 
	 { $current=$iv_ruleReferenceLink.current; } 
	 EOF 
;

// Rule ReferenceLink
ruleReferenceLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceLinkRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getReferenceLinkAccess().getRefInstanceReferenceCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceLinkAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceLinkRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getReferenceLinkAccess().getInstLinkedInstanceCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleInstanceConfig
entryRuleInstanceConfig returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstanceConfigRule()); }
	 iv_ruleInstanceConfig=ruleInstanceConfig 
	 { $current=$iv_ruleInstanceConfig.current; } 
	 EOF 
;

// Rule InstanceConfig
ruleInstanceConfig returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstanceConfigRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getInstanceConfigAccess().getConfConfigVariableCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstanceConfigAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstanceConfigAccess().getValueXExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstanceConfigRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFunctionMemory
entryRuleFunctionMemory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionMemoryRule()); }
	 iv_ruleFunctionMemory=ruleFunctionMemory 
	 { $current=$iv_ruleFunctionMemory.current; } 
	 EOF 
;

// Rule FunctionMemory
ruleFunctionMemory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFunctionMemoryAccess().getMemKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMemoryAccess().getStartLITERALParserRuleCall_1_0()); 
	    }
		lv_start_1_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMemoryRule());
	        }
       		set(
       			$current, 
       			"start",
        		lv_start_1_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionMemoryAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionMemoryAccess().getEndLITERALParserRuleCall_3_0()); 
	    }
		lv_end_3_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionMemoryRule());
	        }
       		set(
       			$current, 
       			"end",
        		lv_end_3_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConstantBinarySection
entryRuleConstantBinarySection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantBinarySectionRule()); }
	 iv_ruleConstantBinarySection=ruleConstantBinarySection 
	 { $current=$iv_ruleConstantBinarySection.current; } 
	 EOF 
;

// Rule ConstantBinarySection
ruleConstantBinarySection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='data' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantBinarySectionAccess().getDataKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantBinarySectionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getConstantBinarySectionAccess().getDataXExpressionParserRuleCall_2_0_0()); 
	    }
		lv_data_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantBinarySectionRule());
	        }
       		add(
       			$current, 
       			"data",
        		lv_data_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getConstantBinarySectionAccess().getSemicolonKeyword_2_1());
    }
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantBinarySectionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleReferenceBinarySection
entryRuleReferenceBinarySection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReferenceBinarySectionRule()); }
	 iv_ruleReferenceBinarySection=ruleReferenceBinarySection 
	 { $current=$iv_ruleReferenceBinarySection.current; } 
	 EOF 
;

// Rule ReferenceBinarySection
ruleReferenceBinarySection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='include' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceBinarySectionAccess().getIncludeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferenceBinarySectionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getReferenceBinarySectionAccess().getIncLinkedBinaryCrossReference_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getXExpressionAccess().getXExpression6ParserRuleCall()); 
    }
    this_XExpression6_0=ruleXExpression6
    { 
        $current = $this_XExpression6_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXExpressionLiteralParserRuleCall_0()); 
    }
    this_XExpressionLiteral_0=ruleXExpressionLiteral
    { 
        $current = $this_XExpressionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_1()); 
    }
    this_XParenthesizedExpression_1=ruleXParenthesizedExpression
    { 
        $current = $this_XParenthesizedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIsLiteralExpressionParserRuleCall_2()); 
    }
    this_XIsLiteralExpression_2=ruleXIsLiteralExpression
    { 
        $current = $this_XIsLiteralExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getVariableReferenceParserRuleCall_3()); 
    }
    this_VariableReference_3=ruleVariableReference
    { 
        $current = $this_VariableReference_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getOperationCallParserRuleCall_4()); 
    }
    this_OperationCall_4=ruleOperationCall
    { 
        $current = $this_OperationCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXStructExpressionParserRuleCall_5()); 
    }
    this_XStructExpression_5=ruleXStructExpression
    { 
        $current = $this_XStructExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSizeOfExpressionParserRuleCall_6()); 
    }
    this_XSizeOfExpression_6=ruleXSizeOfExpression
    { 
        $current = $this_XSizeOfExpression_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSizeOfExpression
entryRuleXSizeOfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSizeOfExpressionRule()); }
	 iv_ruleXSizeOfExpression=ruleXSizeOfExpression 
	 { $current=$iv_ruleXSizeOfExpression.current; } 
	 EOF 
;

// Rule XSizeOfExpression
ruleXSizeOfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sizeof' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXSizeOfExpressionAccess().getSizeofKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSizeOfExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSizeOfExpressionAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSizeOfExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXSizeOfExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleXStructExpression
entryRuleXStructExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXStructExpressionRule()); }
	 iv_ruleXStructExpression=ruleXStructExpression 
	 { $current=$iv_ruleXStructExpression.current; } 
	 EOF 
;

// Rule XStructExpression
ruleXStructExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXStructExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXStructExpressionAccess().getTypeTypeCrossReference_0_0()); 
	    }
		ruleReferenceID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXStructExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXStructExpressionAccess().getValuesXExpressionParserRuleCall_2_0()); 
	    }
		lv_values_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXStructExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXStructExpressionAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXStructExpressionAccess().getValuesXExpressionParserRuleCall_3_1_0()); 
	    }
		lv_values_4_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXStructExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXStructExpressionAccess().getCommaKeyword_4());
    }
)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXStructExpressionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleXExpression1
entryRuleXExpression1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression1Rule()); }
	 iv_ruleXExpression1=ruleXExpression1 
	 { $current=$iv_ruleXExpression1.current; } 
	 EOF 
;

// Rule XExpression1
ruleXExpression1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression1Access().getOperatorUNARY_OPERATOREnumRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleUNARY_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression1Rule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"UNARY_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression1Access().getAXExpression0ParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleXExpression0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression1Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"XExpression0");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpression0
entryRuleXExpression0 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression0Rule()); }
	 iv_ruleXExpression0=ruleXExpression0 
	 { $current=$iv_ruleXExpression0.current; } 
	 EOF 
;

// Rule XExpression0
ruleXExpression0 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression0Access().getAXExpressionM1ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpressionM1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression0Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpressionM1");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXExpression0Access().getHyphenMinusGreaterThanSignKeyword_1_0());
    }
(
(
		lv_member_2_0=RULE_ID
		{
			newLeafNode(lv_member_2_0, grammarAccess.getXExpression0Access().getMemberIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXExpression0Rule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"member",
        		lv_member_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleXExpressionM1
entryRuleXExpressionM1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionM1Rule()); }
	 iv_ruleXExpressionM1=ruleXExpressionM1 
	 { $current=$iv_ruleXExpressionM1.current; } 
	 EOF 
;

// Rule XExpressionM1
ruleXExpressionM1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionM1Access().getAXPrimaryExpressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXPrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionM1Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XPrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXExpressionM1Access().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionM1Access().getIndexXExpressionParserRuleCall_1_1_0()); 
	    }
		lv_index_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionM1Rule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXExpressionM1Access().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleXExpression2
entryRuleXExpression2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression2Rule()); }
	 iv_ruleXExpression2=ruleXExpression2 
	 { $current=$iv_ruleXExpression2.current; } 
	 EOF 
;

// Rule XExpression2
ruleXExpression2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getAXExpression1ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression1");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleMULTIPLICATIVE_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleMULTIPLICATIVE_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"MULTIPLICATIVE_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getBXExpression2ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression3
entryRuleXExpression3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression3Rule()); }
	 iv_ruleXExpression3=ruleXExpression3 
	 { $current=$iv_ruleXExpression3.current; } 
	 EOF 
;

// Rule XExpression3
ruleXExpression3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getAXExpression2ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleADDITIVE_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getOpADDITIVE_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleADDITIVE_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ADDITIVE_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getBXExpression2ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression4
entryRuleXExpression4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression4Rule()); }
	 iv_ruleXExpression4=ruleXExpression4 
	 { $current=$iv_ruleXExpression4.current; } 
	 EOF 
;

// Rule XExpression4
ruleXExpression4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getAXExpression3ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression3");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleEQUALITY_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getOpEQUALITY_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleEQUALITY_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"EQUALITY_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getBXExpression3ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression3");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression5
entryRuleXExpression5 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression5Rule()); }
	 iv_ruleXExpression5=ruleXExpression5 
	 { $current=$iv_ruleXExpression5.current; } 
	 EOF 
;

// Rule XExpression5
ruleXExpression5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getAXExpression4ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression4");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleBOOLEAN_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getOpBOOLEAN_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleBOOLEAN_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"BOOLEAN_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getBXExpression4ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression4");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression6
entryRuleXExpression6 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression6Rule()); }
	 iv_ruleXExpression6=ruleXExpression6 
	 { $current=$iv_ruleXExpression6.current; } 
	 EOF 
;

// Rule XExpression6
ruleXExpression6 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
ruleVariableReference
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression6Access().getRefVariableReferenceParserRuleCall_0_0_0()); 
	    }
		lv_ref_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression6Rule());
	        }
       		add(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXExpression6Access().getOpSingleAssignParserRuleCall_0_1()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression6Access().getAXExpression5ParserRuleCall_1_0()); 
	    }
		lv_a_2_0=ruleXExpression5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression6Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_2_0, 
        		"XExpression5");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpressionLiteral
entryRuleXExpressionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionLiteralRule()); }
	 iv_ruleXExpressionLiteral=ruleXExpressionLiteral 
	 { $current=$iv_ruleXExpressionLiteral.current; } 
	 EOF 
;

// Rule XExpressionLiteral
ruleXExpressionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionLiteralAccess().getValueLITERALParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleXTopLevelExpression
entryRuleXTopLevelExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTopLevelExpressionRule()); }
	 iv_ruleXTopLevelExpression=ruleXTopLevelExpression 
	 { $current=$iv_ruleXTopLevelExpression.current; } 
	 EOF 
;

// Rule XTopLevelExpression
ruleXTopLevelExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getAnnotationParserRuleCall_0_0()); 
    }
    this_Annotation_0=ruleAnnotation
    { 
        $current = $this_Annotation_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTopLevelExpressionAccess().getSemicolonKeyword_0_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getXExpressionParserRuleCall_1_0()); 
    }
    this_XExpression_2=ruleXExpression
    { 
        $current = $this_XExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXTopLevelExpressionAccess().getSemicolonKeyword_1_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getXIfExpressionParserRuleCall_2()); 
    }
    this_XIfExpression_4=ruleXIfExpression
    { 
        $current = $this_XIfExpression_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getXWhileExpressionParserRuleCall_3()); 
    }
    this_XWhileExpression_5=ruleXWhileExpression
    { 
        $current = $this_XWhileExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleXIsLiteralExpression
entryRuleXIsLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXIsLiteralExpressionRule()); }
	 iv_ruleXIsLiteralExpression=ruleXIsLiteralExpression 
	 { $current=$iv_ruleXIsLiteralExpression.current; } 
	 EOF 
;

// Rule XIsLiteralExpression
ruleXIsLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isliteral' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXIsLiteralExpressionAccess().getIsliteralKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIsLiteralExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIsLiteralExpressionAccess().getRefVariableReferenceParserRuleCall_2_0()); 
	    }
		lv_ref_2_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIsLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXIsLiteralExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleXIfExpression
entryRuleXIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXIfExpressionRule()); }
	 iv_ruleXIfExpression=ruleXIfExpression 
	 { $current=$iv_ruleXIfExpression.current; } 
	 EOF 
;

// Rule XIfExpression
ruleXIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXIfExpressionAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_2_0()); 
	    }
		lv_if_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXIfExpressionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getThenOperationBlockParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleOperationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"OperationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXIfExpressionAccess().getRightCurlyBracketKeyword_6());
    }
(((	'else' 
)=>	otherlv_7='else' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getXIfExpressionAccess().getElseKeyword_7_0());
    }
)	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXIfExpressionAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getElseOperationBlockParserRuleCall_7_2_0()); 
	    }
		lv_else_9_0=ruleOperationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_9_0, 
        		"OperationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXIfExpressionAccess().getRightCurlyBracketKeyword_7_3());
    }
)?)
;





// Entry rule entryRuleXWhileExpression
entryRuleXWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXWhileExpressionRule()); }
	 iv_ruleXWhileExpression=ruleXWhileExpression 
	 { $current=$iv_ruleXWhileExpression.current; } 
	 EOF 
;

// Rule XWhileExpression
ruleXWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXWhileExpressionAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getCondXExpressionParserRuleCall_2_0()); 
	    }
		lv_cond_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXWhileExpressionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getDoOperationBlockParserRuleCall_5_0()); 
	    }
		lv_do_5_0=ruleOperationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"do",
        		lv_do_5_0, 
        		"OperationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXWhileExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getAXExpressionParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule PrimitiveKind
rulePrimitiveKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='unsigned' 
	{
        $current = grammarAccess.getPrimitiveKindAccess().getUNSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getPrimitiveKindAccess().getUNSIGNEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='signed' 
	{
        $current = grammarAccess.getPrimitiveKindAccess().getSIGNEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getPrimitiveKindAccess().getSIGNEDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='real' 
	{
        $current = grammarAccess.getPrimitiveKindAccess().getREALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getPrimitiveKindAccess().getREALEnumLiteralDeclaration_2()); 
    }
));



// Rule ParameterKind
ruleParameterKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='default' 
	{
        $current = grammarAccess.getParameterKindAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParameterKindAccess().getANYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='var' 
	{
        $current = grammarAccess.getParameterKindAccess().getVAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParameterKindAccess().getVAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='const' 
	{
        $current = grammarAccess.getParameterKindAccess().getCONSTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getParameterKindAccess().getCONSTEnumLiteralDeclaration_2()); 
    }
));



// Rule OperationRole
ruleOperationRole returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='SET' 
	{
        $current = grammarAccess.getOperationRoleAccess().getSETEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperationRoleAccess().getSETEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='ADD' 
	{
        $current = grammarAccess.getOperationRoleAccess().getADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperationRoleAccess().getADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='SUBTRACT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getSUBTRACTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperationRoleAccess().getSUBTRACTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='AND' 
	{
        $current = grammarAccess.getOperationRoleAccess().getANDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperationRoleAccess().getANDEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='OR' 
	{
        $current = grammarAccess.getOperationRoleAccess().getOREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOperationRoleAccess().getOREnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='XOR' 
	{
        $current = grammarAccess.getOperationRoleAccess().getXOREnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getOperationRoleAccess().getXOREnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='EQUALS' 
	{
        $current = grammarAccess.getOperationRoleAccess().getEQUALSEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getOperationRoleAccess().getEQUALSEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='BRANCH' 
	{
        $current = grammarAccess.getOperationRoleAccess().getBRANCHEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getOperationRoleAccess().getBRANCHEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='UC_GOTO' 
	{
        $current = grammarAccess.getOperationRoleAccess().getUC_GOTOEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getOperationRoleAccess().getUC_GOTOEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='NOT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getNOTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getOperationRoleAccess().getNOTEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='INDIRECTION' 
	{
        $current = grammarAccess.getOperationRoleAccess().getINDIRECTIONEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getOperationRoleAccess().getINDIRECTIONEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='CLEAR' 
	{
        $current = grammarAccess.getOperationRoleAccess().getCLEAREnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getOperationRoleAccess().getCLEAREnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='INCREMENT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getINCREMENTEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getOperationRoleAccess().getINCREMENTEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='DECREMENT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getDECREMENTEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getOperationRoleAccess().getDECREMENTEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='DIV' 
	{
        $current = grammarAccess.getOperationRoleAccess().getDIVEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getOperationRoleAccess().getDIVEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='MOD' 
	{
        $current = grammarAccess.getOperationRoleAccess().getMODEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getOperationRoleAccess().getMODEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='LT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getLTEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getOperationRoleAccess().getLTEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='LTE' 
	{
        $current = grammarAccess.getOperationRoleAccess().getLTEEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getOperationRoleAccess().getLTEEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='GT' 
	{
        $current = grammarAccess.getOperationRoleAccess().getGTEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getOperationRoleAccess().getGTEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='GTE' 
	{
        $current = grammarAccess.getOperationRoleAccess().getGTEEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getOperationRoleAccess().getGTEEnumLiteralDeclaration_19()); 
    }
));



// Rule BinaryType
ruleBinaryType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='default' 
	{
        $current = grammarAccess.getBinaryTypeAccess().getDEFAULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryTypeAccess().getDEFAULTEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='hexfile' 
	{
        $current = grammarAccess.getBinaryTypeAccess().getHEXFILEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryTypeAccess().getHEXFILEEnumLiteralDeclaration_1()); 
    }
));



// Rule UNARY_OPERATOR
ruleUNARY_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUNARY_OPERATORAccess().getMINUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUNARY_OPERATORAccess().getNOTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='&' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getREFERENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUNARY_OPERATORAccess().getREFERENCEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='@' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getDEREFERENCEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUNARY_OPERATORAccess().getDEREFERENCEEnumLiteralDeclaration_3()); 
    }
));



// Rule MULTIPLICATIVE_OPERATOR
ruleMULTIPLICATIVE_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMULEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getDIVEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMODEnumLiteralDeclaration_2()); 
    }
));



// Rule ADDITIVE_OPERATOR
ruleADDITIVE_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getADDITIVE_OPERATORAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getADDITIVE_OPERATORAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getADDITIVE_OPERATORAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getADDITIVE_OPERATORAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule EQUALITY_OPERATOR
ruleEQUALITY_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEQUALITY_OPERATORAccess().getEQUALSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getNOTEQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEQUALITY_OPERATORAccess().getNOTEQUALSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getGTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEQUALITY_OPERATORAccess().getGTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getLTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEQUALITY_OPERATORAccess().getLTEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEQUALITY_OPERATORAccess().getGTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getLTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEQUALITY_OPERATORAccess().getLTEnumLiteralDeclaration_5()); 
    }
));



// Rule BOOLEAN_OPERATOR
ruleBOOLEAN_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='||' 
	{
        $current = grammarAccess.getBOOLEAN_OPERATORAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOLEAN_OPERATORAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&&' 
	{
        $current = grammarAccess.getBOOLEAN_OPERATORAccess().getANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOLEAN_OPERATORAccess().getANDEnumLiteralDeclaration_1()); 
    }
));



RULE_HEXINT : '0x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_BINARY : 'b' ('0'|'1')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


