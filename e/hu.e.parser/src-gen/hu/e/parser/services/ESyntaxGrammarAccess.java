/*
* generated by Xtext
*/

package hu.e.parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ESyntaxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNamespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cImportKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUsesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cUsesPackageCrossReference_3_1_0 = (CrossReference)cUsesAssignment_3_1.eContents().get(0);
		private final RuleCall cUsesPackageQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cUsesPackageCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsTopLevelItemParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		
		//Package:
		//	"namespace" name=QualifiedName ";" ("import" uses+=[Package|QualifiedName] ";")* items+=TopLevelItem*;
		public ParserRule getRule() { return rule; }

		//"namespace" name=QualifiedName ";" ("import" uses+=[Package|QualifiedName] ";")* items+=TopLevelItem*
		public Group getGroup() { return cGroup; }

		//"namespace"
		public Keyword getNamespaceKeyword_0() { return cNamespaceKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//("import" uses+=[Package|QualifiedName] ";")*
		public Group getGroup_3() { return cGroup_3; }

		//"import"
		public Keyword getImportKeyword_3_0() { return cImportKeyword_3_0; }

		//uses+=[Package|QualifiedName]
		public Assignment getUsesAssignment_3_1() { return cUsesAssignment_3_1; }

		//[Package|QualifiedName]
		public CrossReference getUsesPackageCrossReference_3_1_0() { return cUsesPackageCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getUsesPackageQualifiedNameParserRuleCall_3_1_0_1() { return cUsesPackageQualifiedNameParserRuleCall_3_1_0_1; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//items+=TopLevelItem*
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//TopLevelItem
		public RuleCall getItemsTopLevelItemParserRuleCall_4_0() { return cItemsTopLevelItemParserRuleCall_4_0; }
	}

	public class TopLevelItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkedBinaryParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cVariableParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cConstantVariableParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cRegisterVariableParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cCompileContextVariableParserRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final RuleCall cOperatorDefinitionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//TopLevelItem:
		//	Type | Operation | LinkedBinary | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | CompileContextVariable
		//	";" | OperatorDefinition;
		public ParserRule getRule() { return rule; }

		//Type | Operation | LinkedBinary | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | CompileContextVariable
		//";" | OperatorDefinition
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }

		//LinkedBinary
		public RuleCall getLinkedBinaryParserRuleCall_2() { return cLinkedBinaryParserRuleCall_2; }

		//Variable ";"
		public Group getGroup_3() { return cGroup_3; }

		//Variable
		public RuleCall getVariableParserRuleCall_3_0() { return cVariableParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//ConstantVariable ";"
		public Group getGroup_4() { return cGroup_4; }

		//ConstantVariable
		public RuleCall getConstantVariableParserRuleCall_4_0() { return cConstantVariableParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//RegisterVariable ";"
		public Group getGroup_5() { return cGroup_5; }

		//RegisterVariable
		public RuleCall getRegisterVariableParserRuleCall_5_0() { return cRegisterVariableParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }

		//CompileContextVariable ";"
		public Group getGroup_6() { return cGroup_6; }

		//CompileContextVariable
		public RuleCall getCompileContextVariableParserRuleCall_6_0() { return cCompileContextVariableParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }

		//OperatorDefinition
		public RuleCall getOperatorDefinitionParserRuleCall_7() { return cOperatorDefinitionParserRuleCall_7; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBINARYTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LITERAL:
		//	INT | HEXINT | BINARY;
		public ParserRule getRule() { return rule; }

		//INT | HEXINT | BINARY
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//HEXINT
		public RuleCall getHEXINTTerminalRuleCall_1() { return cHEXINTTerminalRuleCall_1; }

		//BINARY
		public RuleCall getBINARYTerminalRuleCall_2() { return cBINARYTerminalRuleCall_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefTypeDefParserRuleCall_3_0 = (RuleCall)cDefAssignment_3.eContents().get(0);
		
		/// ***********************
		// * DATATYPES *
		// *********************** / Type:
		//	"type" name=ID "=" def=TypeDef;
		public ParserRule getRule() { return rule; }

		//"type" name=ID "=" def=TypeDef
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//def=TypeDef
		public Assignment getDefAssignment_3() { return cDefAssignment_3; }

		//TypeDef
		public RuleCall getDefTypeDefParserRuleCall_3_0() { return cDefTypeDefParserRuleCall_3_0; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStructTypeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TypeDef:
		//	DataTypeDef | ArrayTypeDef | StructTypeDef;
		public ParserRule getRule() { return rule; }

		//DataTypeDef | ArrayTypeDef | StructTypeDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_0() { return cDataTypeDefParserRuleCall_0; }

		//ArrayTypeDef
		public RuleCall getArrayTypeDefParserRuleCall_1() { return cArrayTypeDefParserRuleCall_1; }

		//StructTypeDef
		public RuleCall getStructTypeDefParserRuleCall_2() { return cStructTypeDefParserRuleCall_2; }
	}

	public class DataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindPrimitiveKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cBitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitsINTTerminalRuleCall_1_0 = (RuleCall)cBitsAssignment_1.eContents().get(0);
		private final Keyword cBitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DataTypeDef:
		//	kind=PrimitiveKind bits=INT "bits" ";";
		public ParserRule getRule() { return rule; }

		//kind=PrimitiveKind bits=INT "bits" ";"
		public Group getGroup() { return cGroup; }

		//kind=PrimitiveKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//PrimitiveKind
		public RuleCall getKindPrimitiveKindEnumRuleCall_0_0() { return cKindPrimitiveKindEnumRuleCall_0_0; }

		//bits=INT
		public Assignment getBitsAssignment_1() { return cBitsAssignment_1; }

		//INT
		public RuleCall getBitsINTTerminalRuleCall_1_0() { return cBitsINTTerminalRuleCall_1_0; }

		//"bits"
		public Keyword getBitsKeyword_2() { return cBitsKeyword_2; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ArrayTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthXExpressionParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayTypeDef:
		//	type=[Type|QualifiedName] "[" length=XExpression "]" ";";
		public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] "[" length=XExpression "]" ";"
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//length=XExpression
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//XExpression
		public RuleCall getLengthXExpressionParserRuleCall_2_0() { return cLengthXExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class StructTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersStructTypeDefMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersStructTypeDefMemberParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructTypeDef:
		//	{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}";
		public ParserRule getRule() { return rule; }

		//{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}"
		public Group getGroup() { return cGroup; }

		//{StructTypeDef}
		public Action getStructTypeDefAction_0() { return cStructTypeDefAction_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=StructTypeDefMember
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//StructTypeDefMember
		public RuleCall getMembersStructTypeDefMemberParserRuleCall_3_0() { return cMembersStructTypeDefMemberParserRuleCall_3_0; }

		//("," members+=StructTypeDefMember)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//members+=StructTypeDefMember
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//StructTypeDefMember
		public RuleCall getMembersStructTypeDefMemberParserRuleCall_4_1_0() { return cMembersStructTypeDefMemberParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StructTypeDefMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructTypeDefMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//StructTypeDefMember:
		//	type=[Type|QualifiedName] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConstantVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueXExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		/// *************************
		// * GLOBAL VARIABLES
		// ************************* / ConstantVariable returns Variable:
		//	{ConstantVariable} "const" type=[Type|QualifiedName] name=ID "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//{ConstantVariable} "const" type=[Type|QualifiedName] name=ID "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//{ConstantVariable}
		public Action getConstantVariableAction_0() { return cConstantVariableAction_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=XExpression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_5_0() { return cValueXExpressionParserRuleCall_5_0; }
	}

	public class RegisterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegisterVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegisterVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRegKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAddrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddrLITERALParserRuleCall_5_0 = (RuleCall)cAddrAssignment_5.eContents().get(0);
		
		//RegisterVariable returns Variable:
		//	{RegisterVariable} "reg" type=[Type|QualifiedName] name=ID ":" addr=LITERAL;
		public ParserRule getRule() { return rule; }

		//{RegisterVariable} "reg" type=[Type|QualifiedName] name=ID ":" addr=LITERAL
		public Group getGroup() { return cGroup; }

		//{RegisterVariable}
		public Action getRegisterVariableAction_0() { return cRegisterVariableAction_0; }

		//"reg"
		public Keyword getRegKeyword_1() { return cRegKeyword_1; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_2_0_1; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//addr=LITERAL
		public Assignment getAddrAssignment_5() { return cAddrAssignment_5; }

		//LITERAL
		public RuleCall getAddrLITERALParserRuleCall_5_0() { return cAddrLITERALParserRuleCall_5_0; }
	}

	public class CompileContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompileContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompileContextVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCompilecontextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueXExpressionParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		
		//CompileContextVariable returns Variable:
		//	{CompileContextVariable} "compilecontext" name=ID ("=" value=XExpression)?;
		public ParserRule getRule() { return rule; }

		//{CompileContextVariable} "compilecontext" name=ID ("=" value=XExpression)?
		public Group getGroup() { return cGroup; }

		//{CompileContextVariable}
		public Action getCompileContextVariableAction_0() { return cCompileContextVariableAction_0; }

		//"compilecontext"
		public Keyword getCompilecontextKeyword_1() { return cCompilecontextKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("=" value=XExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//value=XExpression
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_3_1_0() { return cValueXExpressionParserRuleCall_3_1_0; }
	}

	public class OperationStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInstructionWordParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cOperationCallParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final RuleCall cXTopLevelExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		/// ***********************
		// * Operation *
		// *********************** / OperationStep:
		//	InstructionWord | Label | Variable ";" | OperationCall ";" | XTopLevelExpression;
		public ParserRule getRule() { return rule; }

		//InstructionWord | Label | Variable ";" | OperationCall ";" | XTopLevelExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//InstructionWord
		public RuleCall getInstructionWordParserRuleCall_0() { return cInstructionWordParserRuleCall_0; }

		//Label
		public RuleCall getLabelParserRuleCall_1() { return cLabelParserRuleCall_1; }

		//Variable ";"
		public Group getGroup_2() { return cGroup_2; }

		//Variable
		public RuleCall getVariableParserRuleCall_2_0() { return cVariableParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//OperationCall ";"
		public Group getGroup_3() { return cGroup_3; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_3_0() { return cOperationCallParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//XTopLevelExpression
		public RuleCall getXTopLevelExpressionParserRuleCall_4() { return cXTopLevelExpressionParserRuleCall_4; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Label:
		//	"label" name=ID ";";
		public ParserRule getRule() { return rule; }

		//"label" name=ID ";"
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class InstructionWordElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InstructionWord");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSectionsWordSectionParserRuleCall_1_0 = (RuleCall)cSectionsAssignment_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//InstructionWord:
		//	"<" sections+=WordSection+ ">";
		public ParserRule getRule() { return rule; }

		//"<" sections+=WordSection+ ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//sections+=WordSection+
		public Assignment getSectionsAssignment_1() { return cSectionsAssignment_1; }

		//WordSection
		public RuleCall getSectionsWordSectionParserRuleCall_1_0() { return cSectionsWordSectionParserRuleCall_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
	}

	public class WordSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WordSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cLiteralValueParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cLabelReferenceParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeINTTerminalRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cShiftAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cShiftINTTerminalRuleCall_3_1_0 = (RuleCall)cShiftAssignment_3_1.eContents().get(0);
		
		//WordSection:
		//	(LiteralValue | VariableReference | LabelReference) ":" size=INT (":" shift=INT)?;
		public ParserRule getRule() { return rule; }

		//(LiteralValue | VariableReference | LabelReference) ":" size=INT (":" shift=INT)?
		public Group getGroup() { return cGroup; }

		//LiteralValue | VariableReference | LabelReference
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//LiteralValue
		public RuleCall getLiteralValueParserRuleCall_0_0() { return cLiteralValueParserRuleCall_0_0; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_0_1() { return cVariableReferenceParserRuleCall_0_1; }

		//LabelReference
		public RuleCall getLabelReferenceParserRuleCall_0_2() { return cLabelReferenceParserRuleCall_0_2; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//size=INT
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//INT
		public RuleCall getSizeINTTerminalRuleCall_2_0() { return cSizeINTTerminalRuleCall_2_0; }

		//(":" shift=INT)?
		public Group getGroup_3() { return cGroup_3; }

		//":"
		public Keyword getColonKeyword_3_0() { return cColonKeyword_3_0; }

		//shift=INT
		public Assignment getShiftAssignment_3_1() { return cShiftAssignment_3_1; }

		//INT
		public RuleCall getShiftINTTerminalRuleCall_3_1_0() { return cShiftINTTerminalRuleCall_3_1_0; }
	}

	public class LiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLITERALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LiteralValue:
		//	value=LITERAL;
		public ParserRule getRule() { return rule; }

		//value=LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//LITERAL
		public RuleCall getValueLITERALParserRuleCall_0() { return cValueLITERALParserRuleCall_0; }
	}

	public class LabelReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLabelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cLabelLabelCrossReference_1_0 = (CrossReference)cLabelAssignment_1.eContents().get(0);
		private final RuleCall cLabelLabelIDTerminalRuleCall_1_0_1 = (RuleCall)cLabelLabelCrossReference_1_0.eContents().get(1);
		
		//LabelReference:
		//	"@" label=[Label];
		public ParserRule getRule() { return rule; }

		//"@" label=[Label]
		public Group getGroup() { return cGroup; }

		//"@"
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }

		//label=[Label]
		public Assignment getLabelAssignment_1() { return cLabelAssignment_1; }

		//[Label]
		public CrossReference getLabelLabelCrossReference_1_0() { return cLabelLabelCrossReference_1_0; }

		//ID
		public RuleCall getLabelLabelIDTerminalRuleCall_1_0_1() { return cLabelLabelIDTerminalRuleCall_1_0_1; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//	type=[Type|QualifiedName] name=ID;
		public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] name=ID
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarVariableCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefVariableRefSectionParserRuleCall_1_0 = (RuleCall)cRefAssignment_1.eContents().get(0);
		
		//VariableReference:
		//	var=[Variable] ref+=VariableRefSection*;
		public ParserRule getRule() { return rule; }

		//var=[Variable] ref+=VariableRefSection*
		public Group getGroup() { return cGroup; }

		//var=[Variable]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }

		//[Variable]
		public CrossReference getVarVariableCrossReference_0_0() { return cVarVariableCrossReference_0_0; }

		//ID
		public RuleCall getVarVariableIDTerminalRuleCall_0_0_1() { return cVarVariableIDTerminalRuleCall_0_0_1; }

		//ref+=VariableRefSection*
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//VariableRefSection
		public RuleCall getRefVariableRefSectionParserRuleCall_1_0() { return cRefVariableRefSectionParserRuleCall_1_0; }
	}

	public class VariableRefSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableRefSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableRefSection:
		//	ArrayRef | StructRef;
		public ParserRule getRule() { return rule; }

		//ArrayRef | StructRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ArrayRef
		public RuleCall getArrayRefParserRuleCall_0() { return cArrayRefParserRuleCall_0; }

		//StructRef
		public RuleCall getStructRefParserRuleCall_1() { return cStructRefParserRuleCall_1; }
	}

	public class ArrayRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVXExpressionParserRuleCall_1_0 = (RuleCall)cVAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayRef:
		//	"[" v=XExpression "]";
		public ParserRule getRule() { return rule; }

		//"[" v=XExpression "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//v=XExpression
		public Assignment getVAssignment_1() { return cVAssignment_1; }

		//XExpression
		public RuleCall getVXExpressionParserRuleCall_1_0() { return cVXExpressionParserRuleCall_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}

	public class StructRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefStructTypeDefMemberCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefStructTypeDefMemberIDTerminalRuleCall_1_0_1 = (RuleCall)cRefStructTypeDefMemberCrossReference_1_0.eContents().get(1);
		
		//StructRef:
		//	"." ref=[StructTypeDefMember];
		public ParserRule getRule() { return rule; }

		//"." ref=[StructTypeDefMember]
		public Group getGroup() { return cGroup; }

		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }

		//ref=[StructTypeDefMember]
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }

		//[StructTypeDefMember]
		public CrossReference getRefStructTypeDefMemberCrossReference_1_0() { return cRefStructTypeDefMemberCrossReference_1_0; }

		//ID
		public RuleCall getRefStructTypeDefMemberIDTerminalRuleCall_1_0_1() { return cRefStructTypeDefMemberIDTerminalRuleCall_1_0_1; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperationOperationCrossReference_0_0 = (CrossReference)cOperationAssignment_0.eContents().get(0);
		private final RuleCall cOperationOperationQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cOperationOperationCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsOperationCallParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsOperationCallParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationCall:
		//	operation=[Operation|QualifiedName] "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")";
		public ParserRule getRule() { return rule; }

		//operation=[Operation|QualifiedName] "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")"
		public Group getGroup() { return cGroup; }

		//operation=[Operation|QualifiedName]
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//[Operation|QualifiedName]
		public CrossReference getOperationOperationCrossReference_0_0() { return cOperationOperationCrossReference_0_0; }

		//QualifiedName
		public RuleCall getOperationOperationQualifiedNameParserRuleCall_0_0_1() { return cOperationOperationQualifiedNameParserRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=OperationCallParameter ("," params+=OperationCallParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=OperationCallParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//OperationCallParameter
		public RuleCall getParamsOperationCallParameterParserRuleCall_2_0_0() { return cParamsOperationCallParameterParserRuleCall_2_0_0; }

		//("," params+=OperationCallParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=OperationCallParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//OperationCallParameter
		public RuleCall getParamsOperationCallParameterParserRuleCall_2_1_1_0() { return cParamsOperationCallParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OperationCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCallParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OperationCallParameter:
		//	XExpression | LabelReference;
		public ParserRule getRule() { return rule; }

		//XExpression | LabelReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_0() { return cXExpressionParserRuleCall_0; }

		//LabelReference
		public RuleCall getLabelReferenceParserRuleCall_1() { return cLabelReferenceParserRuleCall_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReturntypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cReturntypeTypeCrossReference_0_0 = (CrossReference)cReturntypeAssignment_0.eContents().get(0);
		private final RuleCall cReturntypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cReturntypeTypeCrossReference_0_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterVariableParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterVariableParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockOperationBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cReturnAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cReturnXExpressionParserRuleCall_8_1_0 = (RuleCall)cReturnAssignment_8_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//Operation:
		//	returntype=[Type|QualifiedName]? name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{"
		//	block=OperationBlock "}" ("returns" return=XExpression ";")?;
		public ParserRule getRule() { return rule; }

		//returntype=[Type|QualifiedName]? name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{"
		//block=OperationBlock "}" ("returns" return=XExpression ";")?
		public Group getGroup() { return cGroup; }

		//returntype=[Type|QualifiedName]?
		public Assignment getReturntypeAssignment_0() { return cReturntypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getReturntypeTypeCrossReference_0_0() { return cReturntypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getReturntypeTypeQualifiedNameParserRuleCall_0_0_1() { return cReturntypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=ParameterVariable ("," params+=ParameterVariable)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=ParameterVariable
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ParameterVariable
		public RuleCall getParamsParameterVariableParserRuleCall_3_0_0() { return cParamsParameterVariableParserRuleCall_3_0_0; }

		//("," params+=ParameterVariable)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=ParameterVariable
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//ParameterVariable
		public RuleCall getParamsParameterVariableParserRuleCall_3_1_1_0() { return cParamsParameterVariableParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//block=OperationBlock
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }

		//OperationBlock
		public RuleCall getBlockOperationBlockParserRuleCall_6_0() { return cBlockOperationBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("returns" return=XExpression ";")?
		public Group getGroup_8() { return cGroup_8; }

		//"returns"
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }

		//return=XExpression
		public Assignment getReturnAssignment_8_1() { return cReturnAssignment_8_1; }

		//XExpression
		public RuleCall getReturnXExpressionParserRuleCall_8_1_0() { return cReturnXExpressionParserRuleCall_8_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }
	}

	public class OperationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsOperationStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//OperationBlock:
		//	{OperationBlock} steps+=OperationStep*;
		public ParserRule getRule() { return rule; }

		//{OperationBlock} steps+=OperationStep*
		public Group getGroup() { return cGroup; }

		//{OperationBlock}
		public Action getOperationBlockAction_0() { return cOperationBlockAction_0; }

		//steps+=OperationStep*
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//OperationStep
		public RuleCall getStepsOperationStepParserRuleCall_1_0() { return cStepsOperationStepParserRuleCall_1_0; }
	}

	public class ParameterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindParameterKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarVariableParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDefaultAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDefaultLITERALParserRuleCall_2_1_0 = (RuleCall)cDefaultAssignment_2_1.eContents().get(0);
		
		//ParameterVariable:
		//	kind=ParameterKind? var=Variable ("=" default=LITERAL)?;
		public ParserRule getRule() { return rule; }

		//kind=ParameterKind? var=Variable ("=" default=LITERAL)?
		public Group getGroup() { return cGroup; }

		//kind=ParameterKind?
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//ParameterKind
		public RuleCall getKindParameterKindEnumRuleCall_0_0() { return cKindParameterKindEnumRuleCall_0_0; }

		//var=Variable
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//Variable
		public RuleCall getVarVariableParserRuleCall_1_0() { return cVarVariableParserRuleCall_1_0; }

		//("=" default=LITERAL)?
		public Group getGroup_2() { return cGroup_2; }

		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }

		//default=LITERAL
		public Assignment getDefaultAssignment_2_1() { return cDefaultAssignment_2_1; }

		//LITERAL
		public RuleCall getDefaultLITERALParserRuleCall_2_1_0() { return cDefaultLITERALParserRuleCall_2_1_0; }
	}

	public class OperatorDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatorDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOperatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRoleOperationRoleEnumRuleCall_1_0 = (RuleCall)cRoleAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCandidateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cCandidateOperationCrossReference_3_0 = (CrossReference)cCandidateAssignment_3.eContents().get(0);
		private final RuleCall cCandidateOperationQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cCandidateOperationCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCandidateAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cCandidateOperationCrossReference_4_1_0 = (CrossReference)cCandidateAssignment_4_1.eContents().get(0);
		private final RuleCall cCandidateOperationQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cCandidateOperationCrossReference_4_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//OperatorDefinition:
		//	"operator" role=OperationRole "{" candidate+=[Operation|QualifiedName] ("," candidate+=[Operation|QualifiedName])*
		//	","? "}";
		public ParserRule getRule() { return rule; }

		//"operator" role=OperationRole "{" candidate+=[Operation|QualifiedName] ("," candidate+=[Operation|QualifiedName])* ","?
		//"}"
		public Group getGroup() { return cGroup; }

		//"operator"
		public Keyword getOperatorKeyword_0() { return cOperatorKeyword_0; }

		//role=OperationRole
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }

		//OperationRole
		public RuleCall getRoleOperationRoleEnumRuleCall_1_0() { return cRoleOperationRoleEnumRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//candidate+=[Operation|QualifiedName]
		public Assignment getCandidateAssignment_3() { return cCandidateAssignment_3; }

		//[Operation|QualifiedName]
		public CrossReference getCandidateOperationCrossReference_3_0() { return cCandidateOperationCrossReference_3_0; }

		//QualifiedName
		public RuleCall getCandidateOperationQualifiedNameParserRuleCall_3_0_1() { return cCandidateOperationQualifiedNameParserRuleCall_3_0_1; }

		//("," candidate+=[Operation|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//candidate+=[Operation|QualifiedName]
		public Assignment getCandidateAssignment_4_1() { return cCandidateAssignment_4_1; }

		//[Operation|QualifiedName]
		public CrossReference getCandidateOperationCrossReference_4_1_0() { return cCandidateOperationCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getCandidateOperationQualifiedNameParserRuleCall_4_1_0_1() { return cCandidateOperationQualifiedNameParserRuleCall_4_1_0_1; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LinkedBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkedBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBinaryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeBinaryTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSectionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSectionsBinarySectionParserRuleCall_4_0 = (RuleCall)cSectionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ********************
		// * BINARY and LINKING
		// ******************** / LinkedBinary:
		//	"binary" name=ID type=BinaryType? "{" sections+=BinarySection* "}";
		public ParserRule getRule() { return rule; }

		//"binary" name=ID type=BinaryType? "{" sections+=BinarySection* "}"
		public Group getGroup() { return cGroup; }

		//"binary"
		public Keyword getBinaryKeyword_0() { return cBinaryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=BinaryType?
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//BinaryType
		public RuleCall getTypeBinaryTypeEnumRuleCall_2_0() { return cTypeBinaryTypeEnumRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//sections+=BinarySection*
		public Assignment getSectionsAssignment_4() { return cSectionsAssignment_4; }

		//BinarySection
		public RuleCall getSectionsBinarySectionParserRuleCall_4_0() { return cSectionsBinarySectionParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class BinarySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BinarySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cFunctionBinarySectionParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cConstantBinarySectionParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cReferenceBinarySectionParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStartXExpressionParserRuleCall_2_0 = (RuleCall)cStartAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BinarySection:
		//	(FunctionBinarySection | ConstantBinarySection | ReferenceBinarySection) "at" start=XExpression ";";
		public ParserRule getRule() { return rule; }

		//(FunctionBinarySection | ConstantBinarySection | ReferenceBinarySection) "at" start=XExpression ";"
		public Group getGroup() { return cGroup; }

		//FunctionBinarySection | ConstantBinarySection | ReferenceBinarySection
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//FunctionBinarySection
		public RuleCall getFunctionBinarySectionParserRuleCall_0_0() { return cFunctionBinarySectionParserRuleCall_0_0; }

		//ConstantBinarySection
		public RuleCall getConstantBinarySectionParserRuleCall_0_1() { return cConstantBinarySectionParserRuleCall_0_1; }

		//ReferenceBinarySection
		public RuleCall getReferenceBinarySectionParserRuleCall_0_2() { return cReferenceBinarySectionParserRuleCall_0_2; }

		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }

		//start=XExpression
		public Assignment getStartAssignment_2() { return cStartAssignment_2; }

		//XExpression
		public RuleCall getStartXExpressionParserRuleCall_2_0() { return cStartXExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class FunctionBinarySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionBinarySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperationOperationCrossReference_1_0 = (CrossReference)cOperationAssignment_1.eContents().get(0);
		private final RuleCall cOperationOperationQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cOperationOperationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMemwidthKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMemwidthAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMemwidthLITERALParserRuleCall_5_0 = (RuleCall)cMemwidthAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cMemsAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cMemsFunctionMemoryParserRuleCall_7_0_0 = (RuleCall)cMemsAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionBinarySection:
		//	"link" operation=[Operation|QualifiedName] "{" "memwidth" "=" memwidth=LITERAL ";" (mems+=FunctionMemory ";")+ "}";
		public ParserRule getRule() { return rule; }

		//"link" operation=[Operation|QualifiedName] "{" "memwidth" "=" memwidth=LITERAL ";" (mems+=FunctionMemory ";")+ "}"
		public Group getGroup() { return cGroup; }

		//"link"
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }

		//operation=[Operation|QualifiedName]
		public Assignment getOperationAssignment_1() { return cOperationAssignment_1; }

		//[Operation|QualifiedName]
		public CrossReference getOperationOperationCrossReference_1_0() { return cOperationOperationCrossReference_1_0; }

		//QualifiedName
		public RuleCall getOperationOperationQualifiedNameParserRuleCall_1_0_1() { return cOperationOperationQualifiedNameParserRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"memwidth"
		public Keyword getMemwidthKeyword_3() { return cMemwidthKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//memwidth=LITERAL
		public Assignment getMemwidthAssignment_5() { return cMemwidthAssignment_5; }

		//LITERAL
		public RuleCall getMemwidthLITERALParserRuleCall_5_0() { return cMemwidthLITERALParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//(mems+=FunctionMemory ";")+
		public Group getGroup_7() { return cGroup_7; }

		//mems+=FunctionMemory
		public Assignment getMemsAssignment_7_0() { return cMemsAssignment_7_0; }

		//FunctionMemory
		public RuleCall getMemsFunctionMemoryParserRuleCall_7_0_0() { return cMemsFunctionMemoryParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class FunctionMemoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionMemory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartLITERALParserRuleCall_1_0 = (RuleCall)cStartAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEndAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEndLITERALParserRuleCall_3_0 = (RuleCall)cEndAssignment_3.eContents().get(0);
		
		//FunctionMemory:
		//	"mem" start=LITERAL ".." end=LITERAL;
		public ParserRule getRule() { return rule; }

		//"mem" start=LITERAL ".." end=LITERAL
		public Group getGroup() { return cGroup; }

		//"mem"
		public Keyword getMemKeyword_0() { return cMemKeyword_0; }

		//start=LITERAL
		public Assignment getStartAssignment_1() { return cStartAssignment_1; }

		//LITERAL
		public RuleCall getStartLITERALParserRuleCall_1_0() { return cStartLITERALParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//end=LITERAL
		public Assignment getEndAssignment_3() { return cEndAssignment_3; }

		//LITERAL
		public RuleCall getEndLITERALParserRuleCall_3_0() { return cEndLITERALParserRuleCall_3_0; }
	}

	public class ConstantBinarySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantBinarySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDataXExpressionParserRuleCall_2_0_0 = (RuleCall)cDataAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ConstantBinarySection:
		//	"data" "{" (data+=XExpression ";")+ "}";
		public ParserRule getRule() { return rule; }

		//"data" "{" (data+=XExpression ";")+ "}"
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(data+=XExpression ";")+
		public Group getGroup_2() { return cGroup_2; }

		//data+=XExpression
		public Assignment getDataAssignment_2_0() { return cDataAssignment_2_0; }

		//XExpression
		public RuleCall getDataXExpressionParserRuleCall_2_0_0() { return cDataXExpressionParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ReferenceBinarySectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceBinarySection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIncAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cIncLinkedBinaryCrossReference_1_0 = (CrossReference)cIncAssignment_1.eContents().get(0);
		private final RuleCall cIncLinkedBinaryQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cIncLinkedBinaryCrossReference_1_0.eContents().get(1);
		
		//ReferenceBinarySection:
		//	"include" inc=[LinkedBinary|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"include" inc=[LinkedBinary|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//inc=[LinkedBinary|QualifiedName]
		public Assignment getIncAssignment_1() { return cIncAssignment_1; }

		//[LinkedBinary|QualifiedName]
		public CrossReference getIncLinkedBinaryCrossReference_1_0() { return cIncLinkedBinaryCrossReference_1_0; }

		//QualifiedName
		public RuleCall getIncLinkedBinaryQualifiedNameParserRuleCall_1_0_1() { return cIncLinkedBinaryQualifiedNameParserRuleCall_1_0_1; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final RuleCall cXExpression5ParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ********************
		// * INFIX SYNTAX
		// ********************** / XExpression:
		//	XExpression5;
		public ParserRule getRule() { return rule; }

		//XExpression5
		public RuleCall getXExpression5ParserRuleCall() { return cXExpression5ParserRuleCall; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXExpressionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXIsLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOperationCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXAddressOfVarParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXStructExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cXSizeOfExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//XPrimaryExpression:
		//	XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall |
		//	XAddressOfVar | XStructExpression | XSizeOfExpression;
		public ParserRule getRule() { return rule; }

		//XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall | XAddressOfVar
		//| XStructExpression | XSizeOfExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XExpressionLiteral
		public RuleCall getXExpressionLiteralParserRuleCall_0() { return cXExpressionLiteralParserRuleCall_0; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_1() { return cXParenthesizedExpressionParserRuleCall_1; }

		//XIsLiteralExpression
		public RuleCall getXIsLiteralExpressionParserRuleCall_2() { return cXIsLiteralExpressionParserRuleCall_2; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_4() { return cOperationCallParserRuleCall_4; }

		//XAddressOfVar
		public RuleCall getXAddressOfVarParserRuleCall_5() { return cXAddressOfVarParserRuleCall_5; }

		//XStructExpression
		public RuleCall getXStructExpressionParserRuleCall_6() { return cXStructExpressionParserRuleCall_6; }

		//XSizeOfExpression
		public RuleCall getXSizeOfExpressionParserRuleCall_7() { return cXSizeOfExpressionParserRuleCall_7; }
	}

	public class XSizeOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSizeOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeTypeCrossReference_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XSizeOfExpression:
		//	"sizeof" "(" type=[Type|QualifiedName] ")";
		public ParserRule getRule() { return rule; }

		//"sizeof" "(" type=[Type|QualifiedName] ")"
		public Group getGroup() { return cGroup; }

		//"sizeof"
		public Keyword getSizeofKeyword_0() { return cSizeofKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_2_0() { return cTypeTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeTypeQualifiedNameParserRuleCall_2_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XStructExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStructExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cTypeTypeCrossReference_0_0 = (CrossReference)cTypeAssignment_0.eContents().get(0);
		private final RuleCall cTypeTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cTypeTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesXExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesXExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//XStructExpression:
		//	type=[Type|QualifiedName] "{" values+=XExpression ("," values+=XExpression)* ","? "}";
		public ParserRule getRule() { return rule; }

		//type=[Type|QualifiedName] "{" values+=XExpression ("," values+=XExpression)* ","? "}"
		public Group getGroup() { return cGroup; }

		//type=[Type|QualifiedName]
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//[Type|QualifiedName]
		public CrossReference getTypeTypeCrossReference_0_0() { return cTypeTypeCrossReference_0_0; }

		//QualifiedName
		public RuleCall getTypeTypeQualifiedNameParserRuleCall_0_0_1() { return cTypeTypeQualifiedNameParserRuleCall_0_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//values+=XExpression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//XExpression
		public RuleCall getValuesXExpressionParserRuleCall_2_0() { return cValuesXExpressionParserRuleCall_2_0; }

		//("," values+=XExpression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=XExpression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//XExpression
		public RuleCall getValuesXExpressionParserRuleCall_3_1_0() { return cValuesXExpressionParserRuleCall_3_1_0; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class XExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUNARY_OPERATOREnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAXPrimaryExpressionParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//XExpression1:
		//	operator+=UNARY_OPERATOR* a=XPrimaryExpression;
		public ParserRule getRule() { return rule; }

		//operator+=UNARY_OPERATOR* a=XPrimaryExpression
		public Group getGroup() { return cGroup; }

		//operator+=UNARY_OPERATOR*
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//UNARY_OPERATOR
		public RuleCall getOperatorUNARY_OPERATOREnumRuleCall_0_0() { return cOperatorUNARY_OPERATOREnumRuleCall_0_0; }

		//a=XPrimaryExpression
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//XPrimaryExpression
		public RuleCall getAXPrimaryExpressionParserRuleCall_1_0() { return cAXPrimaryExpressionParserRuleCall_1_0; }
	}

	public class XExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression1ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression2ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression2:
		//	a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*
		public Group getGroup() { return cGroup; }

		//a=XExpression1
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression1
		public RuleCall getAXExpression1ParserRuleCall_0_0() { return cAXExpression1ParserRuleCall_0_0; }

		//(=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=MULTIPLICATIVE_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//MULTIPLICATIVE_OPERATOR
		public RuleCall getOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0() { return cOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression2
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression2
		public RuleCall getBXExpression2ParserRuleCall_1_1_0() { return cBXExpression2ParserRuleCall_1_1_0; }
	}

	public class XExpression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression2ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpADDITIVE_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression2ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression3:
		//	a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*
		public Group getGroup() { return cGroup; }

		//a=XExpression2
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression2
		public RuleCall getAXExpression2ParserRuleCall_0_0() { return cAXExpression2ParserRuleCall_0_0; }

		//(=> op+=ADDITIVE_OPERATOR b+=XExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=ADDITIVE_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ADDITIVE_OPERATOR
		public RuleCall getOpADDITIVE_OPERATOREnumRuleCall_1_0_0() { return cOpADDITIVE_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression2
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression2
		public RuleCall getBXExpression2ParserRuleCall_1_1_0() { return cBXExpression2ParserRuleCall_1_1_0; }
	}

	public class XExpression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression3ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpEQUALITY_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression3ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression4:
		//	a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*
		public Group getGroup() { return cGroup; }

		//a=XExpression3
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression3
		public RuleCall getAXExpression3ParserRuleCall_0_0() { return cAXExpression3ParserRuleCall_0_0; }

		//(=> op+=EQUALITY_OPERATOR b+=XExpression3)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=EQUALITY_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//EQUALITY_OPERATOR
		public RuleCall getOpEQUALITY_OPERATOREnumRuleCall_1_0_0() { return cOpEQUALITY_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression3
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression3
		public RuleCall getBXExpression3ParserRuleCall_1_1_0() { return cBXExpression3ParserRuleCall_1_1_0; }
	}

	public class XExpression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression4ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpBOOLEAN_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression4ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression5:
		//	a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*
		public Group getGroup() { return cGroup; }

		//a=XExpression4
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression4
		public RuleCall getAXExpression4ParserRuleCall_0_0() { return cAXExpression4ParserRuleCall_0_0; }

		//(=> op+=BOOLEAN_OPERATOR b+=XExpression4)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=BOOLEAN_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//BOOLEAN_OPERATOR
		public RuleCall getOpBOOLEAN_OPERATOREnumRuleCall_1_0_0() { return cOpBOOLEAN_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression4
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression4
		public RuleCall getBXExpression4ParserRuleCall_1_1_0() { return cBXExpression4ParserRuleCall_1_1_0; }
	}

	public class XExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLITERALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//XExpressionLiteral:
		//	value=LITERAL;
		public ParserRule getRule() { return rule; }

		//value=LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//LITERAL
		public RuleCall getValueLITERALParserRuleCall_0() { return cValueLITERALParserRuleCall_0; }
	}

	public class XTopLevelExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTopLevelExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXIfExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//XTopLevelExpression:
		//	XAssignment | XIfExpression;
		public ParserRule getRule() { return rule; }

		//XAssignment | XIfExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XAssignment
		public RuleCall getXAssignmentParserRuleCall_0() { return cXAssignmentParserRuleCall_0; }

		//XIfExpression
		public RuleCall getXIfExpressionParserRuleCall_1() { return cXIfExpressionParserRuleCall_1; }
	}

	public class XAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRefVariableReferenceParserRuleCall_0_0 = (RuleCall)cRefAssignment_0.eContents().get(0);
		private final RuleCall cOpSingleAssignParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueXExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XAssignment:
		//	ref=VariableReference OpSingleAssign value=XExpression ";";
		public ParserRule getRule() { return rule; }

		//ref=VariableReference OpSingleAssign value=XExpression ";"
		public Group getGroup() { return cGroup; }

		//ref=VariableReference
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }

		//VariableReference
		public RuleCall getRefVariableReferenceParserRuleCall_0_0() { return cRefVariableReferenceParserRuleCall_0_0; }

		//OpSingleAssign
		public RuleCall getOpSingleAssignParserRuleCall_1() { return cOpSingleAssignParserRuleCall_1; }

		//value=XExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_2_0() { return cValueXExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OpSingleAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//OpSingleAssign:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class XAddressOfVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAddressOfVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddrKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefVariableReferenceParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XAddressOfVar:
		//	"addr" "(" ref=VariableReference ")";
		public ParserRule getRule() { return rule; }

		//"addr" "(" ref=VariableReference ")"
		public Group getGroup() { return cGroup; }

		//"addr"
		public Keyword getAddrKeyword_0() { return cAddrKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=VariableReference
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//VariableReference
		public RuleCall getRefVariableReferenceParserRuleCall_2_0() { return cRefVariableReferenceParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XIsLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIsLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsliteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefVariableReferenceParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XIsLiteralExpression:
		//	"isliteral" "(" ref=VariableReference ")";
		public ParserRule getRule() { return rule; }

		//"isliteral" "(" ref=VariableReference ")"
		public Group getGroup() { return cGroup; }

		//"isliteral"
		public Keyword getIsliteralKeyword_0() { return cIsliteralKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=VariableReference
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//VariableReference
		public RuleCall getRefVariableReferenceParserRuleCall_2_0() { return cRefVariableReferenceParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XIfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIfAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIfXExpressionParserRuleCall_2_0 = (RuleCall)cIfAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenOperationBlockParserRuleCall_5_0 = (RuleCall)cThenAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cElseKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cElseAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cElseOperationBlockParserRuleCall_7_2_0 = (RuleCall)cElseAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//XIfExpression:
		//	"if" "(" if=XExpression ")" "{" then=OperationBlock "}" ("else" "{" else=OperationBlock "}")?;
		public ParserRule getRule() { return rule; }

		//"if" "(" if=XExpression ")" "{" then=OperationBlock "}" ("else" "{" else=OperationBlock "}")?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//if=XExpression
		public Assignment getIfAssignment_2() { return cIfAssignment_2; }

		//XExpression
		public RuleCall getIfXExpressionParserRuleCall_2_0() { return cIfXExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//then=OperationBlock
		public Assignment getThenAssignment_5() { return cThenAssignment_5; }

		//OperationBlock
		public RuleCall getThenOperationBlockParserRuleCall_5_0() { return cThenOperationBlockParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//(=> "else" "{" else=OperationBlock "}")?
		public Group getGroup_7() { return cGroup_7; }

		//=> "else"
		public Keyword getElseKeyword_7_0() { return cElseKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//else=OperationBlock
		public Assignment getElseAssignment_7_2() { return cElseAssignment_7_2; }

		//OperationBlock
		public RuleCall getElseOperationBlockParserRuleCall_7_2_0() { return cElseOperationBlockParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAXExpressionParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression:
		//	"(" a=XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" a=XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//a=XExpression
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//XExpression
		public RuleCall getAXExpressionParserRuleCall_1_0() { return cAXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class PrimitiveKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSIGNEDUnsignedKeyword_0_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNEDSignedKeyword_1_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREALRealKeyword_2_0 = (Keyword)cREALEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PrimitiveKind:
		//	UNSIGNED="unsigned" | SIGNED="signed" | REAL="real";
		public EnumRule getRule() { return rule; }

		//UNSIGNED="unsigned" | SIGNED="signed" | REAL="real"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_0() { return cUNSIGNEDEnumLiteralDeclaration_0; }

		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_0_0() { return cUNSIGNEDUnsignedKeyword_0_0; }

		//SIGNED="signed"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_1() { return cSIGNEDEnumLiteralDeclaration_1; }

		//"signed"
		public Keyword getSIGNEDSignedKeyword_1_0() { return cSIGNEDSignedKeyword_1_0; }

		//REAL="real"
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_2() { return cREALEnumLiteralDeclaration_2; }

		//"real"
		public Keyword getREALRealKeyword_2_0() { return cREALRealKeyword_2_0; }
	}

	public class ParameterKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYDefaultKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVARVarKeyword_1_0 = (Keyword)cVAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONSTConstKeyword_2_0 = (Keyword)cCONSTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ParameterKind:
		//	ANY="default" | VAR="var" | CONST="const";
		public EnumRule getRule() { return rule; }

		//ANY="default" | VAR="var" | CONST="const"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY="default"
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getANYDefaultKeyword_0_0() { return cANYDefaultKeyword_0_0; }

		//VAR="var"
		public EnumLiteralDeclaration getVAREnumLiteralDeclaration_1() { return cVAREnumLiteralDeclaration_1; }

		//"var"
		public Keyword getVARVarKeyword_1_0() { return cVARVarKeyword_1_0; }

		//CONST="const"
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_2() { return cCONSTEnumLiteralDeclaration_2; }

		//"const"
		public Keyword getCONSTConstKeyword_2_0() { return cCONSTConstKeyword_2_0; }
	}

	public class OperationRoleElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OperationRole");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSETEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSETSETKeyword_0_0 = (Keyword)cSETEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cADDADDKeyword_1_0 = (Keyword)cADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSUBTRACTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSUBTRACTSUBTRACTKeyword_2_0 = (Keyword)cSUBTRACTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cANDANDKeyword_3_0 = (Keyword)cANDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cORORKeyword_4_0 = (Keyword)cOREnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cXOREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cXORXORKeyword_5_0 = (Keyword)cXOREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cEQUALSEQUALSKeyword_6_0 = (Keyword)cEQUALSEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBRANCHEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBRANCHBRANCHKeyword_7_0 = (Keyword)cBRANCHEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cUC_GOTOEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cUC_GOTOUC_GOTOKeyword_8_0 = (Keyword)cUC_GOTOEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNOTNOTKeyword_9_0 = (Keyword)cNOTEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cINDIRECTIONEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cINDIRECTIONINDIRECTIONKeyword_10_0 = (Keyword)cINDIRECTIONEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cCLEAREnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cCLEARCLEARKeyword_11_0 = (Keyword)cCLEAREnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cINCREMENTEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cINCREMENTINCREMENTKeyword_12_0 = (Keyword)cINCREMENTEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cDECREMENTEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cDECREMENTDECREMENTKeyword_13_0 = (Keyword)cDECREMENTEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cDIVDIVKeyword_14_0 = (Keyword)cDIVEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cMODMODKeyword_15_0 = (Keyword)cMODEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cLTLTKeyword_16_0 = (Keyword)cLTEnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cLTELTEKeyword_17_0 = (Keyword)cLTEEnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cGTGTKeyword_18_0 = (Keyword)cGTEnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cGTEGTEKeyword_19_0 = (Keyword)cGTEEnumLiteralDeclaration_19.eContents().get(0);
		
		/// ****************
		// * OPERATORS
		// ****************** / enum OperationRole:
		//	SET | ADD | SUBTRACT | AND | OR | XOR | EQUALS | BRANCH | UC_GOTO | NOT | INDIRECTION | CLEAR | INCREMENT | DECREMENT
		//	| DIV | MOD | LT | LTE | GT | GTE;
		public EnumRule getRule() { return rule; }

		//SET | ADD | SUBTRACT | AND | OR | XOR | EQUALS | BRANCH | UC_GOTO | NOT | INDIRECTION | CLEAR | INCREMENT | DECREMENT |
		//DIV | MOD | LT | LTE | GT | GTE
		public Alternatives getAlternatives() { return cAlternatives; }

		//SET
		public EnumLiteralDeclaration getSETEnumLiteralDeclaration_0() { return cSETEnumLiteralDeclaration_0; }

		//"SET"
		public Keyword getSETSETKeyword_0_0() { return cSETSETKeyword_0_0; }

		//ADD
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_1() { return cADDEnumLiteralDeclaration_1; }

		//"ADD"
		public Keyword getADDADDKeyword_1_0() { return cADDADDKeyword_1_0; }

		//SUBTRACT
		public EnumLiteralDeclaration getSUBTRACTEnumLiteralDeclaration_2() { return cSUBTRACTEnumLiteralDeclaration_2; }

		//"SUBTRACT"
		public Keyword getSUBTRACTSUBTRACTKeyword_2_0() { return cSUBTRACTSUBTRACTKeyword_2_0; }

		//AND
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_3() { return cANDEnumLiteralDeclaration_3; }

		//"AND"
		public Keyword getANDANDKeyword_3_0() { return cANDANDKeyword_3_0; }

		//OR
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_4() { return cOREnumLiteralDeclaration_4; }

		//"OR"
		public Keyword getORORKeyword_4_0() { return cORORKeyword_4_0; }

		//XOR
		public EnumLiteralDeclaration getXOREnumLiteralDeclaration_5() { return cXOREnumLiteralDeclaration_5; }

		//"XOR"
		public Keyword getXORXORKeyword_5_0() { return cXORXORKeyword_5_0; }

		//EQUALS
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_6() { return cEQUALSEnumLiteralDeclaration_6; }

		//"EQUALS"
		public Keyword getEQUALSEQUALSKeyword_6_0() { return cEQUALSEQUALSKeyword_6_0; }

		//BRANCH
		public EnumLiteralDeclaration getBRANCHEnumLiteralDeclaration_7() { return cBRANCHEnumLiteralDeclaration_7; }

		//"BRANCH"
		public Keyword getBRANCHBRANCHKeyword_7_0() { return cBRANCHBRANCHKeyword_7_0; }

		//UC_GOTO
		public EnumLiteralDeclaration getUC_GOTOEnumLiteralDeclaration_8() { return cUC_GOTOEnumLiteralDeclaration_8; }

		//"UC_GOTO"
		public Keyword getUC_GOTOUC_GOTOKeyword_8_0() { return cUC_GOTOUC_GOTOKeyword_8_0; }

		//NOT
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_9() { return cNOTEnumLiteralDeclaration_9; }

		//"NOT"
		public Keyword getNOTNOTKeyword_9_0() { return cNOTNOTKeyword_9_0; }

		//INDIRECTION
		public EnumLiteralDeclaration getINDIRECTIONEnumLiteralDeclaration_10() { return cINDIRECTIONEnumLiteralDeclaration_10; }

		//"INDIRECTION"
		public Keyword getINDIRECTIONINDIRECTIONKeyword_10_0() { return cINDIRECTIONINDIRECTIONKeyword_10_0; }

		//CLEAR
		public EnumLiteralDeclaration getCLEAREnumLiteralDeclaration_11() { return cCLEAREnumLiteralDeclaration_11; }

		//"CLEAR"
		public Keyword getCLEARCLEARKeyword_11_0() { return cCLEARCLEARKeyword_11_0; }

		//INCREMENT
		public EnumLiteralDeclaration getINCREMENTEnumLiteralDeclaration_12() { return cINCREMENTEnumLiteralDeclaration_12; }

		//"INCREMENT"
		public Keyword getINCREMENTINCREMENTKeyword_12_0() { return cINCREMENTINCREMENTKeyword_12_0; }

		//DECREMENT
		public EnumLiteralDeclaration getDECREMENTEnumLiteralDeclaration_13() { return cDECREMENTEnumLiteralDeclaration_13; }

		//"DECREMENT"
		public Keyword getDECREMENTDECREMENTKeyword_13_0() { return cDECREMENTDECREMENTKeyword_13_0; }

		//DIV
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_14() { return cDIVEnumLiteralDeclaration_14; }

		//"DIV"
		public Keyword getDIVDIVKeyword_14_0() { return cDIVDIVKeyword_14_0; }

		//MOD
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_15() { return cMODEnumLiteralDeclaration_15; }

		//"MOD"
		public Keyword getMODMODKeyword_15_0() { return cMODMODKeyword_15_0; }

		//LT
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_16() { return cLTEnumLiteralDeclaration_16; }

		//"LT"
		public Keyword getLTLTKeyword_16_0() { return cLTLTKeyword_16_0; }

		//LTE
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_17() { return cLTEEnumLiteralDeclaration_17; }

		//"LTE"
		public Keyword getLTELTEKeyword_17_0() { return cLTELTEKeyword_17_0; }

		//GT
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_18() { return cGTEnumLiteralDeclaration_18; }

		//"GT"
		public Keyword getGTGTKeyword_18_0() { return cGTGTKeyword_18_0; }

		//GTE
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_19() { return cGTEEnumLiteralDeclaration_19; }

		//"GTE"
		public Keyword getGTEGTEKeyword_19_0() { return cGTEGTEKeyword_19_0; }
	}

	public class BinaryTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDEFAULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDEFAULTDefaultKeyword_0_0 = (Keyword)cDEFAULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHEXFILEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHEXFILEHexfileKeyword_1_0 = (Keyword)cHEXFILEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryType:
		//	DEFAULT="default" | HEXFILE="hexfile";
		public EnumRule getRule() { return rule; }

		//DEFAULT="default" | HEXFILE="hexfile"
		public Alternatives getAlternatives() { return cAlternatives; }

		//DEFAULT="default"
		public EnumLiteralDeclaration getDEFAULTEnumLiteralDeclaration_0() { return cDEFAULTEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getDEFAULTDefaultKeyword_0_0() { return cDEFAULTDefaultKeyword_0_0; }

		//HEXFILE="hexfile"
		public EnumLiteralDeclaration getHEXFILEEnumLiteralDeclaration_1() { return cHEXFILEEnumLiteralDeclaration_1; }

		//"hexfile"
		public Keyword getHEXFILEHexfileKeyword_1_0() { return cHEXFILEHexfileKeyword_1_0; }
	}

	public class UNARY_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UNARY_OPERATOR:
		//	MINUS="-" | NOT="!";
		public EnumRule getRule() { return rule; }

		//MINUS="-" | NOT="!"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }

		//NOT="!"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }

		//"!"
		public Keyword getNOTExclamationMarkKeyword_1_0() { return cNOTExclamationMarkKeyword_1_0; }
	}

	public class MULTIPLICATIVE_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLICATIVE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MULTIPLICATIVE_OPERATOR:
		//	MUL="*" | DIV="/" | MOD="%";
		public EnumRule getRule() { return rule; }

		//MUL="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }

		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}

	public class ADDITIVE_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ADDITIVE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ADDITIVE_OPERATOR:
		//	ADD="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//ADD="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}

	public class EQUALITY_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALITY_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQUALSExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOTEQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTELessThanSignEqualsSignKeyword_3_0 = (Keyword)cLTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTGreaterThanSignKeyword_4_0 = (Keyword)cGTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLTLessThanSignKeyword_5_0 = (Keyword)cLTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum EQUALITY_OPERATOR:
		//	EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<";
		public EnumRule getRule() { return rule; }

		//EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS="=="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_0_0() { return cEQUALSEqualsSignEqualsSignKeyword_0_0; }

		//NOTEQUALS="!="
		public EnumLiteralDeclaration getNOTEQUALSEnumLiteralDeclaration_1() { return cNOTEQUALSEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNOTEQUALSExclamationMarkEqualsSignKeyword_1_0() { return cNOTEQUALSExclamationMarkEqualsSignKeyword_1_0; }

		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_2() { return cGTEEnumLiteralDeclaration_2; }

		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_2_0() { return cGTEGreaterThanSignEqualsSignKeyword_2_0; }

		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_3() { return cLTEEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_3_0() { return cLTELessThanSignEqualsSignKeyword_3_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_4() { return cGTEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_4_0() { return cGTGreaterThanSignKeyword_4_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_5() { return cLTEnumLiteralDeclaration_5; }

		//"<"
		public Keyword getLTLessThanSignKeyword_5_0() { return cLTLessThanSignKeyword_5_0; }
	}

	public class BOOLEAN_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORVerticalLineVerticalLineKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAmpersandAmpersandKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BOOLEAN_OPERATOR:
		//	OR="||" | AND="&&";
		public EnumRule getRule() { return rule; }

		//OR="||" | AND="&&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_0_0() { return cORVerticalLineVerticalLineKeyword_0_0; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_1_0() { return cANDAmpersandAmpersandKeyword_1_0; }
	}
	
	private PackageElements pPackage;
	private TopLevelItemElements pTopLevelItem;
	private QualifiedNameElements pQualifiedName;
	private TerminalRule tHEXINT;
	private TerminalRule tBINARY;
	private LITERALElements pLITERAL;
	private TypeElements pType;
	private TypeDefElements pTypeDef;
	private DataTypeDefElements pDataTypeDef;
	private PrimitiveKindElements unknownRulePrimitiveKind;
	private ArrayTypeDefElements pArrayTypeDef;
	private StructTypeDefElements pStructTypeDef;
	private StructTypeDefMemberElements pStructTypeDefMember;
	private ConstantVariableElements pConstantVariable;
	private RegisterVariableElements pRegisterVariable;
	private CompileContextVariableElements pCompileContextVariable;
	private OperationStepElements pOperationStep;
	private LabelElements pLabel;
	private InstructionWordElements pInstructionWord;
	private WordSectionElements pWordSection;
	private LiteralValueElements pLiteralValue;
	private LabelReferenceElements pLabelReference;
	private VariableElements pVariable;
	private VariableReferenceElements pVariableReference;
	private VariableRefSectionElements pVariableRefSection;
	private ArrayRefElements pArrayRef;
	private StructRefElements pStructRef;
	private OperationCallElements pOperationCall;
	private OperationCallParameterElements pOperationCallParameter;
	private OperationElements pOperation;
	private OperationBlockElements pOperationBlock;
	private ParameterVariableElements pParameterVariable;
	private ParameterKindElements unknownRuleParameterKind;
	private OperationRoleElements unknownRuleOperationRole;
	private OperatorDefinitionElements pOperatorDefinition;
	private LinkedBinaryElements pLinkedBinary;
	private BinaryTypeElements unknownRuleBinaryType;
	private BinarySectionElements pBinarySection;
	private FunctionBinarySectionElements pFunctionBinarySection;
	private FunctionMemoryElements pFunctionMemory;
	private ConstantBinarySectionElements pConstantBinarySection;
	private ReferenceBinarySectionElements pReferenceBinarySection;
	private XExpressionElements pXExpression;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XSizeOfExpressionElements pXSizeOfExpression;
	private XStructExpressionElements pXStructExpression;
	private XExpression1Elements pXExpression1;
	private UNARY_OPERATORElements unknownRuleUNARY_OPERATOR;
	private XExpression2Elements pXExpression2;
	private MULTIPLICATIVE_OPERATORElements unknownRuleMULTIPLICATIVE_OPERATOR;
	private XExpression3Elements pXExpression3;
	private ADDITIVE_OPERATORElements unknownRuleADDITIVE_OPERATOR;
	private XExpression4Elements pXExpression4;
	private EQUALITY_OPERATORElements unknownRuleEQUALITY_OPERATOR;
	private XExpression5Elements pXExpression5;
	private BOOLEAN_OPERATORElements unknownRuleBOOLEAN_OPERATOR;
	private XExpressionLiteralElements pXExpressionLiteral;
	private XTopLevelExpressionElements pXTopLevelExpression;
	private XAssignmentElements pXAssignment;
	private OpSingleAssignElements pOpSingleAssign;
	private XAddressOfVarElements pXAddressOfVar;
	private XIsLiteralExpressionElements pXIsLiteralExpression;
	private XIfExpressionElements pXIfExpression;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ESyntaxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Package:
	//	"namespace" name=QualifiedName ";" ("import" uses+=[Package|QualifiedName] ";")* items+=TopLevelItem*;
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//TopLevelItem:
	//	Type | Operation | LinkedBinary | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | CompileContextVariable
	//	";" | OperatorDefinition;
	public TopLevelItemElements getTopLevelItemAccess() {
		return (pTopLevelItem != null) ? pTopLevelItem : (pTopLevelItem = new TopLevelItemElements());
	}
	
	public ParserRule getTopLevelItemRule() {
		return getTopLevelItemAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	/// ***********************
	// * LITERALS *
	// *********************** / terminal HEXINT returns ecore::EInt:
	//	"0x" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXINTRule() {
		return (tHEXINT != null) ? tHEXINT : (tHEXINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXINT"));
	} 

	//terminal BINARY returns ecore::EInt:
	//	"b" ("0" | "1")+;
	public TerminalRule getBINARYRule() {
		return (tBINARY != null) ? tBINARY : (tBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY"));
	} 

	//LITERAL:
	//	INT | HEXINT | BINARY;
	public LITERALElements getLITERALAccess() {
		return (pLITERAL != null) ? pLITERAL : (pLITERAL = new LITERALElements());
	}
	
	public ParserRule getLITERALRule() {
		return getLITERALAccess().getRule();
	}

	/// ***********************
	// * DATATYPES *
	// *********************** / Type:
	//	"type" name=ID "=" def=TypeDef;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeDef:
	//	DataTypeDef | ArrayTypeDef | StructTypeDef;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//DataTypeDef:
	//	kind=PrimitiveKind bits=INT "bits" ";";
	public DataTypeDefElements getDataTypeDefAccess() {
		return (pDataTypeDef != null) ? pDataTypeDef : (pDataTypeDef = new DataTypeDefElements());
	}
	
	public ParserRule getDataTypeDefRule() {
		return getDataTypeDefAccess().getRule();
	}

	//enum PrimitiveKind:
	//	UNSIGNED="unsigned" | SIGNED="signed" | REAL="real";
	public PrimitiveKindElements getPrimitiveKindAccess() {
		return (unknownRulePrimitiveKind != null) ? unknownRulePrimitiveKind : (unknownRulePrimitiveKind = new PrimitiveKindElements());
	}
	
	public EnumRule getPrimitiveKindRule() {
		return getPrimitiveKindAccess().getRule();
	}

	//ArrayTypeDef:
	//	type=[Type|QualifiedName] "[" length=XExpression "]" ";";
	public ArrayTypeDefElements getArrayTypeDefAccess() {
		return (pArrayTypeDef != null) ? pArrayTypeDef : (pArrayTypeDef = new ArrayTypeDefElements());
	}
	
	public ParserRule getArrayTypeDefRule() {
		return getArrayTypeDefAccess().getRule();
	}

	//StructTypeDef:
	//	{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}";
	public StructTypeDefElements getStructTypeDefAccess() {
		return (pStructTypeDef != null) ? pStructTypeDef : (pStructTypeDef = new StructTypeDefElements());
	}
	
	public ParserRule getStructTypeDefRule() {
		return getStructTypeDefAccess().getRule();
	}

	//StructTypeDefMember:
	//	type=[Type|QualifiedName] name=ID;
	public StructTypeDefMemberElements getStructTypeDefMemberAccess() {
		return (pStructTypeDefMember != null) ? pStructTypeDefMember : (pStructTypeDefMember = new StructTypeDefMemberElements());
	}
	
	public ParserRule getStructTypeDefMemberRule() {
		return getStructTypeDefMemberAccess().getRule();
	}

	/// *************************
	// * GLOBAL VARIABLES
	// ************************* / ConstantVariable returns Variable:
	//	{ConstantVariable} "const" type=[Type|QualifiedName] name=ID "=" value=XExpression;
	public ConstantVariableElements getConstantVariableAccess() {
		return (pConstantVariable != null) ? pConstantVariable : (pConstantVariable = new ConstantVariableElements());
	}
	
	public ParserRule getConstantVariableRule() {
		return getConstantVariableAccess().getRule();
	}

	//RegisterVariable returns Variable:
	//	{RegisterVariable} "reg" type=[Type|QualifiedName] name=ID ":" addr=LITERAL;
	public RegisterVariableElements getRegisterVariableAccess() {
		return (pRegisterVariable != null) ? pRegisterVariable : (pRegisterVariable = new RegisterVariableElements());
	}
	
	public ParserRule getRegisterVariableRule() {
		return getRegisterVariableAccess().getRule();
	}

	//CompileContextVariable returns Variable:
	//	{CompileContextVariable} "compilecontext" name=ID ("=" value=XExpression)?;
	public CompileContextVariableElements getCompileContextVariableAccess() {
		return (pCompileContextVariable != null) ? pCompileContextVariable : (pCompileContextVariable = new CompileContextVariableElements());
	}
	
	public ParserRule getCompileContextVariableRule() {
		return getCompileContextVariableAccess().getRule();
	}

	/// ***********************
	// * Operation *
	// *********************** / OperationStep:
	//	InstructionWord | Label | Variable ";" | OperationCall ";" | XTopLevelExpression;
	public OperationStepElements getOperationStepAccess() {
		return (pOperationStep != null) ? pOperationStep : (pOperationStep = new OperationStepElements());
	}
	
	public ParserRule getOperationStepRule() {
		return getOperationStepAccess().getRule();
	}

	//Label:
	//	"label" name=ID ";";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//InstructionWord:
	//	"<" sections+=WordSection+ ">";
	public InstructionWordElements getInstructionWordAccess() {
		return (pInstructionWord != null) ? pInstructionWord : (pInstructionWord = new InstructionWordElements());
	}
	
	public ParserRule getInstructionWordRule() {
		return getInstructionWordAccess().getRule();
	}

	//WordSection:
	//	(LiteralValue | VariableReference | LabelReference) ":" size=INT (":" shift=INT)?;
	public WordSectionElements getWordSectionAccess() {
		return (pWordSection != null) ? pWordSection : (pWordSection = new WordSectionElements());
	}
	
	public ParserRule getWordSectionRule() {
		return getWordSectionAccess().getRule();
	}

	//LiteralValue:
	//	value=LITERAL;
	public LiteralValueElements getLiteralValueAccess() {
		return (pLiteralValue != null) ? pLiteralValue : (pLiteralValue = new LiteralValueElements());
	}
	
	public ParserRule getLiteralValueRule() {
		return getLiteralValueAccess().getRule();
	}

	//LabelReference:
	//	"@" label=[Label];
	public LabelReferenceElements getLabelReferenceAccess() {
		return (pLabelReference != null) ? pLabelReference : (pLabelReference = new LabelReferenceElements());
	}
	
	public ParserRule getLabelReferenceRule() {
		return getLabelReferenceAccess().getRule();
	}

	//Variable:
	//	type=[Type|QualifiedName] name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableReference:
	//	var=[Variable] ref+=VariableRefSection*;
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//VariableRefSection:
	//	ArrayRef | StructRef;
	public VariableRefSectionElements getVariableRefSectionAccess() {
		return (pVariableRefSection != null) ? pVariableRefSection : (pVariableRefSection = new VariableRefSectionElements());
	}
	
	public ParserRule getVariableRefSectionRule() {
		return getVariableRefSectionAccess().getRule();
	}

	//ArrayRef:
	//	"[" v=XExpression "]";
	public ArrayRefElements getArrayRefAccess() {
		return (pArrayRef != null) ? pArrayRef : (pArrayRef = new ArrayRefElements());
	}
	
	public ParserRule getArrayRefRule() {
		return getArrayRefAccess().getRule();
	}

	//StructRef:
	//	"." ref=[StructTypeDefMember];
	public StructRefElements getStructRefAccess() {
		return (pStructRef != null) ? pStructRef : (pStructRef = new StructRefElements());
	}
	
	public ParserRule getStructRefRule() {
		return getStructRefAccess().getRule();
	}

	//OperationCall:
	//	operation=[Operation|QualifiedName] "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")";
	public OperationCallElements getOperationCallAccess() {
		return (pOperationCall != null) ? pOperationCall : (pOperationCall = new OperationCallElements());
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//OperationCallParameter:
	//	XExpression | LabelReference;
	public OperationCallParameterElements getOperationCallParameterAccess() {
		return (pOperationCallParameter != null) ? pOperationCallParameter : (pOperationCallParameter = new OperationCallParameterElements());
	}
	
	public ParserRule getOperationCallParameterRule() {
		return getOperationCallParameterAccess().getRule();
	}

	//Operation:
	//	returntype=[Type|QualifiedName]? name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{"
	//	block=OperationBlock "}" ("returns" return=XExpression ";")?;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//OperationBlock:
	//	{OperationBlock} steps+=OperationStep*;
	public OperationBlockElements getOperationBlockAccess() {
		return (pOperationBlock != null) ? pOperationBlock : (pOperationBlock = new OperationBlockElements());
	}
	
	public ParserRule getOperationBlockRule() {
		return getOperationBlockAccess().getRule();
	}

	//ParameterVariable:
	//	kind=ParameterKind? var=Variable ("=" default=LITERAL)?;
	public ParameterVariableElements getParameterVariableAccess() {
		return (pParameterVariable != null) ? pParameterVariable : (pParameterVariable = new ParameterVariableElements());
	}
	
	public ParserRule getParameterVariableRule() {
		return getParameterVariableAccess().getRule();
	}

	//enum ParameterKind:
	//	ANY="default" | VAR="var" | CONST="const";
	public ParameterKindElements getParameterKindAccess() {
		return (unknownRuleParameterKind != null) ? unknownRuleParameterKind : (unknownRuleParameterKind = new ParameterKindElements());
	}
	
	public EnumRule getParameterKindRule() {
		return getParameterKindAccess().getRule();
	}

	/// ****************
	// * OPERATORS
	// ****************** / enum OperationRole:
	//	SET | ADD | SUBTRACT | AND | OR | XOR | EQUALS | BRANCH | UC_GOTO | NOT | INDIRECTION | CLEAR | INCREMENT | DECREMENT
	//	| DIV | MOD | LT | LTE | GT | GTE;
	public OperationRoleElements getOperationRoleAccess() {
		return (unknownRuleOperationRole != null) ? unknownRuleOperationRole : (unknownRuleOperationRole = new OperationRoleElements());
	}
	
	public EnumRule getOperationRoleRule() {
		return getOperationRoleAccess().getRule();
	}

	//OperatorDefinition:
	//	"operator" role=OperationRole "{" candidate+=[Operation|QualifiedName] ("," candidate+=[Operation|QualifiedName])*
	//	","? "}";
	public OperatorDefinitionElements getOperatorDefinitionAccess() {
		return (pOperatorDefinition != null) ? pOperatorDefinition : (pOperatorDefinition = new OperatorDefinitionElements());
	}
	
	public ParserRule getOperatorDefinitionRule() {
		return getOperatorDefinitionAccess().getRule();
	}

	/// ********************
	// * BINARY and LINKING
	// ******************** / LinkedBinary:
	//	"binary" name=ID type=BinaryType? "{" sections+=BinarySection* "}";
	public LinkedBinaryElements getLinkedBinaryAccess() {
		return (pLinkedBinary != null) ? pLinkedBinary : (pLinkedBinary = new LinkedBinaryElements());
	}
	
	public ParserRule getLinkedBinaryRule() {
		return getLinkedBinaryAccess().getRule();
	}

	//enum BinaryType:
	//	DEFAULT="default" | HEXFILE="hexfile";
	public BinaryTypeElements getBinaryTypeAccess() {
		return (unknownRuleBinaryType != null) ? unknownRuleBinaryType : (unknownRuleBinaryType = new BinaryTypeElements());
	}
	
	public EnumRule getBinaryTypeRule() {
		return getBinaryTypeAccess().getRule();
	}

	//BinarySection:
	//	(FunctionBinarySection | ConstantBinarySection | ReferenceBinarySection) "at" start=XExpression ";";
	public BinarySectionElements getBinarySectionAccess() {
		return (pBinarySection != null) ? pBinarySection : (pBinarySection = new BinarySectionElements());
	}
	
	public ParserRule getBinarySectionRule() {
		return getBinarySectionAccess().getRule();
	}

	//FunctionBinarySection:
	//	"link" operation=[Operation|QualifiedName] "{" "memwidth" "=" memwidth=LITERAL ";" (mems+=FunctionMemory ";")+ "}";
	public FunctionBinarySectionElements getFunctionBinarySectionAccess() {
		return (pFunctionBinarySection != null) ? pFunctionBinarySection : (pFunctionBinarySection = new FunctionBinarySectionElements());
	}
	
	public ParserRule getFunctionBinarySectionRule() {
		return getFunctionBinarySectionAccess().getRule();
	}

	//FunctionMemory:
	//	"mem" start=LITERAL ".." end=LITERAL;
	public FunctionMemoryElements getFunctionMemoryAccess() {
		return (pFunctionMemory != null) ? pFunctionMemory : (pFunctionMemory = new FunctionMemoryElements());
	}
	
	public ParserRule getFunctionMemoryRule() {
		return getFunctionMemoryAccess().getRule();
	}

	//ConstantBinarySection:
	//	"data" "{" (data+=XExpression ";")+ "}";
	public ConstantBinarySectionElements getConstantBinarySectionAccess() {
		return (pConstantBinarySection != null) ? pConstantBinarySection : (pConstantBinarySection = new ConstantBinarySectionElements());
	}
	
	public ParserRule getConstantBinarySectionRule() {
		return getConstantBinarySectionAccess().getRule();
	}

	//ReferenceBinarySection:
	//	"include" inc=[LinkedBinary|QualifiedName];
	public ReferenceBinarySectionElements getReferenceBinarySectionAccess() {
		return (pReferenceBinarySection != null) ? pReferenceBinarySection : (pReferenceBinarySection = new ReferenceBinarySectionElements());
	}
	
	public ParserRule getReferenceBinarySectionRule() {
		return getReferenceBinarySectionAccess().getRule();
	}

	/// ********************
	// * INFIX SYNTAX
	// ********************** / XExpression:
	//	XExpression5;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XPrimaryExpression:
	//	XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall |
	//	XAddressOfVar | XStructExpression | XSizeOfExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XSizeOfExpression:
	//	"sizeof" "(" type=[Type|QualifiedName] ")";
	public XSizeOfExpressionElements getXSizeOfExpressionAccess() {
		return (pXSizeOfExpression != null) ? pXSizeOfExpression : (pXSizeOfExpression = new XSizeOfExpressionElements());
	}
	
	public ParserRule getXSizeOfExpressionRule() {
		return getXSizeOfExpressionAccess().getRule();
	}

	//XStructExpression:
	//	type=[Type|QualifiedName] "{" values+=XExpression ("," values+=XExpression)* ","? "}";
	public XStructExpressionElements getXStructExpressionAccess() {
		return (pXStructExpression != null) ? pXStructExpression : (pXStructExpression = new XStructExpressionElements());
	}
	
	public ParserRule getXStructExpressionRule() {
		return getXStructExpressionAccess().getRule();
	}

	//XExpression1:
	//	operator+=UNARY_OPERATOR* a=XPrimaryExpression;
	public XExpression1Elements getXExpression1Access() {
		return (pXExpression1 != null) ? pXExpression1 : (pXExpression1 = new XExpression1Elements());
	}
	
	public ParserRule getXExpression1Rule() {
		return getXExpression1Access().getRule();
	}

	//enum UNARY_OPERATOR:
	//	MINUS="-" | NOT="!";
	public UNARY_OPERATORElements getUNARY_OPERATORAccess() {
		return (unknownRuleUNARY_OPERATOR != null) ? unknownRuleUNARY_OPERATOR : (unknownRuleUNARY_OPERATOR = new UNARY_OPERATORElements());
	}
	
	public EnumRule getUNARY_OPERATORRule() {
		return getUNARY_OPERATORAccess().getRule();
	}

	//XExpression2:
	//	a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*;
	public XExpression2Elements getXExpression2Access() {
		return (pXExpression2 != null) ? pXExpression2 : (pXExpression2 = new XExpression2Elements());
	}
	
	public ParserRule getXExpression2Rule() {
		return getXExpression2Access().getRule();
	}

	//enum MULTIPLICATIVE_OPERATOR:
	//	MUL="*" | DIV="/" | MOD="%";
	public MULTIPLICATIVE_OPERATORElements getMULTIPLICATIVE_OPERATORAccess() {
		return (unknownRuleMULTIPLICATIVE_OPERATOR != null) ? unknownRuleMULTIPLICATIVE_OPERATOR : (unknownRuleMULTIPLICATIVE_OPERATOR = new MULTIPLICATIVE_OPERATORElements());
	}
	
	public EnumRule getMULTIPLICATIVE_OPERATORRule() {
		return getMULTIPLICATIVE_OPERATORAccess().getRule();
	}

	//XExpression3:
	//	a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*;
	public XExpression3Elements getXExpression3Access() {
		return (pXExpression3 != null) ? pXExpression3 : (pXExpression3 = new XExpression3Elements());
	}
	
	public ParserRule getXExpression3Rule() {
		return getXExpression3Access().getRule();
	}

	//enum ADDITIVE_OPERATOR:
	//	ADD="+" | MINUS="-";
	public ADDITIVE_OPERATORElements getADDITIVE_OPERATORAccess() {
		return (unknownRuleADDITIVE_OPERATOR != null) ? unknownRuleADDITIVE_OPERATOR : (unknownRuleADDITIVE_OPERATOR = new ADDITIVE_OPERATORElements());
	}
	
	public EnumRule getADDITIVE_OPERATORRule() {
		return getADDITIVE_OPERATORAccess().getRule();
	}

	//XExpression4:
	//	a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*;
	public XExpression4Elements getXExpression4Access() {
		return (pXExpression4 != null) ? pXExpression4 : (pXExpression4 = new XExpression4Elements());
	}
	
	public ParserRule getXExpression4Rule() {
		return getXExpression4Access().getRule();
	}

	//enum EQUALITY_OPERATOR:
	//	EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<";
	public EQUALITY_OPERATORElements getEQUALITY_OPERATORAccess() {
		return (unknownRuleEQUALITY_OPERATOR != null) ? unknownRuleEQUALITY_OPERATOR : (unknownRuleEQUALITY_OPERATOR = new EQUALITY_OPERATORElements());
	}
	
	public EnumRule getEQUALITY_OPERATORRule() {
		return getEQUALITY_OPERATORAccess().getRule();
	}

	//XExpression5:
	//	a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*;
	public XExpression5Elements getXExpression5Access() {
		return (pXExpression5 != null) ? pXExpression5 : (pXExpression5 = new XExpression5Elements());
	}
	
	public ParserRule getXExpression5Rule() {
		return getXExpression5Access().getRule();
	}

	//enum BOOLEAN_OPERATOR:
	//	OR="||" | AND="&&";
	public BOOLEAN_OPERATORElements getBOOLEAN_OPERATORAccess() {
		return (unknownRuleBOOLEAN_OPERATOR != null) ? unknownRuleBOOLEAN_OPERATOR : (unknownRuleBOOLEAN_OPERATOR = new BOOLEAN_OPERATORElements());
	}
	
	public EnumRule getBOOLEAN_OPERATORRule() {
		return getBOOLEAN_OPERATORAccess().getRule();
	}

	//XExpressionLiteral:
	//	value=LITERAL;
	public XExpressionLiteralElements getXExpressionLiteralAccess() {
		return (pXExpressionLiteral != null) ? pXExpressionLiteral : (pXExpressionLiteral = new XExpressionLiteralElements());
	}
	
	public ParserRule getXExpressionLiteralRule() {
		return getXExpressionLiteralAccess().getRule();
	}

	//XTopLevelExpression:
	//	XAssignment | XIfExpression;
	public XTopLevelExpressionElements getXTopLevelExpressionAccess() {
		return (pXTopLevelExpression != null) ? pXTopLevelExpression : (pXTopLevelExpression = new XTopLevelExpressionElements());
	}
	
	public ParserRule getXTopLevelExpressionRule() {
		return getXTopLevelExpressionAccess().getRule();
	}

	//XAssignment:
	//	ref=VariableReference OpSingleAssign value=XExpression ";";
	public XAssignmentElements getXAssignmentAccess() {
		return (pXAssignment != null) ? pXAssignment : (pXAssignment = new XAssignmentElements());
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (pOpSingleAssign != null) ? pOpSingleAssign : (pOpSingleAssign = new OpSingleAssignElements());
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XAddressOfVar:
	//	"addr" "(" ref=VariableReference ")";
	public XAddressOfVarElements getXAddressOfVarAccess() {
		return (pXAddressOfVar != null) ? pXAddressOfVar : (pXAddressOfVar = new XAddressOfVarElements());
	}
	
	public ParserRule getXAddressOfVarRule() {
		return getXAddressOfVarAccess().getRule();
	}

	//XIsLiteralExpression:
	//	"isliteral" "(" ref=VariableReference ")";
	public XIsLiteralExpressionElements getXIsLiteralExpressionAccess() {
		return (pXIsLiteralExpression != null) ? pXIsLiteralExpression : (pXIsLiteralExpression = new XIsLiteralExpressionElements());
	}
	
	public ParserRule getXIsLiteralExpressionRule() {
		return getXIsLiteralExpressionAccess().getRule();
	}

	//XIfExpression:
	//	"if" "(" if=XExpression ")" "{" then=OperationBlock "}" ("else" "{" else=OperationBlock "}")?;
	public XIfExpressionElements getXIfExpressionAccess() {
		return (pXIfExpression != null) ? pXIfExpression : (pXIfExpression = new XIfExpressionElements());
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XParenthesizedExpression:
	//	"(" a=XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
