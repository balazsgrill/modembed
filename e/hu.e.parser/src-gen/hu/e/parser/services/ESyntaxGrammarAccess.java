/*
* generated by Xtext
*/

package hu.e.parser.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ESyntaxGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final RuleCall cLibraryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//CompilationUnit: / *Module |* / / * | LinkedBinary / *| Interface* / Library;
		public ParserRule getRule() { return rule; }

		/// *Module |* / / * | LinkedBinary / *| Interface* / Library
		public RuleCall getLibraryParserRuleCall() { return cLibraryParserRuleCall; }
	}

	public class LibraryNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LibraryName:
		//
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cLibraryNameParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//QualifiedName:
		//
		//	(LibraryName "::")? ID;
		public ParserRule getRule() { return rule; }

		//(LibraryName "::")? ID
		public Group getGroup() { return cGroup; }

		//(LibraryName "::")?
		public Group getGroup_0() { return cGroup_0; }

		//LibraryName
		public RuleCall getLibraryNameParserRuleCall_0_0() { return cLibraryNameParserRuleCall_0_0; }

		//"::"
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LITERAL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBINARYTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cREALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LITERAL:
		//
		//	INT | HEXINT | BINARY | REAL;
		public ParserRule getRule() { return rule; }

		//INT | HEXINT | BINARY | REAL
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//HEXINT
		public RuleCall getHEXINTTerminalRuleCall_1() { return cHEXINTTerminalRuleCall_1; }

		//BINARY
		public RuleCall getBINARYTerminalRuleCall_2() { return cBINARYTerminalRuleCall_2; }

		//REAL
		public RuleCall getREALTerminalRuleCall_3() { return cREALTerminalRuleCall_3; }
	}

	public class AnnotationDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnotationDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// **********************
		// * Annotations
		// *********************** / AnnotationDefinition:
		//
		//	"annotation" name=ID;
		public ParserRule getRule() { return rule; }

		//"annotation" name=ID
		public Group getGroup() { return cGroup; }

		//"annotation"
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDefinitionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDefinitionIDTerminalRuleCall_1_0 = (RuleCall)cDefinitionAssignment_1.eContents().get(0);
		
		//Annotation:
		//
		//	"#" definition=ID;
		public ParserRule getRule() { return rule; }

		//"#" definition=ID
		public Group getGroup() { return cGroup; }

		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }

		//definition=ID
		public Assignment getDefinitionAssignment_1() { return cDefinitionAssignment_1; }

		//ID
		public RuleCall getDefinitionIDTerminalRuleCall_1_0() { return cDefinitionIDTerminalRuleCall_1_0; }
	}

	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameLibraryNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cUseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUseAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUseLibraryNameParserRuleCall_3_1_0 = (RuleCall)cUseAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cItemsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemsLibraryItemParserRuleCall_4_0 = (RuleCall)cItemsAssignment_4.eContents().get(0);
		
		/// ***********************
		// * LIBRARY *
		// *********************** / Library:
		//
		//	"library" name=LibraryName
		//
		//	//('overrides' overrides+=[Library|QualifiedName] (',' overrides+=[Library|QualifiedName])*)?
		// ";" ("use"
		//
		//	use+=LibraryName ";")* items+=LibraryItem*;
		public ParserRule getRule() { return rule; }

		//"library" name=LibraryName
		//
		////('overrides' overrides+=[Library|QualifiedName] (',' overrides+=[Library|QualifiedName])*)?
		// ";" ("use"
		//
		//use+=LibraryName ";")* items+=LibraryItem*
		public Group getGroup() { return cGroup; }

		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }

		//name=LibraryName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//LibraryName
		public RuleCall getNameLibraryNameParserRuleCall_1_0() { return cNameLibraryNameParserRuleCall_1_0; }

		////('overrides' overrides+=[Library|QualifiedName] (',' overrides+=[Library|QualifiedName])*)?
		// ";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//("use" use+=LibraryName ";")*
		public Group getGroup_3() { return cGroup_3; }

		//"use"
		public Keyword getUseKeyword_3_0() { return cUseKeyword_3_0; }

		//use+=LibraryName
		public Assignment getUseAssignment_3_1() { return cUseAssignment_3_1; }

		//LibraryName
		public RuleCall getUseLibraryNameParserRuleCall_3_1_0() { return cUseLibraryNameParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }

		//items+=LibraryItem*
		public Assignment getItemsAssignment_4() { return cItemsAssignment_4; }

		//LibraryItem
		public RuleCall getItemsLibraryItemParserRuleCall_4_0() { return cItemsLibraryItemParserRuleCall_4_0; }
	}

	public class LibraryItemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryItem");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cVariableParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cConstantVariableParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cRegisterVariableParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cAnnotationDefinitionParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//LibraryItem:
		//
		//	Type | Operation | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | AnnotationDefinition ";";
		public ParserRule getRule() { return rule; }

		//Type | Operation | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | AnnotationDefinition ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//Operation
		public RuleCall getOperationParserRuleCall_1() { return cOperationParserRuleCall_1; }

		//Variable ";"
		public Group getGroup_2() { return cGroup_2; }

		//Variable
		public RuleCall getVariableParserRuleCall_2_0() { return cVariableParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//ConstantVariable ";"
		public Group getGroup_3() { return cGroup_3; }

		//ConstantVariable
		public RuleCall getConstantVariableParserRuleCall_3_0() { return cConstantVariableParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }

		//RegisterVariable ";"
		public Group getGroup_4() { return cGroup_4; }

		//RegisterVariable
		public RuleCall getRegisterVariableParserRuleCall_4_0() { return cRegisterVariableParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }

		//AnnotationDefinition ";"
		public Group getGroup_5() { return cGroup_5; }

		//AnnotationDefinition
		public RuleCall getAnnotationDefinitionParserRuleCall_5_0() { return cAnnotationDefinitionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_5_1() { return cSemicolonKeyword_5_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDefTypeDefParserRuleCall_3_0 = (RuleCall)cDefAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// ***********************
		// * DATATYPES *
		// *********************** / Type:
		//
		//	"type" name=ID "=" def=TypeDef ";";
		public ParserRule getRule() { return rule; }

		//"type" name=ID "=" def=TypeDef ";"
		public Group getGroup() { return cGroup; }

		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//def=TypeDef
		public Assignment getDefAssignment_3() { return cDefAssignment_3; }

		//TypeDef
		public RuleCall getDefTypeDefParserRuleCall_3_0() { return cDefTypeDefParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPointerTypeDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayTypeDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRefTypeDefParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//TypeDef:
		//
		//	DataTypeDef | StructTypeDef | PointerTypeDef | ArrayTypeDef | RefTypeDef;
		public ParserRule getRule() { return rule; }

		//DataTypeDef | StructTypeDef | PointerTypeDef | ArrayTypeDef | RefTypeDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataTypeDef
		public RuleCall getDataTypeDefParserRuleCall_0() { return cDataTypeDefParserRuleCall_0; }

		//StructTypeDef
		public RuleCall getStructTypeDefParserRuleCall_1() { return cStructTypeDefParserRuleCall_1; }

		//PointerTypeDef
		public RuleCall getPointerTypeDefParserRuleCall_2() { return cPointerTypeDefParserRuleCall_2; }

		//ArrayTypeDef
		public RuleCall getArrayTypeDefParserRuleCall_3() { return cArrayTypeDefParserRuleCall_3; }

		//RefTypeDef
		public RuleCall getRefTypeDefParserRuleCall_4() { return cRefTypeDefParserRuleCall_4; }
	}

	public class PointerTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PointerTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPointerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDefTypeDefParserRuleCall_2_0 = (RuleCall)cDefAssignment_2.eContents().get(0);
		
		//PointerTypeDef:
		//
		//	"pointer" "of" def=TypeDef;
		public ParserRule getRule() { return rule; }

		//"pointer" "of" def=TypeDef
		public Group getGroup() { return cGroup; }

		//"pointer"
		public Keyword getPointerKeyword_0() { return cPointerKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//def=TypeDef
		public Assignment getDefAssignment_2() { return cDefAssignment_2; }

		//TypeDef
		public RuleCall getDefTypeDefParserRuleCall_2_0() { return cDefTypeDefParserRuleCall_2_0; }
	}

	public class ArrayTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cArrayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSizeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSizeXExpressionParserRuleCall_2_0 = (RuleCall)cSizeAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDefTypeDefParserRuleCall_5_0 = (RuleCall)cDefAssignment_5.eContents().get(0);
		
		//ArrayTypeDef:
		//
		//	"array" "[" size=XExpression "]" "of" def=TypeDef;
		public ParserRule getRule() { return rule; }

		//"array" "[" size=XExpression "]" "of" def=TypeDef
		public Group getGroup() { return cGroup; }

		//"array"
		public Keyword getArrayKeyword_0() { return cArrayKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//size=XExpression
		public Assignment getSizeAssignment_2() { return cSizeAssignment_2; }

		//XExpression
		public RuleCall getSizeXExpressionParserRuleCall_2_0() { return cSizeXExpressionParserRuleCall_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//def=TypeDef
		public Assignment getDefAssignment_5() { return cDefAssignment_5; }

		//TypeDef
		public RuleCall getDefTypeDefParserRuleCall_5_0() { return cDefTypeDefParserRuleCall_5_0; }
	}

	public class RefTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RefTypeDef");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeQualifiedNameParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		//RefTypeDef:
		//
		//	type=QualifiedName;
		public ParserRule getRule() { return rule; }

		//type=QualifiedName
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//QualifiedName
		public RuleCall getTypeQualifiedNameParserRuleCall_0() { return cTypeQualifiedNameParserRuleCall_0; }
	}

	public class DataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeDef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerDataTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFixedDataTypeDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataTypeDef:
		//
		//	IntegerDataTypeDef | //| FloatDataTypeDef
		// FixedDataTypeDef;
		public ParserRule getRule() { return rule; }

		//IntegerDataTypeDef | //| FloatDataTypeDef
		// FixedDataTypeDef
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerDataTypeDef
		public RuleCall getIntegerDataTypeDefParserRuleCall_0() { return cIntegerDataTypeDefParserRuleCall_0; }

		////| FloatDataTypeDef
		// FixedDataTypeDef
		public RuleCall getFixedDataTypeDefParserRuleCall_1() { return cFixedDataTypeDefParserRuleCall_1; }
	}

	public class FixedDataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FixedDataTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitsINTTerminalRuleCall_1_0 = (RuleCall)cBitsAssignment_1.eContents().get(0);
		private final Keyword cBitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cScaleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScaleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScaleREALTerminalRuleCall_5_0 = (RuleCall)cScaleAssignment_5.eContents().get(0);
		
		////FloatDataTypeDef:
		// //	'float' bits=INT 'bits'
		// //;
		// FixedDataTypeDef:
		//
		//	"fixed" bits=INT "bits" "scale" "=" scale=REAL;
		public ParserRule getRule() { return rule; }

		//"fixed" bits=INT "bits" "scale" "=" scale=REAL
		public Group getGroup() { return cGroup; }

		//"fixed"
		public Keyword getFixedKeyword_0() { return cFixedKeyword_0; }

		//bits=INT
		public Assignment getBitsAssignment_1() { return cBitsAssignment_1; }

		//INT
		public RuleCall getBitsINTTerminalRuleCall_1_0() { return cBitsINTTerminalRuleCall_1_0; }

		//"bits"
		public Keyword getBitsKeyword_2() { return cBitsKeyword_2; }

		//"scale"
		public Keyword getScaleKeyword_3() { return cScaleKeyword_3; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//scale=REAL
		public Assignment getScaleAssignment_5() { return cScaleAssignment_5; }

		//REAL
		public RuleCall getScaleREALTerminalRuleCall_5_0() { return cScaleREALTerminalRuleCall_5_0; }
	}

	public class IntegerDataTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerDataTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKindAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKindIntegerKindEnumRuleCall_0_0 = (RuleCall)cKindAssignment_0.eContents().get(0);
		private final Assignment cBitsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBitsINTTerminalRuleCall_1_0 = (RuleCall)cBitsAssignment_1.eContents().get(0);
		private final Keyword cBitsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//IntegerDataTypeDef:
		//
		//	kind=IntegerKind bits=INT "bits";
		public ParserRule getRule() { return rule; }

		//kind=IntegerKind bits=INT "bits"
		public Group getGroup() { return cGroup; }

		//kind=IntegerKind
		public Assignment getKindAssignment_0() { return cKindAssignment_0; }

		//IntegerKind
		public RuleCall getKindIntegerKindEnumRuleCall_0_0() { return cKindIntegerKindEnumRuleCall_0_0; }

		//bits=INT
		public Assignment getBitsAssignment_1() { return cBitsAssignment_1; }

		//INT
		public RuleCall getBitsINTTerminalRuleCall_1_0() { return cBitsINTTerminalRuleCall_1_0; }

		//"bits"
		public Keyword getBitsKeyword_2() { return cBitsKeyword_2; }
	}

	public class StructTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMembersStructTypeDefMemberParserRuleCall_3_0 = (RuleCall)cMembersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMembersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMembersStructTypeDefMemberParserRuleCall_4_1_0 = (RuleCall)cMembersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructTypeDef:
		//
		//	{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}";
		public ParserRule getRule() { return rule; }

		//{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}"
		public Group getGroup() { return cGroup; }

		//{StructTypeDef}
		public Action getStructTypeDefAction_0() { return cStructTypeDefAction_0; }

		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//members+=StructTypeDefMember
		public Assignment getMembersAssignment_3() { return cMembersAssignment_3; }

		//StructTypeDefMember
		public RuleCall getMembersStructTypeDefMemberParserRuleCall_3_0() { return cMembersStructTypeDefMemberParserRuleCall_3_0; }

		//("," members+=StructTypeDefMember)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//members+=StructTypeDefMember
		public Assignment getMembersAssignment_4_1() { return cMembersAssignment_4_1; }

		//StructTypeDefMember
		public RuleCall getMembersStructTypeDefMemberParserRuleCall_4_1_0() { return cMembersStructTypeDefMemberParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class StructTypeDefMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructTypeDefMember");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructTypeDefMemberAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeDefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//StructTypeDefMember returns Variable:
		//
		//	{StructTypeDefMember} type=TypeDef name=ID;
		public ParserRule getRule() { return rule; }

		//{StructTypeDefMember} type=TypeDef name=ID
		public Group getGroup() { return cGroup; }

		//{StructTypeDefMember}
		public Action getStructTypeDefMemberAction_0() { return cStructTypeDefMemberAction_0; }

		//type=TypeDef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_1_0() { return cTypeTypeDefParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ConstantVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstantVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstantVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cConstKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeDefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueXExpressionParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		
		/// *************************
		// * GLOBAL VARIABLES
		// ************************* / ConstantVariable returns Variable:
		//
		//	{ConstantVariable} "const" type=TypeDef name=ID "=" value=XExpression;
		public ParserRule getRule() { return rule; }

		//{ConstantVariable} "const" type=TypeDef name=ID "=" value=XExpression
		public Group getGroup() { return cGroup; }

		//{ConstantVariable}
		public Action getConstantVariableAction_0() { return cConstantVariableAction_0; }

		//"const"
		public Keyword getConstKeyword_1() { return cConstKeyword_1; }

		//type=TypeDef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_2_0() { return cTypeTypeDefParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=XExpression
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//XExpression
		public RuleCall getValueXExpressionParserRuleCall_5_0() { return cValueXExpressionParserRuleCall_5_0; }
	}

	public class RegisterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RegisterVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRegisterVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRegKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeDefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAddrAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddrXExpressionParserRuleCall_5_0 = (RuleCall)cAddrAssignment_5.eContents().get(0);
		
		//RegisterVariable returns Variable:
		//
		//	{RegisterVariable} "reg" type=TypeDef name=ID ":" addr=XExpression;
		public ParserRule getRule() { return rule; }

		//{RegisterVariable} "reg" type=TypeDef name=ID ":" addr=XExpression
		public Group getGroup() { return cGroup; }

		//{RegisterVariable}
		public Action getRegisterVariableAction_0() { return cRegisterVariableAction_0; }

		//"reg"
		public Keyword getRegKeyword_1() { return cRegKeyword_1; }

		//type=TypeDef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_2_0() { return cTypeTypeDefParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//addr=XExpression
		public Assignment getAddrAssignment_5() { return cAddrAssignment_5; }

		//XExpression
		public RuleCall getAddrXExpressionParserRuleCall_5_0() { return cAddrXExpressionParserRuleCall_5_0; }
	}

	public class OperationStepElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationStep");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVariableParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cXTopLevelExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// ***********************
		// * Operation *
		// *********************** / OperationStep:
		//
		//	Label | Variable ";" | XTopLevelExpression;
		public ParserRule getRule() { return rule; }

		//Label | Variable ";" | XTopLevelExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }

		//Variable ";"
		public Group getGroup_1() { return cGroup_1; }

		//Variable
		public RuleCall getVariableParserRuleCall_1_0() { return cVariableParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//XTopLevelExpression
		public RuleCall getXTopLevelExpressionParserRuleCall_2() { return cXTopLevelExpressionParserRuleCall_2; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLabelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Label returns Variable:
		//
		//	{Label} "label" name=ID ";";
		public ParserRule getRule() { return rule; }

		//{Label} "label" name=ID ";"
		public Group getGroup() { return cGroup; }

		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }

		//"label"
		public Keyword getLabelKeyword_1() { return cLabelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeDefParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Variable:
		//
		//	type=TypeDef name=ID;
		public ParserRule getRule() { return rule; }

		//type=TypeDef name=ID
		public Group getGroup() { return cGroup; }

		//type=TypeDef
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_0_0() { return cTypeTypeDefParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableReference");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVarQualifiedNameParserRuleCall_0 = (RuleCall)cVarAssignment.eContents().get(0);
		
		//VariableReference:
		//
		//	var=QualifiedName;
		public ParserRule getRule() { return rule; }

		//var=QualifiedName
		public Assignment getVarAssignment() { return cVarAssignment; }

		//QualifiedName
		public RuleCall getVarQualifiedNameParserRuleCall_0() { return cVarQualifiedNameParserRuleCall_0; }
	}

	public class OperationCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationQualifiedNameParserRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsOperationCallParameterParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsOperationCallParameterParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OperationCall:
		//
		//	operation=QualifiedName "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")";
		public ParserRule getRule() { return rule; }

		//operation=QualifiedName "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")"
		public Group getGroup() { return cGroup; }

		//operation=QualifiedName
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }

		//QualifiedName
		public RuleCall getOperationQualifiedNameParserRuleCall_0_0() { return cOperationQualifiedNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=OperationCallParameter ("," params+=OperationCallParameter)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=OperationCallParameter
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//OperationCallParameter
		public RuleCall getParamsOperationCallParameterParserRuleCall_2_0_0() { return cParamsOperationCallParameterParserRuleCall_2_0_0; }

		//("," params+=OperationCallParameter)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=OperationCallParameter
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//OperationCallParameter
		public RuleCall getParamsOperationCallParameterParserRuleCall_2_1_1_0() { return cParamsOperationCallParameterParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OperationCallParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationCallParameter");
		private final RuleCall cXExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OperationCallParameter:
		//
		//	XExpression;
		public ParserRule getRule() { return rule; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall() { return cXExpressionParserRuleCall; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cParamsParameterVariableParserRuleCall_3_0_0 = (RuleCall)cParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cParamsParameterVariableParserRuleCall_3_1_1_0 = (RuleCall)cParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBlockAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBlockOperationBlockParserRuleCall_6_0 = (RuleCall)cBlockAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cReturnsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Alternatives cAlternatives_8_1 = (Alternatives)cGroup_8.eContents().get(1);
		private final Assignment cReturnAssignment_8_1_0 = (Assignment)cAlternatives_8_1.eContents().get(0);
		private final RuleCall cReturnXExpressionParserRuleCall_8_1_0_0 = (RuleCall)cReturnAssignment_8_1_0.eContents().get(0);
		private final Assignment cReturnvarAssignment_8_1_1 = (Assignment)cAlternatives_8_1.eContents().get(1);
		private final RuleCall cReturnvarVariableParserRuleCall_8_1_1_0 = (RuleCall)cReturnvarAssignment_8_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		
		//Operation returns OperationSignature:
		//
		//	{Operation} name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{" block=OperationBlock
		//
		//	"}" ("returns" (return=XExpression | returnvar=Variable) ";")?;
		public ParserRule getRule() { return rule; }

		//{Operation} name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{" block=OperationBlock "}"
		//
		//("returns" (return=XExpression | returnvar=Variable) ";")?
		public Group getGroup() { return cGroup; }

		//{Operation}
		public Action getOperationAction_0() { return cOperationAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(params+=ParameterVariable ("," params+=ParameterVariable)*)?
		public Group getGroup_3() { return cGroup_3; }

		//params+=ParameterVariable
		public Assignment getParamsAssignment_3_0() { return cParamsAssignment_3_0; }

		//ParameterVariable
		public RuleCall getParamsParameterVariableParserRuleCall_3_0_0() { return cParamsParameterVariableParserRuleCall_3_0_0; }

		//("," params+=ParameterVariable)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//params+=ParameterVariable
		public Assignment getParamsAssignment_3_1_1() { return cParamsAssignment_3_1_1; }

		//ParameterVariable
		public RuleCall getParamsParameterVariableParserRuleCall_3_1_1_0() { return cParamsParameterVariableParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//block=OperationBlock
		public Assignment getBlockAssignment_6() { return cBlockAssignment_6; }

		//OperationBlock
		public RuleCall getBlockOperationBlockParserRuleCall_6_0() { return cBlockOperationBlockParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("returns" (return=XExpression | returnvar=Variable) ";")?
		public Group getGroup_8() { return cGroup_8; }

		//"returns"
		public Keyword getReturnsKeyword_8_0() { return cReturnsKeyword_8_0; }

		//return=XExpression | returnvar=Variable
		public Alternatives getAlternatives_8_1() { return cAlternatives_8_1; }

		//return=XExpression
		public Assignment getReturnAssignment_8_1_0() { return cReturnAssignment_8_1_0; }

		//XExpression
		public RuleCall getReturnXExpressionParserRuleCall_8_1_0_0() { return cReturnXExpressionParserRuleCall_8_1_0_0; }

		//returnvar=Variable
		public Assignment getReturnvarAssignment_8_1_1() { return cReturnvarAssignment_8_1_1; }

		//Variable
		public RuleCall getReturnvarVariableParserRuleCall_8_1_1_0() { return cReturnvarVariableParserRuleCall_8_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_8_2() { return cSemicolonKeyword_8_2; }
	}

	public class OperationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOperationBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStepsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStepsOperationStepParserRuleCall_1_0 = (RuleCall)cStepsAssignment_1.eContents().get(0);
		
		//OperationBlock:
		//
		//	{OperationBlock} steps+=OperationStep*;
		public ParserRule getRule() { return rule; }

		//{OperationBlock} steps+=OperationStep*
		public Group getGroup() { return cGroup; }

		//{OperationBlock}
		public Action getOperationBlockAction_0() { return cOperationBlockAction_0; }

		//steps+=OperationStep*
		public Assignment getStepsAssignment_1() { return cStepsAssignment_1; }

		//OperationStep
		public RuleCall getStepsOperationStepParserRuleCall_1_0() { return cStepsOperationStepParserRuleCall_1_0; }
	}

	public class ParameterVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLazyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLazyLazyKeyword_1_0 = (Keyword)cLazyAssignment_1.eContents().get(0);
		private final Assignment cKindAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKindParameterKindEnumRuleCall_2_0 = (RuleCall)cKindAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeDefParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cDefaultAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cDefaultLITERALParserRuleCall_5_1_0 = (RuleCall)cDefaultAssignment_5_1.eContents().get(0);
		
		//ParameterVariable returns Variable:
		//
		//	{ParameterVariable} lazy?="lazy" kind=ParameterKind? type=TypeDef name=ID ("=" default=LITERAL)?;
		public ParserRule getRule() { return rule; }

		//{ParameterVariable} lazy?="lazy" kind=ParameterKind? type=TypeDef name=ID ("=" default=LITERAL)?
		public Group getGroup() { return cGroup; }

		//{ParameterVariable}
		public Action getParameterVariableAction_0() { return cParameterVariableAction_0; }

		//lazy?="lazy"
		public Assignment getLazyAssignment_1() { return cLazyAssignment_1; }

		//"lazy"
		public Keyword getLazyLazyKeyword_1_0() { return cLazyLazyKeyword_1_0; }

		//kind=ParameterKind?
		public Assignment getKindAssignment_2() { return cKindAssignment_2; }

		//ParameterKind
		public RuleCall getKindParameterKindEnumRuleCall_2_0() { return cKindParameterKindEnumRuleCall_2_0; }

		//type=TypeDef
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_3_0() { return cTypeTypeDefParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//("=" default=LITERAL)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//default=LITERAL
		public Assignment getDefaultAssignment_5_1() { return cDefaultAssignment_5_1; }

		//LITERAL
		public RuleCall getDefaultLITERALParserRuleCall_5_1_0() { return cDefaultLITERALParserRuleCall_5_1_0; }
	}

	public class XExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cXExpression6ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeDefParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		/// ********************
		// * INFIX SYNTAX
		// ********************** / XExpression:
		//
		//	XExpression6 (":" type=TypeDef)?;
		public ParserRule getRule() { return rule; }

		//XExpression6 (":" type=TypeDef)?
		public Group getGroup() { return cGroup; }

		//XExpression6
		public RuleCall getXExpression6ParserRuleCall_0() { return cXExpression6ParserRuleCall_0; }

		//(":" type=TypeDef)?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//type=TypeDef
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_1_1_0() { return cTypeTypeDefParserRuleCall_1_1_0; }
	}

	public class XPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cXExpressionLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXParenthesizedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cXIsLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cOperationCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cXStructExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cXSizeOfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//XPrimaryExpression:
		//
		//	XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall |
		//
		//	XStructExpression | XSizeOfExpression;
		public ParserRule getRule() { return rule; }

		//XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall |
		//
		//XStructExpression | XSizeOfExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//XExpressionLiteral
		public RuleCall getXExpressionLiteralParserRuleCall_0() { return cXExpressionLiteralParserRuleCall_0; }

		//XParenthesizedExpression
		public RuleCall getXParenthesizedExpressionParserRuleCall_1() { return cXParenthesizedExpressionParserRuleCall_1; }

		//XIsLiteralExpression
		public RuleCall getXIsLiteralExpressionParserRuleCall_2() { return cXIsLiteralExpressionParserRuleCall_2; }

		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }

		//OperationCall
		public RuleCall getOperationCallParserRuleCall_4() { return cOperationCallParserRuleCall_4; }

		//XStructExpression
		public RuleCall getXStructExpressionParserRuleCall_5() { return cXStructExpressionParserRuleCall_5; }

		//XSizeOfExpression
		public RuleCall getXSizeOfExpressionParserRuleCall_6() { return cXSizeOfExpressionParserRuleCall_6; }
	}

	public class XSizeOfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XSizeOfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSizeofKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeDefParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XSizeOfExpression:
		//
		//	"sizeof" "(" type=TypeDef ")";
		public ParserRule getRule() { return rule; }

		//"sizeof" "(" type=TypeDef ")"
		public Group getGroup() { return cGroup; }

		//"sizeof"
		public Keyword getSizeofKeyword_0() { return cSizeofKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//type=TypeDef
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//TypeDef
		public RuleCall getTypeTypeDefParserRuleCall_2_0() { return cTypeTypeDefParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XStructExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XStructExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesXExpressionParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesXExpressionParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//XStructExpression:
		//
		//	"[" values+=XExpression ("," values+=XExpression)* ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=XExpression ("," values+=XExpression)* ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=XExpression
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//XExpression
		public RuleCall getValuesXExpressionParserRuleCall_1_0() { return cValuesXExpressionParserRuleCall_1_0; }

		//("," values+=XExpression)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=XExpression
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//XExpression
		public RuleCall getValuesXExpressionParserRuleCall_2_1_0() { return cValuesXExpressionParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class XExpression1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorUNARY_OPERATOREnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAXExpression0ParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//XExpression1:
		//
		//	operator+=UNARY_OPERATOR* a=XExpression0;
		public ParserRule getRule() { return rule; }

		//operator+=UNARY_OPERATOR* a=XExpression0
		public Group getGroup() { return cGroup; }

		//operator+=UNARY_OPERATOR*
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//UNARY_OPERATOR
		public RuleCall getOperatorUNARY_OPERATOREnumRuleCall_0_0() { return cOperatorUNARY_OPERATOREnumRuleCall_0_0; }

		//a=XExpression0
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//XExpression0
		public RuleCall getAXExpression0ParserRuleCall_1_0() { return cAXExpression0ParserRuleCall_1_0; }
	}

	public class XExpression0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpressionM1ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cMemberAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMemberIDTerminalRuleCall_1_1_0 = (RuleCall)cMemberAssignment_1_1.eContents().get(0);
		
		//XExpression0:
		//
		//	a=XExpressionM1 ("->" member+=ID)*;
		public ParserRule getRule() { return rule; }

		//a=XExpressionM1 ("->" member+=ID)*
		public Group getGroup() { return cGroup; }

		//a=XExpressionM1
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpressionM1
		public RuleCall getAXExpressionM1ParserRuleCall_0_0() { return cAXExpressionM1ParserRuleCall_0_0; }

		//("->" member+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_0() { return cHyphenMinusGreaterThanSignKeyword_1_0; }

		//member+=ID
		public Assignment getMemberAssignment_1_1() { return cMemberAssignment_1_1; }

		//ID
		public RuleCall getMemberIDTerminalRuleCall_1_1_0() { return cMemberIDTerminalRuleCall_1_1_0; }
	}

	public class XExpressionM1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionM1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXPrimaryExpressionParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIndexAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndexXExpressionParserRuleCall_1_1_0 = (RuleCall)cIndexAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//XExpressionM1:
		//
		//	a=XPrimaryExpression ("[" index+=XExpression "]")*;
		public ParserRule getRule() { return rule; }

		//a=XPrimaryExpression ("[" index+=XExpression "]")*
		public Group getGroup() { return cGroup; }

		//a=XPrimaryExpression
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XPrimaryExpression
		public RuleCall getAXPrimaryExpressionParserRuleCall_0_0() { return cAXPrimaryExpressionParserRuleCall_0_0; }

		//("[" index+=XExpression "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//index+=XExpression
		public Assignment getIndexAssignment_1_1() { return cIndexAssignment_1_1; }

		//XExpression
		public RuleCall getIndexXExpressionParserRuleCall_1_1_0() { return cIndexXExpressionParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class XExpression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression1ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression2ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression2:
		//
		//	a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*
		public Group getGroup() { return cGroup; }

		//a=XExpression1
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression1
		public RuleCall getAXExpression1ParserRuleCall_0_0() { return cAXExpression1ParserRuleCall_0_0; }

		//(=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=MULTIPLICATIVE_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//MULTIPLICATIVE_OPERATOR
		public RuleCall getOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0() { return cOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression2
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression2
		public RuleCall getBXExpression2ParserRuleCall_1_1_0() { return cBXExpression2ParserRuleCall_1_1_0; }
	}

	public class XExpression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression2ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpADDITIVE_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression2ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression3:
		//
		//	a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*
		public Group getGroup() { return cGroup; }

		//a=XExpression2
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression2
		public RuleCall getAXExpression2ParserRuleCall_0_0() { return cAXExpression2ParserRuleCall_0_0; }

		//(=> op+=ADDITIVE_OPERATOR b+=XExpression2)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=ADDITIVE_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//ADDITIVE_OPERATOR
		public RuleCall getOpADDITIVE_OPERATOREnumRuleCall_1_0_0() { return cOpADDITIVE_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression2
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression2
		public RuleCall getBXExpression2ParserRuleCall_1_1_0() { return cBXExpression2ParserRuleCall_1_1_0; }
	}

	public class XExpression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression3ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpEQUALITY_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression3ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression4:
		//
		//	a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*
		public Group getGroup() { return cGroup; }

		//a=XExpression3
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression3
		public RuleCall getAXExpression3ParserRuleCall_0_0() { return cAXExpression3ParserRuleCall_0_0; }

		//(=> op+=EQUALITY_OPERATOR b+=XExpression3)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=EQUALITY_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//EQUALITY_OPERATOR
		public RuleCall getOpEQUALITY_OPERATOREnumRuleCall_1_0_0() { return cOpEQUALITY_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression3
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression3
		public RuleCall getBXExpression3ParserRuleCall_1_1_0() { return cBXExpression3ParserRuleCall_1_1_0; }
	}

	public class XExpression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAXExpression4ParserRuleCall_0_0 = (RuleCall)cAAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOpBOOLEAN_OPERATOREnumRuleCall_1_0_0 = (RuleCall)cOpAssignment_1_0.eContents().get(0);
		private final Assignment cBAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBXExpression4ParserRuleCall_1_1_0 = (RuleCall)cBAssignment_1_1.eContents().get(0);
		
		//XExpression5:
		//
		//	a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*;
		public ParserRule getRule() { return rule; }

		//a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*
		public Group getGroup() { return cGroup; }

		//a=XExpression4
		public Assignment getAAssignment_0() { return cAAssignment_0; }

		//XExpression4
		public RuleCall getAXExpression4ParserRuleCall_0_0() { return cAXExpression4ParserRuleCall_0_0; }

		//(=> op+=BOOLEAN_OPERATOR b+=XExpression4)*
		public Group getGroup_1() { return cGroup_1; }

		//=> op+=BOOLEAN_OPERATOR
		public Assignment getOpAssignment_1_0() { return cOpAssignment_1_0; }

		//BOOLEAN_OPERATOR
		public RuleCall getOpBOOLEAN_OPERATOREnumRuleCall_1_0_0() { return cOpBOOLEAN_OPERATOREnumRuleCall_1_0_0; }

		//b+=XExpression4
		public Assignment getBAssignment_1_1() { return cBAssignment_1_1; }

		//XExpression4
		public RuleCall getBXExpression4ParserRuleCall_1_1_0() { return cBXExpression4ParserRuleCall_1_1_0; }
	}

	public class XExpression6Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpression6");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRefVariableReferenceParserRuleCall_0_0_0 = (RuleCall)cRefAssignment_0_0.eContents().get(0);
		private final Assignment cOpAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOpOpSingleAssignEnumRuleCall_0_1_0 = (RuleCall)cOpAssignment_0_1.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAXExpression5ParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		
		//XExpression6:
		//
		//	(ref=VariableReference op=OpSingleAssign)? a=XExpression5;
		public ParserRule getRule() { return rule; }

		//(ref=VariableReference op=OpSingleAssign)? a=XExpression5
		public Group getGroup() { return cGroup; }

		//(ref=VariableReference op=OpSingleAssign)?
		public Group getGroup_0() { return cGroup_0; }

		//ref=VariableReference
		public Assignment getRefAssignment_0_0() { return cRefAssignment_0_0; }

		//VariableReference
		public RuleCall getRefVariableReferenceParserRuleCall_0_0_0() { return cRefVariableReferenceParserRuleCall_0_0_0; }

		//op=OpSingleAssign
		public Assignment getOpAssignment_0_1() { return cOpAssignment_0_1; }

		//OpSingleAssign
		public RuleCall getOpOpSingleAssignEnumRuleCall_0_1_0() { return cOpOpSingleAssignEnumRuleCall_0_1_0; }

		//a=XExpression5
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//XExpression5
		public RuleCall getAXExpression5ParserRuleCall_1_0() { return cAXExpression5ParserRuleCall_1_0; }
	}

	public class XExpressionLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XExpressionLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLITERALParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//XExpressionLiteral:
		//
		//	value=LITERAL;
		public ParserRule getRule() { return rule; }

		//value=LITERAL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//LITERAL
		public RuleCall getValueLITERALParserRuleCall_0() { return cValueLITERALParserRuleCall_0; }
	}

	public class XTopLevelExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XTopLevelExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cAnnotationParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cXExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cXErrorExpressionParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//XTopLevelExpression:
		//
		//	Annotation ";" | XExpression ";" | XErrorExpression ";";
		public ParserRule getRule() { return rule; }

		//Annotation ";" | XExpression ";" | XErrorExpression ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Annotation ";"
		public Group getGroup_0() { return cGroup_0; }

		//Annotation
		public RuleCall getAnnotationParserRuleCall_0_0() { return cAnnotationParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//XExpression ";"
		public Group getGroup_1() { return cGroup_1; }

		//XExpression
		public RuleCall getXExpressionParserRuleCall_1_0() { return cXExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//XErrorExpression ";"
		public Group getGroup_2() { return cGroup_2; }

		//XErrorExpression
		public RuleCall getXErrorExpressionParserRuleCall_2_0() { return cXErrorExpressionParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class XErrorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XErrorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLevelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLevelErrorLevelsEnumRuleCall_0_0 = (RuleCall)cLevelAssignment_0.eContents().get(0);
		private final Assignment cMsgAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMsgSTRINGTerminalRuleCall_1_0 = (RuleCall)cMsgAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XErrorExpression:
		//
		//	level=ErrorLevels msg=STRING ";";
		public ParserRule getRule() { return rule; }

		//level=ErrorLevels msg=STRING ";"
		public Group getGroup() { return cGroup; }

		//level=ErrorLevels
		public Assignment getLevelAssignment_0() { return cLevelAssignment_0; }

		//ErrorLevels
		public RuleCall getLevelErrorLevelsEnumRuleCall_0_0() { return cLevelErrorLevelsEnumRuleCall_0_0; }

		//msg=STRING
		public Assignment getMsgAssignment_1() { return cMsgAssignment_1; }

		//STRING
		public RuleCall getMsgSTRINGTerminalRuleCall_1_0() { return cMsgSTRINGTerminalRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class XIsLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XIsLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIsliteralKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRefVariableReferenceParserRuleCall_2_0 = (RuleCall)cRefAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//XIsLiteralExpression:
		//
		//	"isliteral" "(" ref=VariableReference ")";
		public ParserRule getRule() { return rule; }

		//"isliteral" "(" ref=VariableReference ")"
		public Group getGroup() { return cGroup; }

		//"isliteral"
		public Keyword getIsliteralKeyword_0() { return cIsliteralKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//ref=VariableReference
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//VariableReference
		public RuleCall getRefVariableReferenceParserRuleCall_2_0() { return cRefVariableReferenceParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class XParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAXExpressionParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//XParenthesizedExpression:
		//
		//	"(" a=XExpression ")";
		public ParserRule getRule() { return rule; }

		//"(" a=XExpression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//a=XExpression
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//XExpression
		public RuleCall getAXExpressionParserRuleCall_1_0() { return cAXExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	
	
	public class IntegerKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUNSIGNEDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUNSIGNEDUnsignedKeyword_0_0 = (Keyword)cUNSIGNEDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSIGNEDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSIGNEDSignedKeyword_1_0 = (Keyword)cSIGNEDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IntegerKind:
		//
		//	UNSIGNED="unsigned" | SIGNED="signed";
		public EnumRule getRule() { return rule; }

		//UNSIGNED="unsigned" | SIGNED="signed"
		public Alternatives getAlternatives() { return cAlternatives; }

		//UNSIGNED="unsigned"
		public EnumLiteralDeclaration getUNSIGNEDEnumLiteralDeclaration_0() { return cUNSIGNEDEnumLiteralDeclaration_0; }

		//"unsigned"
		public Keyword getUNSIGNEDUnsignedKeyword_0_0() { return cUNSIGNEDUnsignedKeyword_0_0; }

		//SIGNED="signed"
		public EnumLiteralDeclaration getSIGNEDEnumLiteralDeclaration_1() { return cSIGNEDEnumLiteralDeclaration_1; }

		//"signed"
		public Keyword getSIGNEDSignedKeyword_1_0() { return cSIGNEDSignedKeyword_1_0; }
	}

	public class ParameterKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANYDefaultKeyword_0_0 = (Keyword)cANYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVARVarKeyword_1_0 = (Keyword)cVAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONSTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONSTConstKeyword_2_0 = (Keyword)cCONSTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ParameterKind:
		//
		//	ANY="default" | VAR="var" | CONST="const";
		public EnumRule getRule() { return rule; }

		//ANY="default" | VAR="var" | CONST="const"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY="default"
		public EnumLiteralDeclaration getANYEnumLiteralDeclaration_0() { return cANYEnumLiteralDeclaration_0; }

		//"default"
		public Keyword getANYDefaultKeyword_0_0() { return cANYDefaultKeyword_0_0; }

		//VAR="var"
		public EnumLiteralDeclaration getVAREnumLiteralDeclaration_1() { return cVAREnumLiteralDeclaration_1; }

		//"var"
		public Keyword getVARVarKeyword_1_0() { return cVARVarKeyword_1_0; }

		//CONST="const"
		public EnumLiteralDeclaration getCONSTEnumLiteralDeclaration_2() { return cCONSTEnumLiteralDeclaration_2; }

		//"const"
		public Keyword getCONSTConstKeyword_2_0() { return cCONSTConstKeyword_2_0; }
	}

	public class UNARY_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UNARY_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_1_0 = (Keyword)cNOTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cREFERENCEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cREFERENCEAmpersandKeyword_2_0 = (Keyword)cREFERENCEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEREFERENCEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDEREFERENCECommercialAtKeyword_3_0 = (Keyword)cDEREFERENCEEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UNARY_OPERATOR:
		//
		//	MINUS="-" | NOT="!" | REFERENCE="&" | DEREFERENCE="@";
		public EnumRule getRule() { return rule; }

		//MINUS="-" | NOT="!" | REFERENCE="&" | DEREFERENCE="@"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }

		//NOT="!"
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration_1() { return cNOTEnumLiteralDeclaration_1; }

		//"!"
		public Keyword getNOTExclamationMarkKeyword_1_0() { return cNOTExclamationMarkKeyword_1_0; }

		//REFERENCE="&"
		public EnumLiteralDeclaration getREFERENCEEnumLiteralDeclaration_2() { return cREFERENCEEnumLiteralDeclaration_2; }

		//"&"
		public Keyword getREFERENCEAmpersandKeyword_2_0() { return cREFERENCEAmpersandKeyword_2_0; }

		//DEREFERENCE="@"
		public EnumLiteralDeclaration getDEREFERENCEEnumLiteralDeclaration_3() { return cDEREFERENCEEnumLiteralDeclaration_3; }

		//"@"
		public Keyword getDEREFERENCECommercialAtKeyword_3_0() { return cDEREFERENCECommercialAtKeyword_3_0; }
	}

	public class MULTIPLICATIVE_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLICATIVE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULAsteriskKeyword_0_0 = (Keyword)cMULEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MULTIPLICATIVE_OPERATOR:
		//
		//	MUL="*" | DIV="/" | MOD="%";
		public EnumRule getRule() { return rule; }

		//MUL="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MUL="*"
		public EnumLiteralDeclaration getMULEnumLiteralDeclaration_0() { return cMULEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMULAsteriskKeyword_0_0() { return cMULAsteriskKeyword_0_0; }

		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }

		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }

		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}

	public class ADDITIVE_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ADDITIVE_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ADDITIVE_OPERATOR:
		//
		//	ADD="+" | MINUS="-";
		public EnumRule getRule() { return rule; }

		//ADD="+" | MINUS="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_1() { return cMINUSEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}

	public class EQUALITY_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALITY_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQUALSExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOTEQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLTELessThanSignEqualsSignKeyword_3_0 = (Keyword)cLTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTGreaterThanSignKeyword_4_0 = (Keyword)cGTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLTLessThanSignKeyword_5_0 = (Keyword)cLTEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum EQUALITY_OPERATOR:
		//
		//	EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<";
		public EnumRule getRule() { return rule; }

		//EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS="=="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_0() { return cEQUALSEnumLiteralDeclaration_0; }

		//"=="
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_0_0() { return cEQUALSEqualsSignEqualsSignKeyword_0_0; }

		//NOTEQUALS="!="
		public EnumLiteralDeclaration getNOTEQUALSEnumLiteralDeclaration_1() { return cNOTEQUALSEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNOTEQUALSExclamationMarkEqualsSignKeyword_1_0() { return cNOTEQUALSExclamationMarkEqualsSignKeyword_1_0; }

		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_2() { return cGTEEnumLiteralDeclaration_2; }

		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_2_0() { return cGTEGreaterThanSignEqualsSignKeyword_2_0; }

		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_3() { return cLTEEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_3_0() { return cLTELessThanSignEqualsSignKeyword_3_0; }

		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_4() { return cGTEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGTGreaterThanSignKeyword_4_0() { return cGTGreaterThanSignKeyword_4_0; }

		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_5() { return cLTEnumLiteralDeclaration_5; }

		//"<"
		public Keyword getLTLessThanSignKeyword_5_0() { return cLTLessThanSignKeyword_5_0; }
	}

	public class BOOLEAN_OPERATORElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN_OPERATOR");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cORVerticalLineVerticalLineKeyword_0_0 = (Keyword)cOREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cANDAmpersandAmpersandKeyword_1_0 = (Keyword)cANDEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BOOLEAN_OPERATOR:
		//
		//	OR="||" | AND="&&";
		public EnumRule getRule() { return rule; }

		//OR="||" | AND="&&"
		public Alternatives getAlternatives() { return cAlternatives; }

		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_0() { return cOREnumLiteralDeclaration_0; }

		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_0_0() { return cORVerticalLineVerticalLineKeyword_0_0; }

		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_1() { return cANDEnumLiteralDeclaration_1; }

		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_1_0() { return cANDAmpersandAmpersandKeyword_1_0; }
	}

	public class ErrorLevelsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ErrorLevels");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cERROREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cERRORErrorKeyword_0_0 = (Keyword)cERROREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWARNINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWARNINGWarningKeyword_1_0 = (Keyword)cWARNINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINFOEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINFOInfoKeyword_2_0 = (Keyword)cINFOEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ErrorLevels:
		//
		//	ERROR="error" | WARNING="warning" | INFO="info";
		public EnumRule getRule() { return rule; }

		//ERROR="error" | WARNING="warning" | INFO="info"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ERROR="error"
		public EnumLiteralDeclaration getERROREnumLiteralDeclaration_0() { return cERROREnumLiteralDeclaration_0; }

		//"error"
		public Keyword getERRORErrorKeyword_0_0() { return cERRORErrorKeyword_0_0; }

		//WARNING="warning"
		public EnumLiteralDeclaration getWARNINGEnumLiteralDeclaration_1() { return cWARNINGEnumLiteralDeclaration_1; }

		//"warning"
		public Keyword getWARNINGWarningKeyword_1_0() { return cWARNINGWarningKeyword_1_0; }

		//INFO="info"
		public EnumLiteralDeclaration getINFOEnumLiteralDeclaration_2() { return cINFOEnumLiteralDeclaration_2; }

		//"info"
		public Keyword getINFOInfoKeyword_2_0() { return cINFOInfoKeyword_2_0; }
	}

	public class OpSingleAssignElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OpSingleAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGNADDEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASSIGNADDPlusSignEqualsSignKeyword_1_0 = (Keyword)cASSIGNADDEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGNSUBTRACTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cASSIGNSUBTRACTHyphenMinusEqualsSignKeyword_2_0 = (Keyword)cASSIGNSUBTRACTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum OpSingleAssign:
		//
		//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUBTRACT="-=";
		public EnumRule getRule() { return rule; }

		//ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUBTRACT="-="
		public Alternatives getAlternatives() { return cAlternatives; }

		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }

		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }

		//ASSIGNADD="+="
		public EnumLiteralDeclaration getASSIGNADDEnumLiteralDeclaration_1() { return cASSIGNADDEnumLiteralDeclaration_1; }

		//"+="
		public Keyword getASSIGNADDPlusSignEqualsSignKeyword_1_0() { return cASSIGNADDPlusSignEqualsSignKeyword_1_0; }

		//ASSIGNSUBTRACT="-="
		public EnumLiteralDeclaration getASSIGNSUBTRACTEnumLiteralDeclaration_2() { return cASSIGNSUBTRACTEnumLiteralDeclaration_2; }

		//"-="
		public Keyword getASSIGNSUBTRACTHyphenMinusEqualsSignKeyword_2_0() { return cASSIGNSUBTRACTHyphenMinusEqualsSignKeyword_2_0; }
	}
	
	private CompilationUnitElements pCompilationUnit;
	private LibraryNameElements pLibraryName;
	private QualifiedNameElements pQualifiedName;
	private TerminalRule tHEXINT;
	private TerminalRule tBINARY;
	private TerminalRule tREAL;
	private LITERALElements pLITERAL;
	private AnnotationDefinitionElements pAnnotationDefinition;
	private AnnotationElements pAnnotation;
	private LibraryElements pLibrary;
	private LibraryItemElements pLibraryItem;
	private TypeElements pType;
	private TypeDefElements pTypeDef;
	private PointerTypeDefElements pPointerTypeDef;
	private ArrayTypeDefElements pArrayTypeDef;
	private RefTypeDefElements pRefTypeDef;
	private DataTypeDefElements pDataTypeDef;
	private FixedDataTypeDefElements pFixedDataTypeDef;
	private IntegerDataTypeDefElements pIntegerDataTypeDef;
	private IntegerKindElements unknownRuleIntegerKind;
	private StructTypeDefElements pStructTypeDef;
	private StructTypeDefMemberElements pStructTypeDefMember;
	private ConstantVariableElements pConstantVariable;
	private RegisterVariableElements pRegisterVariable;
	private OperationStepElements pOperationStep;
	private LabelElements pLabel;
	private VariableElements pVariable;
	private VariableReferenceElements pVariableReference;
	private OperationCallElements pOperationCall;
	private OperationCallParameterElements pOperationCallParameter;
	private OperationElements pOperation;
	private OperationBlockElements pOperationBlock;
	private ParameterVariableElements pParameterVariable;
	private ParameterKindElements unknownRuleParameterKind;
	private XExpressionElements pXExpression;
	private XPrimaryExpressionElements pXPrimaryExpression;
	private XSizeOfExpressionElements pXSizeOfExpression;
	private XStructExpressionElements pXStructExpression;
	private XExpression1Elements pXExpression1;
	private XExpression0Elements pXExpression0;
	private XExpressionM1Elements pXExpressionM1;
	private UNARY_OPERATORElements unknownRuleUNARY_OPERATOR;
	private XExpression2Elements pXExpression2;
	private MULTIPLICATIVE_OPERATORElements unknownRuleMULTIPLICATIVE_OPERATOR;
	private XExpression3Elements pXExpression3;
	private ADDITIVE_OPERATORElements unknownRuleADDITIVE_OPERATOR;
	private XExpression4Elements pXExpression4;
	private EQUALITY_OPERATORElements unknownRuleEQUALITY_OPERATOR;
	private XExpression5Elements pXExpression5;
	private XExpression6Elements pXExpression6;
	private BOOLEAN_OPERATORElements unknownRuleBOOLEAN_OPERATOR;
	private XExpressionLiteralElements pXExpressionLiteral;
	private XTopLevelExpressionElements pXTopLevelExpression;
	private XErrorExpressionElements pXErrorExpression;
	private ErrorLevelsElements unknownRuleErrorLevels;
	private OpSingleAssignElements unknownRuleOpSingleAssign;
	private XIsLiteralExpressionElements pXIsLiteralExpression;
	private XParenthesizedExpressionElements pXParenthesizedExpression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ESyntaxGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.e.parser.ESyntax".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CompilationUnit: / *Module |* / / * | LinkedBinary / *| Interface* / Library;
	public CompilationUnitElements getCompilationUnitAccess() {
		return (pCompilationUnit != null) ? pCompilationUnit : (pCompilationUnit = new CompilationUnitElements());
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//LibraryName:
	//
	//	ID ("." ID)*;
	public LibraryNameElements getLibraryNameAccess() {
		return (pLibraryName != null) ? pLibraryName : (pLibraryName = new LibraryNameElements());
	}
	
	public ParserRule getLibraryNameRule() {
		return getLibraryNameAccess().getRule();
	}

	//QualifiedName:
	//
	//	(LibraryName "::")? ID;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////ReferenceID:
	// //	ID ('->' ID)*
	// //;
	// / ***********************
	// * LITERALS *
	// *********************** / terminal HEXINT
	//
	//returns ecore::EInt:
	//
	//	"0x" ("0".."9" | "a".."f" | "A".."F")+;
	public TerminalRule getHEXINTRule() {
		return (tHEXINT != null) ? tHEXINT : (tHEXINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXINT"));
	} 

	//terminal BINARY returns ecore::EInt:
	//
	//	"b" ("0" | "1")+;
	public TerminalRule getBINARYRule() {
		return (tBINARY != null) ? tBINARY : (tBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BINARY"));
	} 

	//terminal REAL returns ecore::EBigDecimal:
	//
	//	INT "." INT?;
	public TerminalRule getREALRule() {
		return (tREAL != null) ? tREAL : (tREAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "REAL"));
	} 

	//LITERAL:
	//
	//	INT | HEXINT | BINARY | REAL;
	public LITERALElements getLITERALAccess() {
		return (pLITERAL != null) ? pLITERAL : (pLITERAL = new LITERALElements());
	}
	
	public ParserRule getLITERALRule() {
		return getLITERALAccess().getRule();
	}

	/// **********************
	// * Annotations
	// *********************** / AnnotationDefinition:
	//
	//	"annotation" name=ID;
	public AnnotationDefinitionElements getAnnotationDefinitionAccess() {
		return (pAnnotationDefinition != null) ? pAnnotationDefinition : (pAnnotationDefinition = new AnnotationDefinitionElements());
	}
	
	public ParserRule getAnnotationDefinitionRule() {
		return getAnnotationDefinitionAccess().getRule();
	}

	//Annotation:
	//
	//	"#" definition=ID;
	public AnnotationElements getAnnotationAccess() {
		return (pAnnotation != null) ? pAnnotation : (pAnnotation = new AnnotationElements());
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}

	/// ***********************
	// * LIBRARY *
	// *********************** / Library:
	//
	//	"library" name=LibraryName
	//
	//	//('overrides' overrides+=[Library|QualifiedName] (',' overrides+=[Library|QualifiedName])*)?
	// ";" ("use"
	//
	//	use+=LibraryName ";")* items+=LibraryItem*;
	public LibraryElements getLibraryAccess() {
		return (pLibrary != null) ? pLibrary : (pLibrary = new LibraryElements());
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}

	//LibraryItem:
	//
	//	Type | Operation | Variable ";" | ConstantVariable ";" | RegisterVariable ";" | AnnotationDefinition ";";
	public LibraryItemElements getLibraryItemAccess() {
		return (pLibraryItem != null) ? pLibraryItem : (pLibraryItem = new LibraryItemElements());
	}
	
	public ParserRule getLibraryItemRule() {
		return getLibraryItemAccess().getRule();
	}

	/// ***********************
	// * DATATYPES *
	// *********************** / Type:
	//
	//	"type" name=ID "=" def=TypeDef ";";
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//TypeDef:
	//
	//	DataTypeDef | StructTypeDef | PointerTypeDef | ArrayTypeDef | RefTypeDef;
	public TypeDefElements getTypeDefAccess() {
		return (pTypeDef != null) ? pTypeDef : (pTypeDef = new TypeDefElements());
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}

	//PointerTypeDef:
	//
	//	"pointer" "of" def=TypeDef;
	public PointerTypeDefElements getPointerTypeDefAccess() {
		return (pPointerTypeDef != null) ? pPointerTypeDef : (pPointerTypeDef = new PointerTypeDefElements());
	}
	
	public ParserRule getPointerTypeDefRule() {
		return getPointerTypeDefAccess().getRule();
	}

	//ArrayTypeDef:
	//
	//	"array" "[" size=XExpression "]" "of" def=TypeDef;
	public ArrayTypeDefElements getArrayTypeDefAccess() {
		return (pArrayTypeDef != null) ? pArrayTypeDef : (pArrayTypeDef = new ArrayTypeDefElements());
	}
	
	public ParserRule getArrayTypeDefRule() {
		return getArrayTypeDefAccess().getRule();
	}

	//RefTypeDef:
	//
	//	type=QualifiedName;
	public RefTypeDefElements getRefTypeDefAccess() {
		return (pRefTypeDef != null) ? pRefTypeDef : (pRefTypeDef = new RefTypeDefElements());
	}
	
	public ParserRule getRefTypeDefRule() {
		return getRefTypeDefAccess().getRule();
	}

	//DataTypeDef:
	//
	//	IntegerDataTypeDef | //| FloatDataTypeDef
	// FixedDataTypeDef;
	public DataTypeDefElements getDataTypeDefAccess() {
		return (pDataTypeDef != null) ? pDataTypeDef : (pDataTypeDef = new DataTypeDefElements());
	}
	
	public ParserRule getDataTypeDefRule() {
		return getDataTypeDefAccess().getRule();
	}

	////FloatDataTypeDef:
	// //	'float' bits=INT 'bits'
	// //;
	// FixedDataTypeDef:
	//
	//	"fixed" bits=INT "bits" "scale" "=" scale=REAL;
	public FixedDataTypeDefElements getFixedDataTypeDefAccess() {
		return (pFixedDataTypeDef != null) ? pFixedDataTypeDef : (pFixedDataTypeDef = new FixedDataTypeDefElements());
	}
	
	public ParserRule getFixedDataTypeDefRule() {
		return getFixedDataTypeDefAccess().getRule();
	}

	//IntegerDataTypeDef:
	//
	//	kind=IntegerKind bits=INT "bits";
	public IntegerDataTypeDefElements getIntegerDataTypeDefAccess() {
		return (pIntegerDataTypeDef != null) ? pIntegerDataTypeDef : (pIntegerDataTypeDef = new IntegerDataTypeDefElements());
	}
	
	public ParserRule getIntegerDataTypeDefRule() {
		return getIntegerDataTypeDefAccess().getRule();
	}

	//enum IntegerKind:
	//
	//	UNSIGNED="unsigned" | SIGNED="signed";
	public IntegerKindElements getIntegerKindAccess() {
		return (unknownRuleIntegerKind != null) ? unknownRuleIntegerKind : (unknownRuleIntegerKind = new IntegerKindElements());
	}
	
	public EnumRule getIntegerKindRule() {
		return getIntegerKindAccess().getRule();
	}

	//StructTypeDef:
	//
	//	{StructTypeDef} "struct" "{" members+=StructTypeDefMember ("," members+=StructTypeDefMember)* "}";
	public StructTypeDefElements getStructTypeDefAccess() {
		return (pStructTypeDef != null) ? pStructTypeDef : (pStructTypeDef = new StructTypeDefElements());
	}
	
	public ParserRule getStructTypeDefRule() {
		return getStructTypeDefAccess().getRule();
	}

	//StructTypeDefMember returns Variable:
	//
	//	{StructTypeDefMember} type=TypeDef name=ID;
	public StructTypeDefMemberElements getStructTypeDefMemberAccess() {
		return (pStructTypeDefMember != null) ? pStructTypeDefMember : (pStructTypeDefMember = new StructTypeDefMemberElements());
	}
	
	public ParserRule getStructTypeDefMemberRule() {
		return getStructTypeDefMemberAccess().getRule();
	}

	/// *************************
	// * GLOBAL VARIABLES
	// ************************* / ConstantVariable returns Variable:
	//
	//	{ConstantVariable} "const" type=TypeDef name=ID "=" value=XExpression;
	public ConstantVariableElements getConstantVariableAccess() {
		return (pConstantVariable != null) ? pConstantVariable : (pConstantVariable = new ConstantVariableElements());
	}
	
	public ParserRule getConstantVariableRule() {
		return getConstantVariableAccess().getRule();
	}

	//RegisterVariable returns Variable:
	//
	//	{RegisterVariable} "reg" type=TypeDef name=ID ":" addr=XExpression;
	public RegisterVariableElements getRegisterVariableAccess() {
		return (pRegisterVariable != null) ? pRegisterVariable : (pRegisterVariable = new RegisterVariableElements());
	}
	
	public ParserRule getRegisterVariableRule() {
		return getRegisterVariableAccess().getRule();
	}

	/// ***********************
	// * Operation *
	// *********************** / OperationStep:
	//
	//	Label | Variable ";" | XTopLevelExpression;
	public OperationStepElements getOperationStepAccess() {
		return (pOperationStep != null) ? pOperationStep : (pOperationStep = new OperationStepElements());
	}
	
	public ParserRule getOperationStepRule() {
		return getOperationStepAccess().getRule();
	}

	//Label returns Variable:
	//
	//	{Label} "label" name=ID ";";
	public LabelElements getLabelAccess() {
		return (pLabel != null) ? pLabel : (pLabel = new LabelElements());
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Variable:
	//
	//	type=TypeDef name=ID;
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//VariableReference:
	//
	//	var=QualifiedName;
	public VariableReferenceElements getVariableReferenceAccess() {
		return (pVariableReference != null) ? pVariableReference : (pVariableReference = new VariableReferenceElements());
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}

	//OperationCall:
	//
	//	operation=QualifiedName "(" (params+=OperationCallParameter ("," params+=OperationCallParameter)*)? ")";
	public OperationCallElements getOperationCallAccess() {
		return (pOperationCall != null) ? pOperationCall : (pOperationCall = new OperationCallElements());
	}
	
	public ParserRule getOperationCallRule() {
		return getOperationCallAccess().getRule();
	}

	//OperationCallParameter:
	//
	//	XExpression;
	public OperationCallParameterElements getOperationCallParameterAccess() {
		return (pOperationCallParameter != null) ? pOperationCallParameter : (pOperationCallParameter = new OperationCallParameterElements());
	}
	
	public ParserRule getOperationCallParameterRule() {
		return getOperationCallParameterAccess().getRule();
	}

	//Operation returns OperationSignature:
	//
	//	{Operation} name=ID "(" (params+=ParameterVariable ("," params+=ParameterVariable)*)? ")" "{" block=OperationBlock
	//
	//	"}" ("returns" (return=XExpression | returnvar=Variable) ";")?;
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//OperationBlock:
	//
	//	{OperationBlock} steps+=OperationStep*;
	public OperationBlockElements getOperationBlockAccess() {
		return (pOperationBlock != null) ? pOperationBlock : (pOperationBlock = new OperationBlockElements());
	}
	
	public ParserRule getOperationBlockRule() {
		return getOperationBlockAccess().getRule();
	}

	//ParameterVariable returns Variable:
	//
	//	{ParameterVariable} lazy?="lazy" kind=ParameterKind? type=TypeDef name=ID ("=" default=LITERAL)?;
	public ParameterVariableElements getParameterVariableAccess() {
		return (pParameterVariable != null) ? pParameterVariable : (pParameterVariable = new ParameterVariableElements());
	}
	
	public ParserRule getParameterVariableRule() {
		return getParameterVariableAccess().getRule();
	}

	//enum ParameterKind:
	//
	//	ANY="default" | VAR="var" | CONST="const";
	public ParameterKindElements getParameterKindAccess() {
		return (unknownRuleParameterKind != null) ? unknownRuleParameterKind : (unknownRuleParameterKind = new ParameterKindElements());
	}
	
	public EnumRule getParameterKindRule() {
		return getParameterKindAccess().getRule();
	}

	/// ********************
	// * INFIX SYNTAX
	// ********************** / XExpression:
	//
	//	XExpression6 (":" type=TypeDef)?;
	public XExpressionElements getXExpressionAccess() {
		return (pXExpression != null) ? pXExpression : (pXExpression = new XExpressionElements());
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XPrimaryExpression:
	//
	//	XExpressionLiteral | XParenthesizedExpression | XIsLiteralExpression | VariableReference | OperationCall |
	//
	//	XStructExpression | XSizeOfExpression;
	public XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return (pXPrimaryExpression != null) ? pXPrimaryExpression : (pXPrimaryExpression = new XPrimaryExpressionElements());
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XSizeOfExpression:
	//
	//	"sizeof" "(" type=TypeDef ")";
	public XSizeOfExpressionElements getXSizeOfExpressionAccess() {
		return (pXSizeOfExpression != null) ? pXSizeOfExpression : (pXSizeOfExpression = new XSizeOfExpressionElements());
	}
	
	public ParserRule getXSizeOfExpressionRule() {
		return getXSizeOfExpressionAccess().getRule();
	}

	//XStructExpression:
	//
	//	"[" values+=XExpression ("," values+=XExpression)* ","? "]";
	public XStructExpressionElements getXStructExpressionAccess() {
		return (pXStructExpression != null) ? pXStructExpression : (pXStructExpression = new XStructExpressionElements());
	}
	
	public ParserRule getXStructExpressionRule() {
		return getXStructExpressionAccess().getRule();
	}

	//XExpression1:
	//
	//	operator+=UNARY_OPERATOR* a=XExpression0;
	public XExpression1Elements getXExpression1Access() {
		return (pXExpression1 != null) ? pXExpression1 : (pXExpression1 = new XExpression1Elements());
	}
	
	public ParserRule getXExpression1Rule() {
		return getXExpression1Access().getRule();
	}

	//XExpression0:
	//
	//	a=XExpressionM1 ("->" member+=ID)*;
	public XExpression0Elements getXExpression0Access() {
		return (pXExpression0 != null) ? pXExpression0 : (pXExpression0 = new XExpression0Elements());
	}
	
	public ParserRule getXExpression0Rule() {
		return getXExpression0Access().getRule();
	}

	//XExpressionM1:
	//
	//	a=XPrimaryExpression ("[" index+=XExpression "]")*;
	public XExpressionM1Elements getXExpressionM1Access() {
		return (pXExpressionM1 != null) ? pXExpressionM1 : (pXExpressionM1 = new XExpressionM1Elements());
	}
	
	public ParserRule getXExpressionM1Rule() {
		return getXExpressionM1Access().getRule();
	}

	//enum UNARY_OPERATOR:
	//
	//	MINUS="-" | NOT="!" | REFERENCE="&" | DEREFERENCE="@";
	public UNARY_OPERATORElements getUNARY_OPERATORAccess() {
		return (unknownRuleUNARY_OPERATOR != null) ? unknownRuleUNARY_OPERATOR : (unknownRuleUNARY_OPERATOR = new UNARY_OPERATORElements());
	}
	
	public EnumRule getUNARY_OPERATORRule() {
		return getUNARY_OPERATORAccess().getRule();
	}

	//XExpression2:
	//
	//	a=XExpression1 (=> op+=MULTIPLICATIVE_OPERATOR b+=XExpression2)*;
	public XExpression2Elements getXExpression2Access() {
		return (pXExpression2 != null) ? pXExpression2 : (pXExpression2 = new XExpression2Elements());
	}
	
	public ParserRule getXExpression2Rule() {
		return getXExpression2Access().getRule();
	}

	//enum MULTIPLICATIVE_OPERATOR:
	//
	//	MUL="*" | DIV="/" | MOD="%";
	public MULTIPLICATIVE_OPERATORElements getMULTIPLICATIVE_OPERATORAccess() {
		return (unknownRuleMULTIPLICATIVE_OPERATOR != null) ? unknownRuleMULTIPLICATIVE_OPERATOR : (unknownRuleMULTIPLICATIVE_OPERATOR = new MULTIPLICATIVE_OPERATORElements());
	}
	
	public EnumRule getMULTIPLICATIVE_OPERATORRule() {
		return getMULTIPLICATIVE_OPERATORAccess().getRule();
	}

	//XExpression3:
	//
	//	a=XExpression2 (=> op+=ADDITIVE_OPERATOR b+=XExpression2)*;
	public XExpression3Elements getXExpression3Access() {
		return (pXExpression3 != null) ? pXExpression3 : (pXExpression3 = new XExpression3Elements());
	}
	
	public ParserRule getXExpression3Rule() {
		return getXExpression3Access().getRule();
	}

	//enum ADDITIVE_OPERATOR:
	//
	//	ADD="+" | MINUS="-";
	public ADDITIVE_OPERATORElements getADDITIVE_OPERATORAccess() {
		return (unknownRuleADDITIVE_OPERATOR != null) ? unknownRuleADDITIVE_OPERATOR : (unknownRuleADDITIVE_OPERATOR = new ADDITIVE_OPERATORElements());
	}
	
	public EnumRule getADDITIVE_OPERATORRule() {
		return getADDITIVE_OPERATORAccess().getRule();
	}

	//XExpression4:
	//
	//	a=XExpression3 (=> op+=EQUALITY_OPERATOR b+=XExpression3)*;
	public XExpression4Elements getXExpression4Access() {
		return (pXExpression4 != null) ? pXExpression4 : (pXExpression4 = new XExpression4Elements());
	}
	
	public ParserRule getXExpression4Rule() {
		return getXExpression4Access().getRule();
	}

	//enum EQUALITY_OPERATOR:
	//
	//	EQUALS="==" | NOTEQUALS="!=" | GTE=">=" | LTE="<=" | GT=">" | LT="<";
	public EQUALITY_OPERATORElements getEQUALITY_OPERATORAccess() {
		return (unknownRuleEQUALITY_OPERATOR != null) ? unknownRuleEQUALITY_OPERATOR : (unknownRuleEQUALITY_OPERATOR = new EQUALITY_OPERATORElements());
	}
	
	public EnumRule getEQUALITY_OPERATORRule() {
		return getEQUALITY_OPERATORAccess().getRule();
	}

	//XExpression5:
	//
	//	a=XExpression4 (=> op+=BOOLEAN_OPERATOR b+=XExpression4)*;
	public XExpression5Elements getXExpression5Access() {
		return (pXExpression5 != null) ? pXExpression5 : (pXExpression5 = new XExpression5Elements());
	}
	
	public ParserRule getXExpression5Rule() {
		return getXExpression5Access().getRule();
	}

	//XExpression6:
	//
	//	(ref=VariableReference op=OpSingleAssign)? a=XExpression5;
	public XExpression6Elements getXExpression6Access() {
		return (pXExpression6 != null) ? pXExpression6 : (pXExpression6 = new XExpression6Elements());
	}
	
	public ParserRule getXExpression6Rule() {
		return getXExpression6Access().getRule();
	}

	//enum BOOLEAN_OPERATOR:
	//
	//	OR="||" | AND="&&";
	public BOOLEAN_OPERATORElements getBOOLEAN_OPERATORAccess() {
		return (unknownRuleBOOLEAN_OPERATOR != null) ? unknownRuleBOOLEAN_OPERATOR : (unknownRuleBOOLEAN_OPERATOR = new BOOLEAN_OPERATORElements());
	}
	
	public EnumRule getBOOLEAN_OPERATORRule() {
		return getBOOLEAN_OPERATORAccess().getRule();
	}

	//XExpressionLiteral:
	//
	//	value=LITERAL;
	public XExpressionLiteralElements getXExpressionLiteralAccess() {
		return (pXExpressionLiteral != null) ? pXExpressionLiteral : (pXExpressionLiteral = new XExpressionLiteralElements());
	}
	
	public ParserRule getXExpressionLiteralRule() {
		return getXExpressionLiteralAccess().getRule();
	}

	//XTopLevelExpression:
	//
	//	Annotation ";" | XExpression ";" | XErrorExpression ";";
	public XTopLevelExpressionElements getXTopLevelExpressionAccess() {
		return (pXTopLevelExpression != null) ? pXTopLevelExpression : (pXTopLevelExpression = new XTopLevelExpressionElements());
	}
	
	public ParserRule getXTopLevelExpressionRule() {
		return getXTopLevelExpressionAccess().getRule();
	}

	//XErrorExpression:
	//
	//	level=ErrorLevels msg=STRING ";";
	public XErrorExpressionElements getXErrorExpressionAccess() {
		return (pXErrorExpression != null) ? pXErrorExpression : (pXErrorExpression = new XErrorExpressionElements());
	}
	
	public ParserRule getXErrorExpressionRule() {
		return getXErrorExpressionAccess().getRule();
	}

	//enum ErrorLevels:
	//
	//	ERROR="error" | WARNING="warning" | INFO="info";
	public ErrorLevelsElements getErrorLevelsAccess() {
		return (unknownRuleErrorLevels != null) ? unknownRuleErrorLevels : (unknownRuleErrorLevels = new ErrorLevelsElements());
	}
	
	public EnumRule getErrorLevelsRule() {
		return getErrorLevelsAccess().getRule();
	}

	//enum OpSingleAssign:
	//
	//	ASSIGN="=" | ASSIGNADD="+=" | ASSIGNSUBTRACT="-=";
	public OpSingleAssignElements getOpSingleAssignAccess() {
		return (unknownRuleOpSingleAssign != null) ? unknownRuleOpSingleAssign : (unknownRuleOpSingleAssign = new OpSingleAssignElements());
	}
	
	public EnumRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//XIsLiteralExpression:
	//
	//	"isliteral" "(" ref=VariableReference ")";
	public XIsLiteralExpressionElements getXIsLiteralExpressionAccess() {
		return (pXIsLiteralExpression != null) ? pXIsLiteralExpression : (pXIsLiteralExpression = new XIsLiteralExpressionElements());
	}
	
	public ParserRule getXIsLiteralExpressionRule() {
		return getXIsLiteralExpressionAccess().getRule();
	}

	//XParenthesizedExpression:
	//
	//	"(" a=XExpression ")";
	public XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return (pXParenthesizedExpression != null) ? pXParenthesizedExpression : (pXParenthesizedExpression = new XParenthesizedExpressionElements());
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
