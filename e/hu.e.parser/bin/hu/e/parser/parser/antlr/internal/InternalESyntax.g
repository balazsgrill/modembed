/*
* generated by Xtext
*/
grammar InternalESyntax;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package hu.e.parser.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package hu.e.parser.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import hu.e.parser.services.ESyntaxGrammarAccess;

}

@parser::members {

 	private ESyntaxGrammarAccess grammarAccess;
 	
    public InternalESyntaxParser(TokenStream input, ESyntaxGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "CompilationUnit";	
   	}
   	
   	@Override
   	protected ESyntaxGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getLibraryParserRuleCall_0()); 
    }
    this_Library_0=ruleLibrary
    { 
        $current = $this_Library_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getInstructionSetNotationParserRuleCall_1()); 
    }
    this_InstructionSetNotation_1=ruleInstructionSetNotation
    { 
        $current = $this_InstructionSetNotation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCompilationUnitAccess().getWorkflowNotationParserRuleCall_2()); 
    }
    this_WorkflowNotation_2=ruleWorkflowNotation
    { 
        $current = $this_WorkflowNotation_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLibraryName
entryRuleLibraryName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryNameRule()); } 
	 iv_ruleLibraryName=ruleLibraryName 
	 { $current=$iv_ruleLibraryName.current.getText(); }  
	 EOF 
;

// Rule LibraryName
ruleLibraryName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLibraryNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLibraryNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getLibraryNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getLibraryNameParserRuleCall_0_0()); 
    }
    this_LibraryName_0=ruleLibraryName    {
		$current.merge(this_LibraryName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getColonColonKeyword_0_1()); 
    }
)?    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleLITERAL
entryRuleLITERAL returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLITERALRule()); } 
	 iv_ruleLITERAL=ruleLITERAL 
	 { $current=$iv_ruleLITERAL.current.getText(); }  
	 EOF 
;

// Rule LITERAL
ruleLITERAL returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLITERALAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_HEXINT_1=RULE_HEXINT    {
		$current.merge(this_HEXINT_1);
    }

    { 
    newLeafNode(this_HEXINT_1, grammarAccess.getLITERALAccess().getHEXINTTerminalRuleCall_1()); 
    }

    |    this_BINARY_2=RULE_BINARY    {
		$current.merge(this_BINARY_2);
    }

    { 
    newLeafNode(this_BINARY_2, grammarAccess.getLITERALAccess().getBINARYTerminalRuleCall_2()); 
    }

    |    this_REAL_3=RULE_REAL    {
		$current.merge(this_REAL_3);
    }

    { 
    newLeafNode(this_REAL_3, grammarAccess.getLITERALAccess().getREALTerminalRuleCall_3()); 
    }
)
    ;





// Entry rule entryRuleAnnotationDefinition
entryRuleAnnotationDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationDefinitionRule()); }
	 iv_ruleAnnotationDefinition=ruleAnnotationDefinition 
	 { $current=$iv_ruleAnnotationDefinition.current; } 
	 EOF 
;

// Rule AnnotationDefinition
ruleAnnotationDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='annotation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationDefinitionAccess().getAnnotationKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAnnotationDefinitionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationDefinitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	 iv_ruleAnnotation=ruleAnnotation 
	 { $current=$iv_ruleAnnotation.current; } 
	 EOF 
;

// Rule Annotation
ruleAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getNumberSignKeyword_0());
    }
(
(
		lv_definition_1_0=RULE_ID
		{
			newLeafNode(lv_definition_1_0, grammarAccess.getAnnotationAccess().getDefinitionIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"definition",
        		lv_definition_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleWorkflowNotation
entryRuleWorkflowNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWorkflowNotationRule()); }
	 iv_ruleWorkflowNotation=ruleWorkflowNotation 
	 { $current=$iv_ruleWorkflowNotation.current; } 
	 EOF 
;

// Rule WorkflowNotation
ruleWorkflowNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='workflow' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWorkflowNotationAccess().getWorkflowKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkflowNotationAccess().getNameLibraryNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowNotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getWorkflowNotationAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkflowNotationAccess().getStepsWorkflowStepNotationParserRuleCall_3_0()); 
	    }
		lv_steps_3_0=ruleWorkflowStepNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowNotationRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_3_0, 
        		"WorkflowStepNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleWorkflowStepNotation
entryRuleWorkflowStepNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWorkflowStepNotationRule()); }
	 iv_ruleWorkflowStepNotation=ruleWorkflowStepNotation 
	 { $current=$iv_ruleWorkflowStepNotation.current; } 
	 EOF 
;

// Rule WorkflowStepNotation
ruleWorkflowStepNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getWorkflowStepNotationAccess().getTypeLibraryNameParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowStepNotationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWorkflowStepNotationAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkflowStepNotationAccess().getParamsWorkflowStepParameterNotationParserRuleCall_2_0()); 
	    }
		lv_params_2_0=ruleWorkflowStepParameterNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowStepNotationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"WorkflowStepParameterNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWorkflowStepNotationAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleWorkflowStepParameterNotation
entryRuleWorkflowStepParameterNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWorkflowStepParameterNotationRule()); }
	 iv_ruleWorkflowStepParameterNotation=ruleWorkflowStepParameterNotation 
	 { $current=$iv_ruleWorkflowStepParameterNotation.current; } 
	 EOF 
;

// Rule WorkflowStepParameterNotation
ruleWorkflowStepParameterNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_parameter_0_0=RULE_ID
		{
			newLeafNode(lv_parameter_0_0, grammarAccess.getWorkflowStepParameterNotationAccess().getParameterIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkflowStepParameterNotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWorkflowStepParameterNotationAccess().getEqualsSignKeyword_1());
    }
((
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getWorkflowStepParameterNotationAccess().getValueSTRINGTerminalRuleCall_2_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWorkflowStepParameterNotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getWorkflowStepParameterNotationAccess().getValueLibraryNameParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWorkflowStepParameterNotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleInstructionSetNotation
entryRuleInstructionSetNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionSetNotationRule()); }
	 iv_ruleInstructionSetNotation=ruleInstructionSetNotation 
	 { $current=$iv_ruleInstructionSetNotation.current; } 
	 EOF 
;

// Rule InstructionSetNotation
ruleInstructionSetNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instructionset' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstructionSetNotationAccess().getInstructionsetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionSetNotationAccess().getNameLibraryNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionSetNotationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstructionSetNotationAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionSetNotationAccess().getExtendsLibraryNameParserRuleCall_2_1_0()); 
	    }
		lv_extends_3_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionSetNotationRule());
	        }
       		set(
       			$current, 
       			"extends",
        		lv_extends_3_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstructionSetNotationAccess().getSemicolonKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionSetNotationAccess().getInstructionsInstructionNotationParserRuleCall_4_0()); 
	    }
		lv_instructions_5_0=ruleInstructionNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionSetNotationRule());
	        }
       		add(
       			$current, 
       			"instructions",
        		lv_instructions_5_0, 
        		"InstructionNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleInstructionNotation
entryRuleInstructionNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionNotationRule()); }
	 iv_ruleInstructionNotation=ruleInstructionNotation 
	 { $current=$iv_ruleInstructionNotation.current; } 
	 EOF 
;

// Rule InstructionNotation
ruleInstructionNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInstructionNotationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionNotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionNotationAccess().getParamsInstructionParameterNotationParserRuleCall_1_0()); 
	    }
		lv_params_1_0=ruleInstructionParameterNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionNotationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_1_0, 
        		"InstructionParameterNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionNotationAccess().getWordsInstructionWordNotationParserRuleCall_2_0()); 
	    }
		lv_words_2_0=ruleInstructionWordNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionNotationRule());
	        }
       		add(
       			$current, 
       			"words",
        		lv_words_2_0, 
        		"InstructionWordNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleInstructionWordNotation
entryRuleInstructionWordNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionWordNotationRule()); }
	 iv_ruleInstructionWordNotation=ruleInstructionWordNotation 
	 { $current=$iv_ruleInstructionWordNotation.current; } 
	 EOF 
;

// Rule InstructionWordNotation
ruleInstructionWordNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstructionWordNotationAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionWordNotationAccess().getSectionsInsctructionSectionNotationParserRuleCall_1_0()); 
	    }
		lv_sections_1_0=ruleInsctructionSectionNotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionWordNotationRule());
	        }
       		add(
       			$current, 
       			"sections",
        		lv_sections_1_0, 
        		"InsctructionSectionNotation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstructionWordNotationAccess().getGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleInstructionParameterNotation
entryRuleInstructionParameterNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstructionParameterNotationRule()); }
	 iv_ruleInstructionParameterNotation=ruleInstructionParameterNotation 
	 { $current=$iv_ruleInstructionParameterNotation.current; } 
	 EOF 
;

// Rule InstructionParameterNotation
ruleInstructionParameterNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getInstructionParameterNotationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstructionParameterNotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInstructionParameterNotationAccess().getEqualsSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstructionParameterNotationAccess().getDefaultLITERALParserRuleCall_1_1_0()); 
	    }
		lv_default_2_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstructionParameterNotationRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_2_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleInsctructionSectionNotation
entryRuleInsctructionSectionNotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInsctructionSectionNotationRule()); }
	 iv_ruleInsctructionSectionNotation=ruleInsctructionSectionNotation 
	 { $current=$iv_ruleInsctructionSectionNotation.current; } 
	 EOF 
;

// Rule InsctructionSectionNotation
ruleInsctructionSectionNotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='$' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInsctructionSectionNotationAccess().getDollarSignKeyword_0_0_0());
    }
(
(
		lv_param_1_0=RULE_ID
		{
			newLeafNode(lv_param_1_0, grammarAccess.getInsctructionSectionNotationAccess().getParamIDTerminalRuleCall_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInsctructionSectionNotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"param",
        		lv_param_1_0, 
        		"ID");
	    }

)
))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInsctructionSectionNotationAccess().getValueLITERALParserRuleCall_0_1_0()); 
	    }
		lv_value_2_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsctructionSectionNotationRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInsctructionSectionNotationAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsctructionSectionNotationAccess().getSizeLITERALParserRuleCall_2_0()); 
	    }
		lv_size_4_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsctructionSectionNotationRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_4_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getInsctructionSectionNotationAccess().getColonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInsctructionSectionNotationAccess().getShiftLITERALParserRuleCall_3_1_0()); 
	    }
		lv_shift_6_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInsctructionSectionNotationRule());
	        }
       		set(
       			$current, 
       			"shift",
        		lv_shift_6_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	 iv_ruleLibrary=ruleLibrary 
	 { $current=$iv_ruleLibrary.current; } 
	 EOF 
;

// Rule Library
ruleLibrary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='library' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getNameLibraryNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getSemicolonKeyword_2());
    }
(	otherlv_3='use' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLibraryAccess().getUseKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getUseLibraryNameParserRuleCall_3_1_0()); 
	    }
		lv_use_4_0=ruleLibraryName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"use",
        		lv_use_4_0, 
        		"LibraryName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLibraryAccess().getSemicolonKeyword_3_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getLibraryAccess().getItemsLibraryItemParserRuleCall_4_0()); 
	    }
		lv_items_6_0=ruleLibraryItem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLibraryRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_6_0, 
        		"LibraryItem");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleLibraryItem
entryRuleLibraryItem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLibraryItemRule()); }
	 iv_ruleLibraryItem=ruleLibraryItem 
	 { $current=$iv_ruleLibraryItem.current; } 
	 EOF 
;

// Rule LibraryItem
ruleLibraryItem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getOperationParserRuleCall_1()); 
    }
    this_Operation_1=ruleOperation
    { 
        $current = $this_Operation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getVariableParserRuleCall_2_0()); 
    }
    this_Variable_2=ruleVariable
    { 
        $current = $this_Variable_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_2_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getConstantVariableParserRuleCall_3_0()); 
    }
    this_ConstantVariable_4=ruleConstantVariable
    { 
        $current = $this_ConstantVariable_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_3_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getRegisterVariableParserRuleCall_4_0()); 
    }
    this_RegisterVariable_6=ruleRegisterVariable
    { 
        $current = $this_RegisterVariable_6.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_4_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getLibraryItemAccess().getAnnotationDefinitionParserRuleCall_5_0()); 
    }
    this_AnnotationDefinition_8=ruleAnnotationDefinition
    { 
        $current = $this_AnnotationDefinition_8.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLibraryItemAccess().getSemicolonKeyword_5_1());
    }
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='type' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getTypeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getDefTypeDefParserRuleCall_3_0()); 
	    }
		lv_def_3_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_3_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTypeAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	 iv_ruleTypeDef=ruleTypeDef 
	 { $current=$iv_ruleTypeDef.current; } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getDataTypeDefParserRuleCall_0()); 
    }
    this_DataTypeDef_0=ruleDataTypeDef
    { 
        $current = $this_DataTypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getStructTypeDefParserRuleCall_1()); 
    }
    this_StructTypeDef_1=ruleStructTypeDef
    { 
        $current = $this_StructTypeDef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getPointerTypeDefParserRuleCall_2()); 
    }
    this_PointerTypeDef_2=rulePointerTypeDef
    { 
        $current = $this_PointerTypeDef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getArrayTypeDefParserRuleCall_3()); 
    }
    this_ArrayTypeDef_3=ruleArrayTypeDef
    { 
        $current = $this_ArrayTypeDef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getRefTypeDefParserRuleCall_4()); 
    }
    this_RefTypeDef_4=ruleRefTypeDef
    { 
        $current = $this_RefTypeDef_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeDefAccess().getUnspecifiedTypeDefParserRuleCall_5()); 
    }
    this_UnspecifiedTypeDef_5=ruleUnspecifiedTypeDef
    { 
        $current = $this_UnspecifiedTypeDef_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleUnspecifiedTypeDef
entryRuleUnspecifiedTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnspecifiedTypeDefRule()); }
	 iv_ruleUnspecifiedTypeDef=ruleUnspecifiedTypeDef 
	 { $current=$iv_ruleUnspecifiedTypeDef.current; } 
	 EOF 
;

// Rule UnspecifiedTypeDef
ruleUnspecifiedTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUnspecifiedTypeDefAccess().getUnspecifiedTypeDefAction_0(),
            $current);
    }
)	otherlv_1='void' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnspecifiedTypeDefAccess().getVoidKeyword_1());
    }
)
;





// Entry rule entryRulePointerTypeDef
entryRulePointerTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPointerTypeDefRule()); }
	 iv_rulePointerTypeDef=rulePointerTypeDef 
	 { $current=$iv_rulePointerTypeDef.current; } 
	 EOF 
;

// Rule PointerTypeDef
rulePointerTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pointer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPointerTypeDefAccess().getPointerKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPointerTypeDefAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPointerTypeDefAccess().getDefTypeDefParserRuleCall_2_0()); 
	    }
		lv_def_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPointerTypeDefRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPointerTypeDefAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleArrayTypeDef
entryRuleArrayTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayTypeDefRule()); }
	 iv_ruleArrayTypeDef=ruleArrayTypeDef 
	 { $current=$iv_ruleArrayTypeDef.current; } 
	 EOF 
;

// Rule ArrayTypeDef
ruleArrayTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArrayTypeDefAccess().getArrayKeyword_0());
    }
	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayTypeDefAccess().getLessThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefAccess().getDefTypeDefParserRuleCall_2_0()); 
	    }
		lv_def_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefRule());
	        }
       		set(
       			$current, 
       			"def",
        		lv_def_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='>' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayTypeDefAccess().getGreaterThanSignKeyword_3());
    }
(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getArrayTypeDefAccess().getLeftSquareBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayTypeDefAccess().getSizeXExpressionParserRuleCall_4_1_0()); 
	    }
		lv_size_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayTypeDefRule());
	        }
       		set(
       			$current, 
       			"size",
        		lv_size_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArrayTypeDefAccess().getRightSquareBracketKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleRefTypeDef
entryRuleRefTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRefTypeDefRule()); }
	 iv_ruleRefTypeDef=ruleRefTypeDef 
	 { $current=$iv_ruleRefTypeDef.current; } 
	 EOF 
;

// Rule RefTypeDef
ruleRefTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getRefTypeDefAccess().getTypeQualifiedNameParserRuleCall_0()); 
	    }
		lv_type_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRefTypeDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDataTypeDef
entryRuleDataTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataTypeDefRule()); }
	 iv_ruleDataTypeDef=ruleDataTypeDef 
	 { $current=$iv_ruleDataTypeDef.current; } 
	 EOF 
;

// Rule DataTypeDef
ruleDataTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataTypeDefAccess().getIntegerDataTypeDefParserRuleCall_0()); 
    }
    this_IntegerDataTypeDef_0=ruleIntegerDataTypeDef
    { 
        $current = $this_IntegerDataTypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeDefAccess().getFixedDataTypeDefParserRuleCall_1()); 
    }
    this_FixedDataTypeDef_1=ruleFixedDataTypeDef
    { 
        $current = $this_FixedDataTypeDef_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataTypeDefAccess().getLabelDataTypeDefParserRuleCall_2()); 
    }
    this_LabelDataTypeDef_2=ruleLabelDataTypeDef
    { 
        $current = $this_LabelDataTypeDef_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLabelDataTypeDef
entryRuleLabelDataTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabelDataTypeDefRule()); }
	 iv_ruleLabelDataTypeDef=ruleLabelDataTypeDef 
	 { $current=$iv_ruleLabelDataTypeDef.current; } 
	 EOF 
;

// Rule LabelDataTypeDef
ruleLabelDataTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getLabelDataTypeDefAccess().getLabelDataTypeDefAction_0(),
            $current);
    }
)	otherlv_1='label' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLabelDataTypeDefAccess().getLabelKeyword_1());
    }
)
;





// Entry rule entryRuleFixedDataTypeDef
entryRuleFixedDataTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixedDataTypeDefRule()); }
	 iv_ruleFixedDataTypeDef=ruleFixedDataTypeDef 
	 { $current=$iv_ruleFixedDataTypeDef.current; } 
	 EOF 
;

// Rule FixedDataTypeDef
ruleFixedDataTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='fixed' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFixedDataTypeDefAccess().getFixedKeyword_0());
    }
(
(
		lv_bits_1_0=RULE_INT
		{
			newLeafNode(lv_bits_1_0, grammarAccess.getFixedDataTypeDefAccess().getBitsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFixedDataTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bits",
        		lv_bits_1_0, 
        		"INT");
	    }

)
)	otherlv_2='bits' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFixedDataTypeDefAccess().getBitsKeyword_2());
    }
	otherlv_3='scale' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFixedDataTypeDefAccess().getScaleKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFixedDataTypeDefAccess().getEqualsSignKeyword_4());
    }
(
(
		lv_scale_5_0=RULE_REAL
		{
			newLeafNode(lv_scale_5_0, grammarAccess.getFixedDataTypeDefAccess().getScaleREALTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFixedDataTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"scale",
        		lv_scale_5_0, 
        		"REAL");
	    }

)
))
;





// Entry rule entryRuleIntegerDataTypeDef
entryRuleIntegerDataTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerDataTypeDefRule()); }
	 iv_ruleIntegerDataTypeDef=ruleIntegerDataTypeDef 
	 { $current=$iv_ruleIntegerDataTypeDef.current; } 
	 EOF 
;

// Rule IntegerDataTypeDef
ruleIntegerDataTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerDataTypeDefAccess().getKindIntegerKindEnumRuleCall_0_0()); 
	    }
		lv_kind_0_0=ruleIntegerKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerDataTypeDefRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_0_0, 
        		"IntegerKind");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_bits_1_0=RULE_INT
		{
			newLeafNode(lv_bits_1_0, grammarAccess.getIntegerDataTypeDefAccess().getBitsINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerDataTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"bits",
        		lv_bits_1_0, 
        		"INT");
	    }

)
)	otherlv_2='bits' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntegerDataTypeDefAccess().getBitsKeyword_2());
    }
)
;





// Entry rule entryRuleStructTypeDef
entryRuleStructTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeDefRule()); }
	 iv_ruleStructTypeDef=ruleStructTypeDef 
	 { $current=$iv_ruleStructTypeDef.current; } 
	 EOF 
;

// Rule StructTypeDef
ruleStructTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructTypeDefAccess().getStructTypeDefAction_0(),
            $current);
    }
)	otherlv_1='struct' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructTypeDefAccess().getStructKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStructTypeDefAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefAccess().getMembersStructTypeDefMemberParserRuleCall_3_0()); 
	    }
		lv_members_3_0=ruleStructTypeDefMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_3_0, 
        		"StructTypeDefMember");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructTypeDefAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefAccess().getMembersStructTypeDefMemberParserRuleCall_4_1_0()); 
	    }
		lv_members_5_0=ruleStructTypeDefMember		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefRule());
	        }
       		add(
       			$current, 
       			"members",
        		lv_members_5_0, 
        		"StructTypeDefMember");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStructTypeDefAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleStructTypeDefMember
entryRuleStructTypeDefMember returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructTypeDefMemberRule()); }
	 iv_ruleStructTypeDefMember=ruleStructTypeDefMember 
	 { $current=$iv_ruleStructTypeDefMember.current; } 
	 EOF 
;

// Rule StructTypeDefMember
ruleStructTypeDefMember returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructTypeDefMemberAccess().getStructTypeDefMemberAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructTypeDefMemberAccess().getTypeTypeDefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructTypeDefMemberRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getStructTypeDefMemberAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStructTypeDefMemberRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleConstantVariable
entryRuleConstantVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantVariableRule()); }
	 iv_ruleConstantVariable=ruleConstantVariable 
	 { $current=$iv_ruleConstantVariable.current; } 
	 EOF 
;

// Rule ConstantVariable
ruleConstantVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConstantVariableAccess().getConstantVariableAction_0(),
            $current);
    }
)	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConstantVariableAccess().getConstKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getConstantVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantVariableAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstantVariableAccess().getValueXExpressionParserRuleCall_5_0()); 
	    }
		lv_value_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstantVariableRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRegisterVariable
entryRuleRegisterVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRegisterVariableRule()); }
	 iv_ruleRegisterVariable=ruleRegisterVariable 
	 { $current=$iv_ruleRegisterVariable.current; } 
	 EOF 
;

// Rule RegisterVariable
ruleRegisterVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getRegisterVariableAccess().getRegisterVariableAction_0(),
            $current);
    }
)	otherlv_1='reg' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRegisterVariableAccess().getRegKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getRegisterVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRegisterVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRegisterVariableAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRegisterVariableAccess().getAddrXExpressionParserRuleCall_5_0()); 
	    }
		lv_addr_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRegisterVariableRule());
	        }
       		set(
       			$current, 
       			"addr",
        		lv_addr_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperationStep
entryRuleOperationStep returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationStepRule()); }
	 iv_ruleOperationStep=ruleOperationStep 
	 { $current=$iv_ruleOperationStep.current; } 
	 EOF 
;

// Rule OperationStep
ruleOperationStep returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getVariableParserRuleCall_0_0()); 
    }
    this_Variable_0=ruleVariable
    { 
        $current = $this_Variable_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationStepAccess().getSemicolonKeyword_0_1());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getOperationStepAccess().getXTopLevelExpressionParserRuleCall_1()); 
    }
    this_XTopLevelExpression_2=ruleXTopLevelExpression
    { 
        $current = $this_XTopLevelExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeDefParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleResultVariableReference
entryRuleResultVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getResultVariableReferenceRule()); }
	 iv_ruleResultVariableReference=ruleResultVariableReference 
	 { $current=$iv_ruleResultVariableReference.current; } 
	 EOF 
;

// Rule ResultVariableReference
ruleResultVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getResultVariableReferenceAccess().getResultVariableReferenceAction_0(),
            $current);
    }
)	otherlv_1='result' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getResultVariableReferenceAccess().getResultKeyword_1());
    }
)
;





// Entry rule entryRuleVariableReference
entryRuleVariableReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableReferenceRule()); }
	 iv_ruleVariableReference=ruleVariableReference 
	 { $current=$iv_ruleVariableReference.current; } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableReferenceAccess().getVarQualifiedNameParserRuleCall_0()); 
	    }
		lv_var_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableReferenceRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleOperationCall
entryRuleOperationCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallRule()); }
	 iv_ruleOperationCall=ruleOperationCall 
	 { $current=$iv_ruleOperationCall.current; } 
	 EOF 
;

// Rule OperationCall
ruleOperationCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getOperationQualifiedNameParserRuleCall_0_0()); 
	    }
		lv_operation_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		set(
       			$current, 
       			"operation",
        		lv_operation_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsOperationCallParameterParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleOperationCallParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"OperationCallParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationCallAccess().getParamsOperationCallParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleOperationCallParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"OperationCallParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOperationCallParameter
entryRuleOperationCallParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationCallParameterRule()); }
	 iv_ruleOperationCallParameter=ruleOperationCallParameter 
	 { $current=$iv_ruleOperationCallParameter.current; } 
	 EOF 
;

// Rule OperationCallParameter
ruleOperationCallParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOperationCallParameterAccess().getXExpressionParserRuleCall()); 
    }
    this_XExpression_0=ruleXExpression
    { 
        $current = $this_XExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOperationTypeDef
entryRuleOperationTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationTypeDefRule()); }
	 iv_ruleOperationTypeDef=ruleOperationTypeDef 
	 { $current=$iv_ruleOperationTypeDef.current; } 
	 EOF 
;

// Rule OperationTypeDef
ruleOperationTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationTypeDefAccess().getResultTypeTypeDefParserRuleCall_0_0()); 
	    }
		lv_resultType_0_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationTypeDefRule());
	        }
       		set(
       			$current, 
       			"resultType",
        		lv_resultType_0_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationTypeDefAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getOperationTypeDefAccess().getParamsOperationParameterParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleOperationParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationTypeDefRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"OperationParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationTypeDefAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationTypeDefAccess().getParamsOperationParameterParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleOperationParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationTypeDefRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"OperationParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationTypeDefAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='function' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOperationAccess().getFunctionKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getTypeOperationTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleOperationTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"OperationTypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='overrides' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getOverridesKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getOverridesQualifiedNameParserRuleCall_3_1_0()); 
	    }
		lv_overrides_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"overrides",
        		lv_overrides_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getOperationAccess().getContentXExpressionParserRuleCall_4_0()); 
	    }
		lv_content_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOperationRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOperationParameter
entryRuleOperationParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationParameterRule()); }
	 iv_ruleOperationParameter=ruleOperationParameter 
	 { $current=$iv_ruleOperationParameter.current; } 
	 EOF 
;

// Rule OperationParameter
ruleOperationParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOperationParameterAccess().getParameterVariableParserRuleCall_0()); 
    }
    this_ParameterVariable_0=ruleParameterVariable
    { 
        $current = $this_ParameterVariable_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperationParameterAccess().getLazyParameterParserRuleCall_1()); 
    }
    this_LazyParameter_1=ruleLazyParameter
    { 
        $current = $this_LazyParameter_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLazyParameter
entryRuleLazyParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLazyParameterRule()); }
	 iv_ruleLazyParameter=ruleLazyParameter 
	 { $current=$iv_ruleLazyParameter.current; } 
	 EOF 
;

// Rule LazyParameter
ruleLazyParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='lazy' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLazyParameterAccess().getLazyKeyword_0());
    }
(
(
		lv_paramname_1_0=RULE_ID
		{
			newLeafNode(lv_paramname_1_0, grammarAccess.getLazyParameterAccess().getParamnameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLazyParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"paramname",
        		lv_paramname_1_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLazyParameterAccess().getTypeOperationTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleOperationTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLazyParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"OperationTypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterVariable
entryRuleParameterVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterVariableRule()); }
	 iv_ruleParameterVariable=ruleParameterVariable 
	 { $current=$iv_ruleParameterVariable.current; } 
	 EOF 
;

// Rule ParameterVariable
ruleParameterVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterVariableAccess().getParameterVariableAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getKindParameterKindEnumRuleCall_1_0()); 
	    }
		lv_kind_1_0=ruleParameterKind		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"kind",
        		lv_kind_1_0, 
        		"ParameterKind");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getParameterVariableAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterVariableAccess().getEqualsSignKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterVariableAccess().getDefaultLITERALParserRuleCall_4_1_0()); 
	    }
		lv_default_5_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterVariableRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_5_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXExpressionAccess().getXExpression6ParserRuleCall_0()); 
    }
    this_XExpression6_0=ruleXExpression6
    { 
        $current = $this_XExpression6_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXExpressionAccess().getColonKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionAccess().getTypeTypeDefParserRuleCall_1_1_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXExpressionBlock
entryRuleXExpressionBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionBlockRule()); }
	 iv_ruleXExpressionBlock=ruleXExpressionBlock 
	 { $current=$iv_ruleXExpressionBlock.current; } 
	 EOF 
;

// Rule XExpressionBlock
ruleXExpressionBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXExpressionBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpressionBlockAccess().getOperationBlockAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionBlockAccess().getStepsOperationStepParserRuleCall_2_0()); 
	    }
		lv_steps_2_0=ruleOperationStep		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionBlockRule());
	        }
       		add(
       			$current, 
       			"steps",
        		lv_steps_2_0, 
        		"OperationStep");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXExpressionBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXExpressionLiteralParserRuleCall_0()); 
    }
    this_XExpressionLiteral_0=ruleXExpressionLiteral
    { 
        $current = $this_XExpressionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_1()); 
    }
    this_XParenthesizedExpression_1=ruleXParenthesizedExpression
    { 
        $current = $this_XParenthesizedExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIsLiteralExpressionParserRuleCall_2()); 
    }
    this_XIsLiteralExpression_2=ruleXIsLiteralExpression
    { 
        $current = $this_XIsLiteralExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getVariableReferenceParserRuleCall_3()); 
    }
    this_VariableReference_3=ruleVariableReference
    { 
        $current = $this_VariableReference_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getOperationCallParserRuleCall_4()); 
    }
    this_OperationCall_4=ruleOperationCall
    { 
        $current = $this_OperationCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXStructExpressionParserRuleCall_5()); 
    }
    this_XStructExpression_5=ruleXStructExpression
    { 
        $current = $this_XStructExpression_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSizeOfExpressionParserRuleCall_6()); 
    }
    this_XSizeOfExpression_6=ruleXSizeOfExpression
    { 
        $current = $this_XSizeOfExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXExpressionBlockParserRuleCall_7()); 
    }
    this_XExpressionBlock_7=ruleXExpressionBlock
    { 
        $current = $this_XExpressionBlock_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getResultVariableReferenceParserRuleCall_8()); 
    }
    this_ResultVariableReference_8=ruleResultVariableReference
    { 
        $current = $this_ResultVariableReference_8.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSizeOfExpression
entryRuleXSizeOfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSizeOfExpressionRule()); }
	 iv_ruleXSizeOfExpression=ruleXSizeOfExpression 
	 { $current=$iv_ruleXSizeOfExpression.current; } 
	 EOF 
;

// Rule XSizeOfExpression
ruleXSizeOfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sizeof' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXSizeOfExpressionAccess().getSizeofKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSizeOfExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSizeOfExpressionAccess().getTypeTypeDefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleTypeDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSizeOfExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"TypeDef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXSizeOfExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleXStructExpression
entryRuleXStructExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXStructExpressionRule()); }
	 iv_ruleXStructExpression=ruleXStructExpression 
	 { $current=$iv_ruleXStructExpression.current; } 
	 EOF 
;

// Rule XStructExpression
ruleXStructExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXStructExpressionAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXStructExpressionAccess().getValuesXExpressionParserRuleCall_1_0()); 
	    }
		lv_values_1_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXStructExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXStructExpressionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXStructExpressionAccess().getValuesXExpressionParserRuleCall_2_1_0()); 
	    }
		lv_values_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXStructExpressionRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXStructExpressionAccess().getCommaKeyword_3());
    }
)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXStructExpressionAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXExpression1
entryRuleXExpression1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression1Rule()); }
	 iv_ruleXExpression1=ruleXExpression1 
	 { $current=$iv_ruleXExpression1.current; } 
	 EOF 
;

// Rule XExpression1
ruleXExpression1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression1Access().getOperatorUNARY_OPERATOREnumRuleCall_0_0()); 
	    }
		lv_operator_0_0=ruleUNARY_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression1Rule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_0_0, 
        		"UNARY_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression1Access().getAXExpression0ParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleXExpression0		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression1Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"XExpression0");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpression0
entryRuleXExpression0 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression0Rule()); }
	 iv_ruleXExpression0=ruleXExpression0 
	 { $current=$iv_ruleXExpression0.current; } 
	 EOF 
;

// Rule XExpression0
ruleXExpression0 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression0Access().getAXExpressionM1ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpressionM1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression0Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpressionM1");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXExpression0Access().getHyphenMinusGreaterThanSignKeyword_1_0());
    }
(
(
		lv_member_2_0=RULE_ID
		{
			newLeafNode(lv_member_2_0, grammarAccess.getXExpression0Access().getMemberIDTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXExpression0Rule());
	        }
       		addWithLastConsumed(
       			$current, 
       			"member",
        		lv_member_2_0, 
        		"ID");
	    }

)
))*)
;





// Entry rule entryRuleXExpressionM1
entryRuleXExpressionM1 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionM1Rule()); }
	 iv_ruleXExpressionM1=ruleXExpressionM1 
	 { $current=$iv_ruleXExpressionM1.current; } 
	 EOF 
;

// Rule XExpressionM1
ruleXExpressionM1 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionM1Access().getAXPrimaryExpressionParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXPrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionM1Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XPrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXExpressionM1Access().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionM1Access().getIndexXExpressionParserRuleCall_1_1_0()); 
	    }
		lv_index_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionM1Rule());
	        }
       		add(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXExpressionM1Access().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleXExpression2
entryRuleXExpression2 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression2Rule()); }
	 iv_ruleXExpression2=ruleXExpression2 
	 { $current=$iv_ruleXExpression2.current; } 
	 EOF 
;

// Rule XExpression2
ruleXExpression2 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getAXExpression1ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression1		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression1");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleMULTIPLICATIVE_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getOpMULTIPLICATIVE_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleMULTIPLICATIVE_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"MULTIPLICATIVE_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression2Access().getBXExpression2ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression2Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression3
entryRuleXExpression3 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression3Rule()); }
	 iv_ruleXExpression3=ruleXExpression3 
	 { $current=$iv_ruleXExpression3.current; } 
	 EOF 
;

// Rule XExpression3
ruleXExpression3 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getAXExpression2ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleADDITIVE_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getOpADDITIVE_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleADDITIVE_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"ADDITIVE_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression3Access().getBXExpression2ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression2		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression3Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression2");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression4
entryRuleXExpression4 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression4Rule()); }
	 iv_ruleXExpression4=ruleXExpression4 
	 { $current=$iv_ruleXExpression4.current; } 
	 EOF 
;

// Rule XExpression4
ruleXExpression4 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getAXExpression3ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression3");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleEQUALITY_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getOpEQUALITY_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleEQUALITY_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"EQUALITY_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression4Access().getBXExpression3ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression3		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression4Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression3");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression5
entryRuleXExpression5 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression5Rule()); }
	 iv_ruleXExpression5=ruleXExpression5 
	 { $current=$iv_ruleXExpression5.current; } 
	 EOF 
;

// Rule XExpression5
ruleXExpression5 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getAXExpression4ParserRuleCall_0_0()); 
	    }
		lv_a_0_0=ruleXExpression4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_0_0, 
        		"XExpression4");
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
ruleBOOLEAN_OPERATOR
)
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getOpBOOLEAN_OPERATOREnumRuleCall_1_0_0()); 
	    }
		lv_op_1_0=ruleBOOLEAN_OPERATOR		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		add(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"BOOLEAN_OPERATOR");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression5Access().getBXExpression4ParserRuleCall_1_1_0()); 
	    }
		lv_b_2_0=ruleXExpression4		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression5Rule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_2_0, 
        		"XExpression4");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXExpression6
entryRuleXExpression6 returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpression6Rule()); }
	 iv_ruleXExpression6=ruleXExpression6 
	 { $current=$iv_ruleXExpression6.current; } 
	 EOF 
;

// Rule XExpression6
ruleXExpression6 returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression6Access().getRefVariableReferenceParserRuleCall_0_0_0()); 
	    }
		lv_ref_0_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression6Rule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_0_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression6Access().getOpOpSingleAssignEnumRuleCall_0_1_0()); 
	    }
		lv_op_1_0=ruleOpSingleAssign		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression6Rule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"OpSingleAssign");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpression6Access().getAXExpression5ParserRuleCall_1_0()); 
	    }
		lv_a_2_0=ruleXExpression5		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpression6Rule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_2_0, 
        		"XExpression5");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXExpressionLiteral
entryRuleXExpressionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionLiteralRule()); }
	 iv_ruleXExpressionLiteral=ruleXExpressionLiteral 
	 { $current=$iv_ruleXExpressionLiteral.current; } 
	 EOF 
;

// Rule XExpressionLiteral
ruleXExpressionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionLiteralAccess().getValueLITERALParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleLITERAL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"LITERAL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleXTopLevelExpression
entryRuleXTopLevelExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTopLevelExpressionRule()); }
	 iv_ruleXTopLevelExpression=ruleXTopLevelExpression 
	 { $current=$iv_ruleXTopLevelExpression.current; } 
	 EOF 
;

// Rule XTopLevelExpression
ruleXTopLevelExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getAnnotationParserRuleCall_0_0()); 
    }
    this_Annotation_0=ruleAnnotation
    { 
        $current = $this_Annotation_0.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTopLevelExpressionAccess().getSemicolonKeyword_0_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getXExpressionParserRuleCall_1_0()); 
    }
    this_XExpression_2=ruleXExpression
    { 
        $current = $this_XExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXTopLevelExpressionAccess().getSemicolonKeyword_1_1());
    }
)
    |(
    { 
        newCompositeNode(grammarAccess.getXTopLevelExpressionAccess().getXErrorExpressionParserRuleCall_2_0()); 
    }
    this_XErrorExpression_4=ruleXErrorExpression
    { 
        $current = $this_XErrorExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXTopLevelExpressionAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleXErrorExpression
entryRuleXErrorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXErrorExpressionRule()); }
	 iv_ruleXErrorExpression=ruleXErrorExpression 
	 { $current=$iv_ruleXErrorExpression.current; } 
	 EOF 
;

// Rule XErrorExpression
ruleXErrorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getXErrorExpressionAccess().getLevelErrorLevelsEnumRuleCall_0_0()); 
	    }
		lv_level_0_0=ruleErrorLevels		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXErrorExpressionRule());
	        }
       		set(
       			$current, 
       			"level",
        		lv_level_0_0, 
        		"ErrorLevels");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_msg_1_0=RULE_STRING
		{
			newLeafNode(lv_msg_1_0, grammarAccess.getXErrorExpressionAccess().getMsgSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXErrorExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"msg",
        		lv_msg_1_0, 
        		"STRING");
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXErrorExpressionAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleXIsLiteralExpression
entryRuleXIsLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXIsLiteralExpressionRule()); }
	 iv_ruleXIsLiteralExpression=ruleXIsLiteralExpression 
	 { $current=$iv_ruleXIsLiteralExpression.current; } 
	 EOF 
;

// Rule XIsLiteralExpression
ruleXIsLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='isliteral' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXIsLiteralExpressionAccess().getIsliteralKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIsLiteralExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIsLiteralExpressionAccess().getRefVariableReferenceParserRuleCall_2_0()); 
	    }
		lv_ref_2_0=ruleVariableReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIsLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"VariableReference");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXIsLiteralExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getAXExpressionParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXParenthesizedExpressionRule());
	        }
       		set(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Rule IntegerKind
ruleIntegerKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='unsigned' 
	{
        $current = grammarAccess.getIntegerKindAccess().getUNSIGNEDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getIntegerKindAccess().getUNSIGNEDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='signed' 
	{
        $current = grammarAccess.getIntegerKindAccess().getSIGNEDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getIntegerKindAccess().getSIGNEDEnumLiteralDeclaration_1()); 
    }
));



// Rule ParameterKind
ruleParameterKind returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='default' 
	{
        $current = grammarAccess.getParameterKindAccess().getANYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getParameterKindAccess().getANYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='var' 
	{
        $current = grammarAccess.getParameterKindAccess().getVAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getParameterKindAccess().getVAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='const' 
	{
        $current = grammarAccess.getParameterKindAccess().getCONSTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getParameterKindAccess().getCONSTEnumLiteralDeclaration_2()); 
    }
));



// Rule UNARY_OPERATOR
ruleUNARY_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='-' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getMINUSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUNARY_OPERATORAccess().getMINUSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getNOTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getUNARY_OPERATORAccess().getNOTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='&' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getREFERENCEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getUNARY_OPERATORAccess().getREFERENCEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='@' 
	{
        $current = grammarAccess.getUNARY_OPERATORAccess().getDEREFERENCEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getUNARY_OPERATORAccess().getDEREFERENCEEnumLiteralDeclaration_3()); 
    }
));



// Rule MULTIPLICATIVE_OPERATOR
ruleMULTIPLICATIVE_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMULEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMULEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getDIVEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='%' 
	{
        $current = grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMULTIPLICATIVE_OPERATORAccess().getMODEnumLiteralDeclaration_2()); 
    }
));



// Rule ADDITIVE_OPERATOR
ruleADDITIVE_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getADDITIVE_OPERATORAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getADDITIVE_OPERATORAccess().getADDEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getADDITIVE_OPERATORAccess().getMINUSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getADDITIVE_OPERATORAccess().getMINUSEnumLiteralDeclaration_1()); 
    }
));



// Rule EQUALITY_OPERATOR
ruleEQUALITY_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getEQUALSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEQUALITY_OPERATORAccess().getEQUALSEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getNOTEQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEQUALITY_OPERATORAccess().getNOTEQUALSEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getGTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getEQUALITY_OPERATORAccess().getGTEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='<=' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getLTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getEQUALITY_OPERATORAccess().getLTEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='>' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getGTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getEQUALITY_OPERATORAccess().getGTEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='<' 
	{
        $current = grammarAccess.getEQUALITY_OPERATORAccess().getLTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getEQUALITY_OPERATORAccess().getLTEnumLiteralDeclaration_5()); 
    }
));



// Rule BOOLEAN_OPERATOR
ruleBOOLEAN_OPERATOR returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='||' 
	{
        $current = grammarAccess.getBOOLEAN_OPERATORAccess().getOREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOLEAN_OPERATORAccess().getOREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='&&' 
	{
        $current = grammarAccess.getBOOLEAN_OPERATORAccess().getANDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOLEAN_OPERATORAccess().getANDEnumLiteralDeclaration_1()); 
    }
));



// Rule ErrorLevels
ruleErrorLevels returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='error' 
	{
        $current = grammarAccess.getErrorLevelsAccess().getERROREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getErrorLevelsAccess().getERROREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='warning' 
	{
        $current = grammarAccess.getErrorLevelsAccess().getWARNINGEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getErrorLevelsAccess().getWARNINGEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='info' 
	{
        $current = grammarAccess.getErrorLevelsAccess().getINFOEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getErrorLevelsAccess().getINFOEnumLiteralDeclaration_2()); 
    }
));



// Rule OpSingleAssign
ruleOpSingleAssign returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='=' 
	{
        $current = grammarAccess.getOpSingleAssignAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOpSingleAssignAccess().getASSIGNEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='+=' 
	{
        $current = grammarAccess.getOpSingleAssignAccess().getASSIGNADDEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOpSingleAssignAccess().getASSIGNADDEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='-=' 
	{
        $current = grammarAccess.getOpSingleAssignAccess().getASSIGNSUBTRACTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOpSingleAssignAccess().getASSIGNSUBTRACTEnumLiteralDeclaration_2()); 
    }
));



RULE_HEXINT : '0x' ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_BINARY : 'b' ('0'|'1')+;

RULE_REAL : RULE_INT '.' RULE_INT?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


